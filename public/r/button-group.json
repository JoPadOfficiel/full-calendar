{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "button-group",
  "type": "registry:component",
  "title": "Buttons group",
  "description": "A group of buttons that act as a single component, allowing users to select one or more options.",
  "registryDependencies": [
    "avatar"
  ],
  "files": [
    {
      "path": "src/components/ui/button-group.tsx",
      "content": "import {Children, ReactElement, cloneElement} from 'react';\n\nimport {cn} from '@/lib/utils';\nimport * as React from \"react\";\nimport type {VariantProps} from \"class-variance-authority\";\nimport {buttonVariants} from \"@/components/ui/button\";\n\ninterface ButtonGroupProps {\n    className?: string;\n    orientation?: 'horizontal' | 'vertical';\n    children: ReactElement<React.ComponentProps<\"button\"> &\n        VariantProps<typeof buttonVariants> & {\n        asChild?: boolean\n    }>[];\n}\n\nexport const ButtonGroup = ({\n                                className,\n                                orientation = 'horizontal',\n                                children\n                            }: ButtonGroupProps) => {\n    const totalButtons = Children.count(children);\n    const isHorizontal = orientation === 'horizontal';\n    const isVertical = orientation === 'vertical';\n\n    return (\n        <div\n            className={cn(\n                'flex',\n                {\n                    'flex-col': isVertical,\n                    'w-fit': isVertical\n                },\n                className\n            )}\n        >\n            {Children.map(children, (child, index) => {\n                const isFirst = index === 0;\n                const isLast = index === totalButtons - 1;\n\n                return cloneElement(child, {\n                    className: cn(\n                        {\n                            'rounded-s-none': isHorizontal && !isFirst,\n                            'rounded-e-none': isHorizontal && !isLast,\n                            'border-s-0': isHorizontal && !isFirst,\n\n                            'rounded-t-none': isVertical && !isFirst,\n                            'rounded-b-none': isVertical && !isLast,\n                            'border-t-0': isVertical && !isFirst\n                        },\n                        child.props.className\n                    )\n                });\n            })}\n        </div>\n    );\n};",
      "type": "registry:component"
    }
  ]
}