{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "date-time-picker",
  "type": "registry:component",
  "title": "Date Time Picker",
  "description": "A date and time picker component for selecting dates and times.",
  "registryDependencies": [
    "button",
    "calendar",
    "form",
    "popover",
    "scroll-area"
  ],
  "files": [
    {
      "path": "src/components/ui/date-time-picker.tsx",
      "content": "import { format } from \"date-fns\";\nimport { CalendarIcon } from \"lucide-react\";\nimport type { ControllerRenderProps, UseFormReturn } from \"react-hook-form\";\nimport { Button } from \"@/components/ui/button\";\nimport { Calendar } from \"@/components/ui/calendar\";\nimport {\n\tFormControl,\n\tFormItem,\n\tFormLabel,\n\tFormMessage,\n} from \"@/components/ui/form\";\nimport {\n\tPopover,\n\tPopoverContent,\n\tPopoverTrigger,\n} from \"@/components/ui/popover\";\nimport { ScrollArea, ScrollBar } from \"@/components/ui/scroll-area\";\nimport { cn } from \"@/lib/utils\";\nimport { useCalendar } from \"@/modules/components/calendar/contexts/calendar-context\";\nimport type { TEventFormData } from \"@/modules/components/calendar/schemas\";\n\ninterface DatePickerProps {\n\tform: UseFormReturn<TEventFormData>;\n\tfield: ControllerRenderProps<TEventFormData, \"endDate\" | \"startDate\">;\n}\n\nexport function DateTimePicker({ form, field }: DatePickerProps) {\n\tconst { use24HourFormat } = useCalendar();\n\n\tfunction handleDateSelect(date: Date | undefined) {\n\t\tif (date) {\n\t\t\tform.setValue(field.name, date);\n\t\t}\n\t}\n\n\tfunction handleTimeChange(type: \"hour\" | \"minute\" | \"ampm\", value: string) {\n\t\tconst currentDate = form.getValues(field.name) || new Date();\n\t\tconst newDate = new Date(currentDate);\n\n\t\tif (type === \"hour\") {\n\t\t\tnewDate.setHours(parseInt(value, 10));\n\t\t} else if (type === \"minute\") {\n\t\t\tnewDate.setMinutes(parseInt(value, 10));\n\t\t} else if (type === \"ampm\") {\n\t\t\tconst hours = newDate.getHours();\n\t\t\tif (value === \"AM\" && hours >= 12) {\n\t\t\t\tnewDate.setHours(hours - 12);\n\t\t\t} else if (value === \"PM\" && hours < 12) {\n\t\t\t\tnewDate.setHours(hours + 12);\n\t\t\t}\n\t\t}\n\n\t\tform.setValue(field.name, newDate);\n\t}\n\n\treturn (\n\t\t<FormItem className=\"flex flex-col\">\n\t\t\t<FormLabel>\n\t\t\t\t{field.name === \"startDate\" ? \"Start Date\" : \"End Date\"}\n\t\t\t</FormLabel>\n\t\t\t<Popover modal={true}>\n\t\t\t\t<PopoverTrigger asChild>\n\t\t\t\t\t<FormControl>\n\t\t\t\t\t\t<Button\n\t\t\t\t\t\t\tvariant={\"outline\"}\n\t\t\t\t\t\t\tclassName={cn(\n\t\t\t\t\t\t\t\t\"w-full pl-3 text-left font-normal\",\n\t\t\t\t\t\t\t\t!field.value && \"text-muted-foreground\",\n\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t{field.value ? (\n\t\t\t\t\t\t\t\tformat(\n\t\t\t\t\t\t\t\t\tfield.value,\n\t\t\t\t\t\t\t\t\tuse24HourFormat ? \"MM/dd/yyyy HH:mm\" : \"MM/dd/yyyy hh:mm aa\",\n\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t) : (\n\t\t\t\t\t\t\t\t<span>MM/DD/YYYY hh:mm aa</span>\n\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t\t<CalendarIcon className=\"ml-auto h-4 w-4 opacity-50\" />\n\t\t\t\t\t\t</Button>\n\t\t\t\t\t</FormControl>\n\t\t\t\t</PopoverTrigger>\n\t\t\t\t<PopoverContent className=\"w-auto p-0\">\n\t\t\t\t\t<div className=\"sm:flex\">\n\t\t\t\t\t\t<Calendar\n\t\t\t\t\t\t\tmode=\"single\"\n\t\t\t\t\t\t\tselected={field.value}\n\t\t\t\t\t\t\tonSelect={handleDateSelect}\n\t\t\t\t\t\t\tinitialFocus\n\t\t\t\t\t\t/>\n\t\t\t\t\t\t<div className=\"flex flex-col sm:flex-row sm:h-[300px] divide-y sm:divide-y-0 sm:divide-x\">\n\t\t\t\t\t\t\t<ScrollArea className=\"w-64 sm:w-auto\">\n\t\t\t\t\t\t\t\t<div className=\"flex sm:flex-col p-2\">\n\t\t\t\t\t\t\t\t\t{Array.from(\n\t\t\t\t\t\t\t\t\t\t{ length: use24HourFormat ? 24 : 12 },\n\t\t\t\t\t\t\t\t\t\t(_, i) => i,\n\t\t\t\t\t\t\t\t\t).map((hour) => (\n\t\t\t\t\t\t\t\t\t\t<Button\n\t\t\t\t\t\t\t\t\t\t\tkey={hour}\n\t\t\t\t\t\t\t\t\t\t\tsize=\"icon\"\n\t\t\t\t\t\t\t\t\t\t\tvariant={\n\t\t\t\t\t\t\t\t\t\t\t\tfield.value &&\n\t\t\t\t\t\t\t\t\t\t\t\tfield.value.getHours() % (use24HourFormat ? 24 : 12) ===\n\t\t\t\t\t\t\t\t\t\t\t\t\thour % (use24HourFormat ? 24 : 12)\n\t\t\t\t\t\t\t\t\t\t\t\t\t? \"default\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t: \"ghost\"\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\tclassName=\"sm:w-full shrink-0 aspect-square\"\n\t\t\t\t\t\t\t\t\t\t\tonClick={() => handleTimeChange(\"hour\", hour.toString())}\n\t\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\t\t{hour.toString().padStart(2, \"0\")}\n\t\t\t\t\t\t\t\t\t\t</Button>\n\t\t\t\t\t\t\t\t\t))}\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t<ScrollBar orientation=\"horizontal\" className=\"sm:hidden\" />\n\t\t\t\t\t\t\t</ScrollArea>\n\t\t\t\t\t\t\t<ScrollArea className=\"w-64 sm:w-auto\">\n\t\t\t\t\t\t\t\t<div className=\"flex sm:flex-col p-2\">\n\t\t\t\t\t\t\t\t\t{Array.from({ length: 12 }, (_, i) => i * 5).map((minute) => (\n\t\t\t\t\t\t\t\t\t\t<Button\n\t\t\t\t\t\t\t\t\t\t\tkey={minute}\n\t\t\t\t\t\t\t\t\t\t\tsize=\"icon\"\n\t\t\t\t\t\t\t\t\t\t\tvariant={\n\t\t\t\t\t\t\t\t\t\t\t\tfield.value && field.value.getMinutes() === minute\n\t\t\t\t\t\t\t\t\t\t\t\t\t? \"default\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t: \"ghost\"\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\tclassName=\"sm:w-full shrink-0 aspect-square\"\n\t\t\t\t\t\t\t\t\t\t\tonClick={() =>\n\t\t\t\t\t\t\t\t\t\t\t\thandleTimeChange(\"minute\", minute.toString())\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\t\t{minute.toString().padStart(2, \"0\")}\n\t\t\t\t\t\t\t\t\t\t</Button>\n\t\t\t\t\t\t\t\t\t))}\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t<ScrollBar orientation=\"horizontal\" className=\"sm:hidden\" />\n\t\t\t\t\t\t\t</ScrollArea>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t</PopoverContent>\n\t\t\t</Popover>\n\t\t\t<FormMessage />\n\t\t</FormItem>\n\t);\n}\n",
      "type": "registry:component"
    }
  ]
}