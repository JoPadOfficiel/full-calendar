{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "full-calendar",
  "type": "registry:block",
  "title": "Full Calendar",
  "description": "A full calendar component for scheduling events.",
  "dependencies": [
    "motion",
    "date-fns",
    "re-resizable",
    "zod",
    "react-hook-form",
    "@hookform/resolvers",
    "class-variance-authority",
    "clsx",
    "cmdk",
    "framer-motion",
    "lucide-react"
  ],
  "registryDependencies": [
    "alert-dialog",
    "avatar",
    "badge",
    "button",
    "calendar",
    "command",
    "dialog",
    "dropdown-menu",
    "form",
    "input",
    "label",
    "popover",
    "scroll-area",
    "select",
    "skeleton",
    "sonner",
    "switch",
    "textarea",
    "toggle",
    "tooltip",
    "tabs",
    "https://calendar.jeraidi.tech/r/avatar-group.json",
    "https://calendar.jeraidi.tech/r/day-picker.json",
    "https://calendar.jeraidi.tech/r/date-time-picker.json",
    "https://calendar.jeraidi.tech/r/responsive-modal.json",
    "https://calendar.jeraidi.tech/r/button-group.json"
  ],
  "files": [
    {
      "path": "src/modules/components/calendar/contexts/calendar-context.tsx",
      "content": "\"use client\";\n\nimport type React from \"react\";\nimport { createContext, useContext, useState } from \"react\";\nimport { useLocalStorage } from \"@/modules/components/calendar/hooks\";\nimport type { IEvent, IUser } from \"@/modules/components/calendar/interfaces\";\nimport type {\n\tTCalendarView,\n\tTEventColor,\n} from \"@/modules/components/calendar/types\";\n\ninterface ICalendarContext {\n\tselectedDate: Date;\n\tview: TCalendarView;\n\tsetView: (view: TCalendarView) => void;\n\tagendaModeGroupBy: \"date\" | \"color\";\n\tsetAgendaModeGroupBy: (groupBy: \"date\" | \"color\") => void;\n\tuse24HourFormat: boolean;\n\ttoggleTimeFormat: () => void;\n\tsetSelectedDate: (date: Date | undefined) => void;\n\tselectedUserId: IUser[\"id\"] | \"all\";\n\tsetSelectedUserId: (userId: IUser[\"id\"] | \"all\") => void;\n\tbadgeVariant: \"dot\" | \"colored\";\n\tsetBadgeVariant: (variant: \"dot\" | \"colored\") => void;\n\tselectedColors: TEventColor[];\n\tfilterEventsBySelectedColors: (colors: TEventColor) => void;\n\tfilterEventsBySelectedUser: (userId: IUser[\"id\"] | \"all\") => void;\n\tusers: IUser[];\n\tevents: IEvent[];\n\taddEvent: (event: IEvent) => void;\n\tupdateEvent: (event: IEvent) => void;\n\tremoveEvent: (eventId: number) => void;\n\tclearFilter: () => void;\n}\n\ninterface CalendarSettings {\n\tbadgeVariant: \"dot\" | \"colored\";\n\tview: TCalendarView;\n\tuse24HourFormat: boolean;\n\tagendaModeGroupBy: \"date\" | \"color\";\n}\n\nconst DEFAULT_SETTINGS: CalendarSettings = {\n\tbadgeVariant: \"colored\",\n\tview: \"day\",\n\tuse24HourFormat: true,\n\tagendaModeGroupBy: \"date\",\n};\n\nconst CalendarContext = createContext({} as ICalendarContext);\n\nexport function CalendarProvider({\n\tchildren,\n\tusers,\n\tevents,\n\tbadge = \"colored\",\n\tview = \"day\",\n}: {\n\tchildren: React.ReactNode;\n\tusers: IUser[];\n\tevents: IEvent[];\n\tview?: TCalendarView;\n\tbadge?: \"dot\" | \"colored\";\n}) {\n\tconst [settings, setSettings] = useLocalStorage<CalendarSettings>(\n\t\t\"calendar-settings\",\n\t\t{\n\t\t\t...DEFAULT_SETTINGS,\n\t\t\tbadgeVariant: badge,\n\t\t\tview: view,\n\t\t},\n\t);\n\n\tconst [badgeVariant, setBadgeVariantState] = useState<\"dot\" | \"colored\">(\n\t\tsettings.badgeVariant,\n\t);\n\tconst [currentView, setCurrentViewState] = useState<TCalendarView>(\n\t\tsettings.view,\n\t);\n\tconst [use24HourFormat, setUse24HourFormatState] = useState<boolean>(\n\t\tsettings.use24HourFormat,\n\t);\n\tconst [agendaModeGroupBy, setAgendaModeGroupByState] = useState<\n\t\t\"date\" | \"color\"\n\t>(settings.agendaModeGroupBy);\n\n\tconst [selectedDate, setSelectedDate] = useState(new Date());\n\tconst [selectedUserId, setSelectedUserId] = useState<IUser[\"id\"] | \"all\">(\n\t\t\"all\",\n\t);\n\tconst [selectedColors, setSelectedColors] = useState<TEventColor[]>([]);\n\n\tconst [allEvents, setAllEvents] = useState<IEvent[]>(events || []);\n\tconst [filteredEvents, setFilteredEvents] = useState<IEvent[]>(events || []);\n\n\tconst updateSettings = (newPartialSettings: Partial<CalendarSettings>) => {\n\t\tsetSettings({\n\t\t\t...settings,\n\t\t\t...newPartialSettings,\n\t\t});\n\t};\n\n\tconst setBadgeVariant = (variant: \"dot\" | \"colored\") => {\n\t\tsetBadgeVariantState(variant);\n\t\tupdateSettings({ badgeVariant: variant });\n\t};\n\n\tconst setView = (newView: TCalendarView) => {\n\t\tsetCurrentViewState(newView);\n\t\tupdateSettings({ view: newView });\n\t};\n\n\tconst toggleTimeFormat = () => {\n\t\tconst newValue = !use24HourFormat;\n\t\tsetUse24HourFormatState(newValue);\n\t\tupdateSettings({ use24HourFormat: newValue });\n\t};\n\n\tconst setAgendaModeGroupBy = (groupBy: \"date\" | \"color\") => {\n\t\tsetAgendaModeGroupByState(groupBy);\n\t\tupdateSettings({ agendaModeGroupBy: groupBy });\n\t};\n\n\tconst filterEventsBySelectedColors = (color: TEventColor) => {\n\t\tconst isColorSelected = selectedColors.includes(color);\n\t\tconst newColors = isColorSelected\n\t\t\t? selectedColors.filter((c) => c !== color)\n\t\t\t: [...selectedColors, color];\n\n\t\tif (newColors.length > 0) {\n\t\t\tconst filtered = allEvents.filter((event) => {\n\t\t\t\tconst eventColor = event.color || \"blue\";\n\t\t\t\treturn newColors.includes(eventColor);\n\t\t\t});\n\t\t\tsetFilteredEvents(filtered);\n\t\t} else {\n\t\t\tsetFilteredEvents(allEvents);\n\t\t}\n\n\t\tsetSelectedColors(newColors);\n\t};\n\n\tconst filterEventsBySelectedUser = (userId: IUser[\"id\"] | \"all\") => {\n\t\tsetSelectedUserId(userId);\n\t\tif (userId === \"all\") {\n\t\t\tsetFilteredEvents(allEvents);\n\t\t} else {\n\t\t\tconst filtered = allEvents.filter((event) => event.user.id === userId);\n\t\t\tsetFilteredEvents(filtered);\n\t\t}\n\t};\n\n\tconst handleSelectDate = (date: Date | undefined) => {\n\t\tif (!date) return;\n\t\tsetSelectedDate(date);\n\t};\n\n\tconst addEvent = (event: IEvent) => {\n\t\tsetAllEvents((prev) => [...prev, event]);\n\t\tsetFilteredEvents((prev) => [...prev, event]);\n\t};\n\n\tconst updateEvent = (event: IEvent) => {\n\t\tconst updated = {\n\t\t\t...event,\n\t\t\tstartDate: new Date(event.startDate).toISOString(),\n\t\t\tendDate: new Date(event.endDate).toISOString(),\n\t\t};\n\n\t\tsetAllEvents((prev) => prev.map((e) => (e.id === event.id ? updated : e)));\n\t\tsetFilteredEvents((prev) =>\n\t\t\tprev.map((e) => (e.id === event.id ? updated : e)),\n\t\t);\n\t};\n\n\tconst removeEvent = (eventId: number) => {\n\t\tsetAllEvents((prev) => prev.filter((e) => e.id !== eventId));\n\t\tsetFilteredEvents((prev) => prev.filter((e) => e.id !== eventId));\n\t};\n\n\tconst clearFilter = () => {\n\t\tsetFilteredEvents(allEvents);\n\t\tsetSelectedColors([]);\n\t\tsetSelectedUserId(\"all\");\n\t};\n\n\tconst value = {\n\t\tselectedDate,\n\t\tsetSelectedDate: handleSelectDate,\n\t\tselectedUserId,\n\t\tsetSelectedUserId,\n\t\tbadgeVariant,\n\t\tsetBadgeVariant,\n\t\tusers,\n\t\tselectedColors,\n\t\tfilterEventsBySelectedColors,\n\t\tfilterEventsBySelectedUser,\n\t\tevents: filteredEvents,\n\t\tview: currentView,\n\t\tuse24HourFormat,\n\t\ttoggleTimeFormat,\n\t\tsetView,\n\t\tagendaModeGroupBy,\n\t\tsetAgendaModeGroupBy,\n\t\taddEvent,\n\t\tupdateEvent,\n\t\tremoveEvent,\n\t\tclearFilter,\n\t};\n\n\treturn (\n\t\t<CalendarContext.Provider value={value}>\n\t\t\t{children}\n\t\t</CalendarContext.Provider>\n\t);\n}\n\nexport function useCalendar(): ICalendarContext {\n\tconst context = useContext(CalendarContext);\n\tif (!context)\n\t\tthrow new Error(\"useCalendar must be used within a CalendarProvider.\");\n\treturn context;\n}\n",
      "type": "registry:component"
    },
    {
      "path": "src/modules/components/calendar/contexts/dnd-context.tsx",
      "content": "\"use client\";\n\nimport React, {\n\tcreateContext,\n\ttype ReactNode,\n\tuseCallback,\n\tuseContext,\n\tuseRef,\n\tuseState,\n\tuseMemo,\n} from \"react\";\nimport { toast } from \"sonner\";\nimport { useCalendar } from \"@/modules/components/calendar/contexts/calendar-context\";\nimport type { IEvent } from \"@/modules/components/calendar/interfaces\";\nimport { DndConfirmationDialog } from \"@/modules/components/calendar/dialogs/dnd-confirmation-dialog\";\n\ninterface PendingDropData {\n\tevent: IEvent;\n\tnewStartDate: Date;\n\tnewEndDate: Date;\n}\n\ninterface DragDropContextType {\n\tdraggedEvent: IEvent | null;\n\tisDragging: boolean;\n\tstartDrag: (event: IEvent) => void;\n\tendDrag: () => void;\n\thandleEventDrop: (date: Date, hour?: number, minute?: number) => void;\n\tshowConfirmation: boolean;\n\tsetShowConfirmation: (show: boolean) => void;\n\tpendingDropData: PendingDropData | null;\n\thandleConfirmDrop: () => void;\n\thandleCancelDrop: () => void;\n}\n\ninterface DndProviderProps {\n\tchildren: ReactNode;\n\tshowConfirmation: boolean;\n}\n\nconst DragDropContext = createContext<DragDropContextType | undefined>(\n\tundefined,\n);\n\nexport function DndProvider({\n\tchildren,\n\tshowConfirmation: showConfirmationProp = false,\n}: DndProviderProps) {\n\tconst { updateEvent } = useCalendar();\n\tconst [dragState, setDragState] = useState<{\n\t\tdraggedEvent: IEvent | null;\n\t\tisDragging: boolean;\n\t}>({ draggedEvent: null, isDragging: false });\n\n\tconst [showConfirmation, setShowConfirmation] =\n\t\tuseState<boolean>(showConfirmationProp);\n\n\tconst [pendingDropData, setPendingDropData] =\n\t\tuseState<PendingDropData | null>(null);\n\n\tconst onEventDroppedRef = useRef<\n\t\t((event: IEvent, newStartDate: Date, newEndDate: Date) => void) | null\n\t>(null);\n\n\tconst startDrag = useCallback((event: IEvent) => {\n\t\tsetDragState({ draggedEvent: event, isDragging: true });\n\t}, []);\n\n\tconst endDrag = useCallback(() => {\n\t\tsetDragState({ draggedEvent: null, isDragging: false });\n\t}, []);\n\n\tconst calculateNewDates = useCallback(\n\t\t(event: IEvent, targetDate: Date, hour?: number, minute?: number) => {\n\t\t\tconst originalStart = new Date(event.startDate);\n\t\t\tconst originalEnd = new Date(event.endDate);\n\t\t\tconst duration = originalEnd.getTime() - originalStart.getTime();\n\n\t\t\tconst newStart = new Date(targetDate);\n\t\t\tif (hour !== undefined) {\n\t\t\t\tnewStart.setHours(hour, minute || 0, 0, 0);\n\t\t\t} else {\n\t\t\t\tnewStart.setHours(\n\t\t\t\t\toriginalStart.getHours(),\n\t\t\t\t\toriginalStart.getMinutes(),\n\t\t\t\t\t0,\n\t\t\t\t\t0,\n\t\t\t\t);\n\t\t\t}\n\n\t\t\treturn {\n\t\t\t\tnewStart,\n\t\t\t\tnewEnd: new Date(newStart.getTime() + duration),\n\t\t\t};\n\t\t},\n\t\t[],\n\t);\n\n\tconst isSamePosition = useCallback((date1: Date, date2: Date) => {\n\t\treturn date1.getTime() === date2.getTime();\n\t}, []);\n\n\tconst handleEventDrop = useCallback(\n\t\t(targetDate: Date, hour?: number, minute?: number) => {\n\t\t\tconst { draggedEvent } = dragState;\n\t\t\tif (!draggedEvent) return;\n\n\t\t\tconst { newStart, newEnd } = calculateNewDates(\n\t\t\t\tdraggedEvent,\n\t\t\t\ttargetDate,\n\t\t\t\thour,\n\t\t\t\tminute,\n\t\t\t);\n\t\t\tconst originalStart = new Date(draggedEvent.startDate);\n\n\t\t\t// Check if dropped in same position\n\t\t\tif (isSamePosition(originalStart, newStart)) {\n\t\t\t\tendDrag();\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (showConfirmation) {\n\t\t\t\t// Show confirmation dialog if user wants it\n\t\t\t\tsetPendingDropData({\n\t\t\t\t\tevent: draggedEvent,\n\t\t\t\t\tnewStartDate: newStart,\n\t\t\t\t\tnewEndDate: newEnd,\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\t// Instantly update event if user doesn't want confirmation\n\t\t\t\tconst callback = onEventDroppedRef.current;\n\t\t\t\tif (callback) {\n\t\t\t\t\tcallback(draggedEvent, newStart, newEnd);\n\t\t\t\t}\n\t\t\t\tendDrag();\n\t\t\t}\n\t\t},\n\t\t[dragState, calculateNewDates, isSamePosition, endDrag, showConfirmation],\n\t);\n\n\tconst handleConfirmDrop = useCallback(() => {\n\t\tif (!pendingDropData) return;\n\n\t\tconst callback = onEventDroppedRef.current;\n\t\tif (callback) {\n\t\t\tcallback(\n\t\t\t\tpendingDropData.event,\n\t\t\t\tpendingDropData.newStartDate,\n\t\t\t\tpendingDropData.newEndDate,\n\t\t\t);\n\t\t}\n\n\t\t// Reset states\n\t\tsetPendingDropData(null);\n\t\tendDrag();\n\t}, [pendingDropData, endDrag]);\n\n\tconst handleCancelDrop = useCallback(() => {\n\t\tsetPendingDropData(null);\n\t\tendDrag();\n\t}, [endDrag]);\n\n\t// Default event update handler\n\tconst handleEventUpdate = useCallback(\n\t\t(event: IEvent, newStartDate: Date, newEndDate: Date) => {\n\t\t\ttry {\n\t\t\t\tconst updatedEvent = {\n\t\t\t\t\t...event,\n\t\t\t\t\tstartDate: newStartDate.toISOString(),\n\t\t\t\t\tendDate: newEndDate.toISOString(),\n\t\t\t\t};\n\t\t\t\tupdateEvent(updatedEvent);\n\t\t\t\ttoast.success(\"Event updated successfully\");\n\t\t\t} catch {\n\t\t\t\ttoast.error(\"Failed to update event\");\n\t\t\t}\n\t\t},\n\t\t[updateEvent],\n\t);\n\n\t// Set default callback\n\tReact.useEffect(() => {\n\t\tonEventDroppedRef.current = handleEventUpdate;\n\t}, [handleEventUpdate]);\n\n\t// When the prop changes, update the state\n\tReact.useEffect(() => {\n\t\tsetShowConfirmation(showConfirmationProp);\n\t}, [showConfirmationProp]);\n\n\tconst contextValue = useMemo(\n\t\t() => ({\n\t\t\tdraggedEvent: dragState.draggedEvent,\n\t\t\tisDragging: dragState.isDragging,\n\t\t\tstartDrag,\n\t\t\tendDrag,\n\t\t\thandleEventDrop,\n\t\t\tshowConfirmation,\n\t\t\tpendingDropData,\n\t\t\thandleConfirmDrop,\n\t\t\thandleCancelDrop,\n\t\t\tsetShowConfirmation,\n\t\t}),\n\t\t[\n\t\t\tdragState,\n\t\t\tshowConfirmation,\n\t\t\tpendingDropData,\n\t\t\tstartDrag,\n\t\t\tendDrag,\n\t\t\thandleEventDrop,\n\t\t\thandleConfirmDrop,\n\t\t\thandleCancelDrop,\n\t\t\tsetShowConfirmation,\n\t\t],\n\t);\n\n\treturn (\n\t\t<DragDropContext.Provider value={contextValue}>\n\t\t\t{showConfirmation && pendingDropData && <DndConfirmationDialog />}\n\t\t\t{children}\n\t\t</DragDropContext.Provider>\n\t);\n}\n\nexport function useDragDrop() {\n\tconst context = useContext(DragDropContext);\n\tif (!context) {\n\t\tthrow new Error(\"useDragDrop must be used within a DragDropProvider\");\n\t}\n\treturn context;\n}\n",
      "type": "registry:component"
    },
    {
      "path": "src/modules/components/calendar/dialogs/add-edit-event-dialog.tsx",
      "content": "import { zodResolver } from \"@hookform/resolvers/zod\";\nimport { addMinutes, format, set } from \"date-fns\";\nimport { type ReactNode, useEffect, useMemo } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { toast } from \"sonner\";\nimport { Button } from \"@/components/ui/button\";\nimport { DateTimePicker } from \"@/components/ui/date-time-picker\";\nimport {\n\tForm,\n\tFormControl,\n\tFormField,\n\tFormItem,\n\tFormLabel,\n\tFormMessage,\n} from \"@/components/ui/form\";\nimport { Input } from \"@/components/ui/input\";\nimport {\n\tModal,\n\tModalClose,\n\tModalContent,\n\tModalDescription,\n\tModalFooter,\n\tModalHeader,\n\tModalTitle,\n\tModalTrigger,\n} from \"@/components/ui/responsive-modal\";\nimport {\n\tSelect,\n\tSelectContent,\n\tSelectItem,\n\tSelectTrigger,\n\tSelectValue,\n} from \"@/components/ui/select\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { COLORS } from \"@/modules/components/calendar/constants\";\nimport { useCalendar } from \"@/modules/components/calendar/contexts/calendar-context\";\nimport { useDisclosure } from \"@/modules/components/calendar/hooks\";\nimport type { IEvent } from \"@/modules/components/calendar/interfaces\";\nimport {\n\teventSchema,\n\ttype TEventFormData,\n} from \"@/modules/components/calendar/schemas\";\n\ninterface IProps {\n\tchildren: ReactNode;\n\tstartDate?: Date;\n\tstartTime?: { hour: number; minute: number };\n\tevent?: IEvent;\n}\n\nexport function AddEditEventDialog({\n\tchildren,\n\tstartDate,\n\tstartTime,\n\tevent,\n}: IProps) {\n\tconst { isOpen, onClose, onToggle } = useDisclosure();\n\tconst { addEvent, updateEvent } = useCalendar();\n\tconst isEditing = !!event;\n\n\tconst initialDates = useMemo(() => {\n\t\tif (!isEditing && !event) {\n\t\t\tif (!startDate) {\n\t\t\t\tconst now = new Date();\n\t\t\t\treturn { startDate: now, endDate: addMinutes(now, 30) };\n\t\t\t}\n\t\t\tconst start = startTime\n\t\t\t\t? set(new Date(startDate), {\n\t\t\t\t\t\thours: startTime.hour,\n\t\t\t\t\t\tminutes: startTime.minute,\n\t\t\t\t\t\tseconds: 0,\n\t\t\t\t\t})\n\t\t\t\t: new Date(startDate);\n\t\t\tconst end = addMinutes(start, 30);\n\t\t\treturn { startDate: start, endDate: end };\n\t\t}\n\n\t\treturn {\n\t\t\tstartDate: new Date(event.startDate),\n\t\t\tendDate: new Date(event.endDate),\n\t\t};\n\t}, [startDate, startTime, event, isEditing]);\n\n\tconst form = useForm<TEventFormData>({\n\t\tresolver: zodResolver(eventSchema),\n\t\tdefaultValues: {\n\t\t\ttitle: event?.title ?? \"\",\n\t\t\tdescription: event?.description ?? \"\",\n\t\t\tstartDate: initialDates.startDate,\n\t\t\tendDate: initialDates.endDate,\n\t\t\tcolor: event?.color ?? \"blue\",\n\t\t},\n\t});\n\n\tuseEffect(() => {\n\t\tform.reset({\n\t\t\ttitle: event?.title ?? \"\",\n\t\t\tdescription: event?.description ?? \"\",\n\t\t\tstartDate: initialDates.startDate,\n\t\t\tendDate: initialDates.endDate,\n\t\t\tcolor: event?.color ?? \"blue\",\n\t\t});\n\t}, [event, initialDates, form]);\n\n\tconst onSubmit = (values: TEventFormData) => {\n\t\ttry {\n\t\t\tconst formattedEvent: IEvent = {\n\t\t\t\t...values,\n\t\t\t\tstartDate: format(values.startDate, \"yyyy-MM-dd'T'HH:mm:ss\"),\n\t\t\t\tendDate: format(values.endDate, \"yyyy-MM-dd'T'HH:mm:ss\"),\n\t\t\t\tid: isEditing ? event.id : Math.floor(Math.random() * 1000000),\n\t\t\t\tuser: isEditing\n\t\t\t\t\t? event.user\n\t\t\t\t\t: {\n\t\t\t\t\t\t\tid: Math.floor(Math.random() * 1000000).toString(),\n\t\t\t\t\t\t\tname: \"Jeraidi Yassir\",\n\t\t\t\t\t\t\tpicturePath: null,\n\t\t\t\t\t\t},\n\t\t\t\tcolor: values.color,\n\t\t\t};\n\n\t\t\tif (isEditing) {\n\t\t\t\tupdateEvent(formattedEvent);\n\t\t\t\ttoast.success(\"Event updated successfully\");\n\t\t\t} else {\n\t\t\t\taddEvent(formattedEvent);\n\t\t\t\ttoast.success(\"Event created successfully\");\n\t\t\t}\n\n\t\t\tonClose();\n\t\t\tform.reset();\n\t\t} catch (error) {\n\t\t\tconsole.error(`Error ${isEditing ? \"editing\" : \"adding\"} event:`, error);\n\t\t\ttoast.error(`Failed to ${isEditing ? \"edit\" : \"add\"} event`);\n\t\t}\n\t};\n\n\treturn (\n\t\t<Modal open={isOpen} onOpenChange={onToggle} modal={false}>\n\t\t\t<ModalTrigger asChild>{children}</ModalTrigger>\n\t\t\t<ModalContent>\n\t\t\t\t<ModalHeader>\n\t\t\t\t\t<ModalTitle>{isEditing ? \"Edit Event\" : \"Add New Event\"}</ModalTitle>\n\t\t\t\t\t<ModalDescription>\n\t\t\t\t\t\t{isEditing\n\t\t\t\t\t\t\t? \"Modify your existing event.\"\n\t\t\t\t\t\t\t: \"Create a new event for your calendar.\"}\n\t\t\t\t\t</ModalDescription>\n\t\t\t\t</ModalHeader>\n\n\t\t\t\t<Form {...form}>\n\t\t\t\t\t<form\n\t\t\t\t\t\tid=\"event-form\"\n\t\t\t\t\t\tonSubmit={form.handleSubmit(onSubmit)}\n\t\t\t\t\t\tclassName=\"grid gap-4 py-4\"\n\t\t\t\t\t>\n\t\t\t\t\t\t<FormField\n\t\t\t\t\t\t\tcontrol={form.control}\n\t\t\t\t\t\t\tname=\"title\"\n\t\t\t\t\t\t\trender={({ field, fieldState }) => (\n\t\t\t\t\t\t\t\t<FormItem>\n\t\t\t\t\t\t\t\t\t<FormLabel htmlFor=\"title\" className=\"required\">\n\t\t\t\t\t\t\t\t\t\tTitle\n\t\t\t\t\t\t\t\t\t</FormLabel>\n\t\t\t\t\t\t\t\t\t<FormControl>\n\t\t\t\t\t\t\t\t\t\t<Input\n\t\t\t\t\t\t\t\t\t\t\tid=\"title\"\n\t\t\t\t\t\t\t\t\t\t\tplaceholder=\"Enter a title\"\n\t\t\t\t\t\t\t\t\t\t\t{...field}\n\t\t\t\t\t\t\t\t\t\t\tclassName={fieldState.invalid ? \"border-red-500\" : \"\"}\n\t\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t\t</FormControl>\n\t\t\t\t\t\t\t\t\t<FormMessage />\n\t\t\t\t\t\t\t\t</FormItem>\n\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t/>\n\t\t\t\t\t\t<FormField\n\t\t\t\t\t\t\tcontrol={form.control}\n\t\t\t\t\t\t\tname=\"startDate\"\n\t\t\t\t\t\t\trender={({ field }) => (\n\t\t\t\t\t\t\t\t<DateTimePicker form={form} field={field} />\n\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t/>\n\t\t\t\t\t\t<FormField\n\t\t\t\t\t\t\tcontrol={form.control}\n\t\t\t\t\t\t\tname=\"endDate\"\n\t\t\t\t\t\t\trender={({ field }) => (\n\t\t\t\t\t\t\t\t<DateTimePicker form={form} field={field} />\n\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t/>\n\t\t\t\t\t\t<FormField\n\t\t\t\t\t\t\tcontrol={form.control}\n\t\t\t\t\t\t\tname=\"color\"\n\t\t\t\t\t\t\trender={({ field, fieldState }) => (\n\t\t\t\t\t\t\t\t<FormItem>\n\t\t\t\t\t\t\t\t\t<FormLabel className=\"required\">Variant</FormLabel>\n\t\t\t\t\t\t\t\t\t<FormControl>\n\t\t\t\t\t\t\t\t\t\t<Select value={field.value} onValueChange={field.onChange}>\n\t\t\t\t\t\t\t\t\t\t\t<SelectTrigger\n\t\t\t\t\t\t\t\t\t\t\t\tclassName={`w-full ${\n\t\t\t\t\t\t\t\t\t\t\t\t\tfieldState.invalid ? \"border-red-500\" : \"\"\n\t\t\t\t\t\t\t\t\t\t\t\t}`}\n\t\t\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\t\t\t<SelectValue placeholder=\"Select a variant\" />\n\t\t\t\t\t\t\t\t\t\t\t</SelectTrigger>\n\t\t\t\t\t\t\t\t\t\t\t<SelectContent>\n\t\t\t\t\t\t\t\t\t\t\t\t{COLORS.map((color) => (\n\t\t\t\t\t\t\t\t\t\t\t\t\t<SelectItem value={color} key={color}>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<div className=\"flex items-center gap-2\">\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<div\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tclassName={`size-3.5 rounded-full bg-${color}-600 dark:bg-${color}-700`}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t{color}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t\t\t\t</SelectItem>\n\t\t\t\t\t\t\t\t\t\t\t\t))}\n\t\t\t\t\t\t\t\t\t\t\t</SelectContent>\n\t\t\t\t\t\t\t\t\t\t</Select>\n\t\t\t\t\t\t\t\t\t</FormControl>\n\t\t\t\t\t\t\t\t\t<FormMessage />\n\t\t\t\t\t\t\t\t</FormItem>\n\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t/>\n\t\t\t\t\t\t<FormField\n\t\t\t\t\t\t\tcontrol={form.control}\n\t\t\t\t\t\t\tname=\"description\"\n\t\t\t\t\t\t\trender={({ field, fieldState }) => (\n\t\t\t\t\t\t\t\t<FormItem>\n\t\t\t\t\t\t\t\t\t<FormLabel className=\"required\">Description</FormLabel>\n\t\t\t\t\t\t\t\t\t<FormControl>\n\t\t\t\t\t\t\t\t\t\t<Textarea\n\t\t\t\t\t\t\t\t\t\t\t{...field}\n\t\t\t\t\t\t\t\t\t\t\tplaceholder=\"Enter a description\"\n\t\t\t\t\t\t\t\t\t\t\tclassName={fieldState.invalid ? \"border-red-500\" : \"\"}\n\t\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t\t</FormControl>\n\t\t\t\t\t\t\t\t\t<FormMessage />\n\t\t\t\t\t\t\t\t</FormItem>\n\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t/>\n\t\t\t\t\t</form>\n\t\t\t\t</Form>\n\t\t\t\t<ModalFooter className=\"flex justify-end gap-2\">\n\t\t\t\t\t<ModalClose asChild>\n\t\t\t\t\t\t<Button type=\"button\" variant=\"outline\">\n\t\t\t\t\t\t\tCancel\n\t\t\t\t\t\t</Button>\n\t\t\t\t\t</ModalClose>\n\t\t\t\t\t<Button form=\"event-form\" type=\"submit\">\n\t\t\t\t\t\t{isEditing ? \"Save Changes\" : \"Create Event\"}\n\t\t\t\t\t</Button>\n\t\t\t\t</ModalFooter>\n\t\t\t</ModalContent>\n\t\t</Modal>\n\t);\n}\n",
      "type": "registry:component"
    },
    {
      "path": "src/modules/components/calendar/dialogs/delete-event-dialog.tsx",
      "content": "import { TrashIcon } from \"lucide-react\";\nimport { toast } from \"sonner\";\nimport {\n\tAlertDialog,\n\tAlertDialogAction,\n\tAlertDialogCancel,\n\tAlertDialogContent,\n\tAlertDialogDescription,\n\tAlertDialogFooter,\n\tAlertDialogHeader,\n\tAlertDialogTitle,\n\tAlertDialogTrigger,\n} from \"@/components/ui/alert-dialog\";\nimport { Button } from \"@/components/ui/button\";\nimport { useCalendar } from \"@/modules/components/calendar/contexts/calendar-context\";\n\ninterface DeleteEventDialogProps {\n\teventId: number;\n}\n\nexport default function DeleteEventDialog({ eventId }: DeleteEventDialogProps) {\n\tconst { removeEvent } = useCalendar();\n\n\tconst deleteEvent = () => {\n\t\ttry {\n\t\t\tremoveEvent(eventId);\n\t\t\ttoast.success(\"Event deleted successfully.\");\n\t\t} catch {\n\t\t\ttoast.error(\"Error deleting event.\");\n\t\t}\n\t};\n\n\tif (!eventId) {\n\t\treturn null;\n\t}\n\n\treturn (\n\t\t<AlertDialog>\n\t\t\t<AlertDialogTrigger asChild>\n\t\t\t\t<Button variant=\"destructive\">\n\t\t\t\t\t<TrashIcon />\n\t\t\t\t\tDelete\n\t\t\t\t</Button>\n\t\t\t</AlertDialogTrigger>\n\t\t\t<AlertDialogContent>\n\t\t\t\t<AlertDialogHeader>\n\t\t\t\t\t<AlertDialogTitle>Are you absolutely sure?</AlertDialogTitle>\n\t\t\t\t\t<AlertDialogDescription>\n\t\t\t\t\t\tThis action cannot be undone. This will permanently delete your\n\t\t\t\t\t\tevent and remove event data from our servers.\n\t\t\t\t\t</AlertDialogDescription>\n\t\t\t\t</AlertDialogHeader>\n\t\t\t\t<AlertDialogFooter>\n\t\t\t\t\t<AlertDialogCancel>Cancel</AlertDialogCancel>\n\t\t\t\t\t<AlertDialogAction onClick={deleteEvent}>Continue</AlertDialogAction>\n\t\t\t\t</AlertDialogFooter>\n\t\t\t</AlertDialogContent>\n\t\t</AlertDialog>\n\t);\n}\n",
      "type": "registry:component"
    },
    {
      "path": "src/modules/components/calendar/dialogs/dnd-confirmation-dialog.tsx",
      "content": "import { useDragDrop } from \"@/modules/components/calendar/contexts/dnd-context\";\nimport { EventDropConfirmationDialog } from \"./event-drop-confirmation-dialog\";\nimport { memo } from \"react\";\n\nconst DndConfirmationDialog = memo(() => {\n\tconst {\n\t\tshowConfirmation,\n\t\tpendingDropData,\n\t\thandleConfirmDrop,\n\t\thandleCancelDrop,\n\t} = useDragDrop();\n\n\tif (!showConfirmation || !pendingDropData) return null;\n\n\treturn (\n\t\t<EventDropConfirmationDialog\n\t\t\topen={showConfirmation}\n\t\t\tonOpenChange={() => {}} // Controlled by context\n\t\t\tevent={pendingDropData.event}\n\t\t\tnewStartDate={pendingDropData.newStartDate}\n\t\t\tnewEndDate={pendingDropData.newEndDate}\n\t\t\tonConfirm={handleConfirmDrop}\n\t\t\tonCancel={handleCancelDrop}\n\t\t/>\n\t);\n});\n\nDndConfirmationDialog.displayName = \"DndConfirmationDialog\";\n\nexport { DndConfirmationDialog };\n",
      "type": "registry:component"
    },
    {
      "path": "src/modules/components/calendar/dialogs/event-details-dialog.tsx",
      "content": "\"use client\";\n\nimport { format, parseISO } from \"date-fns\";\nimport { Calendar, Clock, Text, User } from \"lucide-react\";\nimport type { ReactNode } from \"react\";\nimport { toast } from \"sonner\";\nimport { Button } from \"@/components/ui/button\";\nimport {\n\tDialog,\n\tDialogClose,\n\tDialogContent,\n\tDialogHeader,\n\tDialogTitle,\n\tDialogTrigger,\n} from \"@/components/ui/dialog\";\nimport { ScrollArea } from \"@/components/ui/scroll-area\";\nimport { useCalendar } from \"@/modules/components/calendar/contexts/calendar-context\";\nimport { AddEditEventDialog } from \"@/modules/components/calendar/dialogs/add-edit-event-dialog\";\nimport { formatTime } from \"@/modules/components/calendar/helpers\";\nimport type { IEvent } from \"@/modules/components/calendar/interfaces\";\n\ninterface IProps {\n\tevent: IEvent;\n\tchildren: ReactNode;\n}\n\nexport function EventDetailsDialog({ event, children }: IProps) {\n\tconst startDate = parseISO(event.startDate);\n\tconst endDate = parseISO(event.endDate);\n\tconst { use24HourFormat, removeEvent } = useCalendar();\n\n\tconst deleteEvent = (eventId: number) => {\n\t\ttry {\n\t\t\tremoveEvent(eventId);\n\t\t\ttoast.success(\"Event deleted successfully.\");\n\t\t} catch {\n\t\t\ttoast.error(\"Error deleting event.\");\n\t\t}\n\t};\n\n\treturn (\n\t\t<Dialog>\n\t\t\t<DialogTrigger asChild>{children}</DialogTrigger>\n\t\t\t<DialogContent>\n\t\t\t\t<DialogHeader>\n\t\t\t\t\t<DialogTitle>{event.title}</DialogTitle>\n\t\t\t\t</DialogHeader>\n\n\t\t\t\t<ScrollArea className=\"max-h-[80vh]\">\n\t\t\t\t\t<div className=\"space-y-4 p-4\">\n\t\t\t\t\t\t<div className=\"flex items-start gap-2\">\n\t\t\t\t\t\t\t<User className=\"mt-1 size-4 shrink-0 text-muted-foreground\" />\n\t\t\t\t\t\t\t<div>\n\t\t\t\t\t\t\t\t<p className=\"text-sm font-medium\">Responsible</p>\n\t\t\t\t\t\t\t\t<p className=\"text-sm text-muted-foreground\">\n\t\t\t\t\t\t\t\t\t{event.user.name}\n\t\t\t\t\t\t\t\t</p>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</div>\n\n\t\t\t\t\t\t<div className=\"flex items-start gap-2\">\n\t\t\t\t\t\t\t<Calendar className=\"mt-1 size-4 shrink-0 text-muted-foreground\" />\n\t\t\t\t\t\t\t<div>\n\t\t\t\t\t\t\t\t<p className=\"text-sm font-medium\">Start Date</p>\n\t\t\t\t\t\t\t\t<p className=\"text-sm text-muted-foreground\">\n\t\t\t\t\t\t\t\t\t{format(startDate, \"EEEE dd MMMM\")}\n\t\t\t\t\t\t\t\t\t<span className=\"mx-1\">at</span>\n\t\t\t\t\t\t\t\t\t{formatTime(parseISO(event.startDate), use24HourFormat)}\n\t\t\t\t\t\t\t\t</p>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</div>\n\n\t\t\t\t\t\t<div className=\"flex items-start gap-2\">\n\t\t\t\t\t\t\t<Clock className=\"mt-1 size-4 shrink-0 text-muted-foreground\" />\n\t\t\t\t\t\t\t<div>\n\t\t\t\t\t\t\t\t<p className=\"text-sm font-medium\">End Date</p>\n\t\t\t\t\t\t\t\t<p className=\"text-sm text-muted-foreground\">\n\t\t\t\t\t\t\t\t\t{format(endDate, \"EEEE dd MMMM\")}\n\t\t\t\t\t\t\t\t\t<span className=\"mx-1\">at</span>\n\t\t\t\t\t\t\t\t\t{formatTime(parseISO(event.endDate), use24HourFormat)}\n\t\t\t\t\t\t\t\t</p>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</div>\n\n\t\t\t\t\t\t<div className=\"flex items-start gap-2\">\n\t\t\t\t\t\t\t<Text className=\"mt-1 size-4 shrink-0 text-muted-foreground\" />\n\t\t\t\t\t\t\t<div>\n\t\t\t\t\t\t\t\t<p className=\"text-sm font-medium\">Description</p>\n\t\t\t\t\t\t\t\t<p className=\"text-sm text-muted-foreground\">\n\t\t\t\t\t\t\t\t\t{event.description}\n\t\t\t\t\t\t\t\t</p>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t</ScrollArea>\n\t\t\t\t<div className=\"flex justify-end gap-2\">\n\t\t\t\t\t<AddEditEventDialog event={event}>\n\t\t\t\t\t\t<Button variant=\"outline\">Edit</Button>\n\t\t\t\t\t</AddEditEventDialog>\n\t\t\t\t\t<Button\n\t\t\t\t\t\tvariant=\"destructive\"\n\t\t\t\t\t\tonClick={() => {\n\t\t\t\t\t\t\tdeleteEvent(event.id);\n\t\t\t\t\t\t}}\n\t\t\t\t\t>\n\t\t\t\t\t\tDelete\n\t\t\t\t\t</Button>\n\t\t\t\t</div>\n\t\t\t\t<DialogClose />\n\t\t\t</DialogContent>\n\t\t</Dialog>\n\t);\n}\n",
      "type": "registry:component"
    },
    {
      "path": "src/modules/components/calendar/dialogs/event-drop-confirmation-dialog.tsx",
      "content": "\"use client\";\n\nimport {format} from \"date-fns\";\n\nimport {\n    AlertDialog,\n    AlertDialogAction,\n    AlertDialogCancel,\n    AlertDialogContent,\n    AlertDialogDescription,\n    AlertDialogFooter,\n    AlertDialogHeader,\n    AlertDialogTitle,\n} from \"@/components/ui/alert-dialog\";\nimport type {IEvent} from \"@/modules/components/calendar/interfaces\";\nimport {formatTime, getColorClass} from \"@/modules/components/calendar/helpers\";\nimport {cn} from \"@/lib/utils\";\nimport {useCalendar} from \"@/modules/components/calendar/contexts/calendar-context\";\n\ninterface EventDropConfirmationDialogProps {\n    open: boolean;\n    onOpenChange: (open: boolean) => void;\n    event: IEvent | null;\n    newStartDate: Date | null;\n    newEndDate: Date | null;\n    onConfirm: () => void;\n    onCancel: () => void;\n}\n\nexport function EventDropConfirmationDialog({\n                                                open,\n                                                onOpenChange,\n                                                event,\n                                                newStartDate,\n                                                newEndDate,\n                                                onConfirm,\n                                                onCancel,\n                                            }: EventDropConfirmationDialogProps) {\n\n    const {use24HourFormat} = useCalendar();\n\n    if (!event || !newStartDate || !newEndDate) {\n        return null;\n    }\n\n    const originalStart = new Date(event.startDate);\n\n    const formatDate = (date: Date) => {\n        return format(date, \"MMM dd, yyyy 'at '\") + formatTime(date, use24HourFormat);\n    };\n\n    const handleConfirm = () => {\n        onConfirm();\n        onOpenChange(false);\n    };\n\n    const handleCancel = () => {\n        onCancel();\n        onOpenChange(false);\n    };\n\n    return (\n        <AlertDialog open={open} onOpenChange={onOpenChange}>\n            <AlertDialogContent>\n                <AlertDialogHeader>\n                    <AlertDialogTitle>Confirm Event Move</AlertDialogTitle>\n                    <AlertDialogDescription>\n                        Are you sure you want to move\n                        <span className={cn(getColorClass(event.color), \"mx-1 py-0.5 px-1 rounded-md\")}>\n\t\t\t\t\t\t\t{event.title}\n\t\t\t\t\t\t</span>\n                        event from\n                        <strong className=\"mx-1\">{formatDate(originalStart)}</strong> to\n                        <strong className=\"mx-1\">{formatDate(newStartDate)}</strong>?\n                    </AlertDialogDescription>\n                </AlertDialogHeader>\n                <AlertDialogFooter>\n                    <AlertDialogCancel onClick={handleCancel}>Cancel</AlertDialogCancel>\n                    <AlertDialogAction onClick={handleConfirm}>\n                        Move Event\n                    </AlertDialogAction>\n                </AlertDialogFooter>\n            </AlertDialogContent>\n        </AlertDialog>\n    );\n}\n",
      "type": "registry:component"
    },
    {
      "path": "src/modules/components/calendar/dialogs/events-list-dialog.tsx",
      "content": "import {format} from \"date-fns\";\nimport type {ReactNode} from \"react\";\nimport {\n    Modal,\n    ModalContent,\n    ModalHeader,\n    ModalTitle,\n    ModalTrigger,\n} from \"@/components/ui/responsive-modal\";\nimport {cn} from \"@/lib/utils\";\nimport {useCalendar} from \"@/modules/components/calendar/contexts/calendar-context\";\nimport {formatTime} from \"@/modules/components/calendar/helpers\";\nimport type {IEvent} from \"@/modules/components/calendar/interfaces\";\nimport {dayCellVariants} from \"@/modules/components/calendar/views/month-view/day-cell\";\nimport {EventBullet} from \"@/modules/components/calendar/views/month-view/event-bullet\";\nimport {EventDetailsDialog} from \"@/modules/components/calendar/dialogs/event-details-dialog\";\n\ninterface EventListDialogProps {\n    date: Date;\n    events: IEvent[];\n    maxVisibleEvents?: number;\n    children?: ReactNode;\n}\n\nexport function EventListDialog({\n                                    date,\n                                    events,\n                                    maxVisibleEvents = 3,\n                                    children,\n                                }: EventListDialogProps) {\n    const cellEvents = events;\n    const hiddenEventsCount = Math.max(cellEvents.length - maxVisibleEvents, 0);\n    const {badgeVariant, use24HourFormat} = useCalendar();\n\n    const defaultTrigger = (\n        <span className=\"cursor-pointer\">\n\t\t\t<span className=\"sm:hidden\">+{hiddenEventsCount}</span>\n\t\t\t<span className=\"hidden sm:inline py-0.5 px-2 my-1 rounded-xl border\">\n\t\t\t\t{hiddenEventsCount}\n                <span className=\"mx-1\">more...</span>\n\t\t\t</span>\n\t\t</span>\n    );\n\n    return (\n        <Modal>\n            <ModalTrigger asChild>{children || defaultTrigger}</ModalTrigger>\n            <ModalContent className=\"sm:max-w-[425px]\">\n                <ModalHeader>\n                    <ModalTitle className=\"my-2\">\n                        <div className=\"flex items-center gap-2\">\n                            <EventBullet color={cellEvents[0]?.color} className=\"\"/>\n                            <p className=\"text-sm font-medium\">\n                                Events on {format(date, \"EEEE, MMMM d, yyyy\")}\n                            </p>\n                        </div>\n                    </ModalTitle>\n                </ModalHeader>\n                <div className=\"max-h-[60vh] overflow-y-auto space-y-2\">\n                    {cellEvents.length > 0 ? (\n                        cellEvents.map((event) => (\n                            <EventDetailsDialog event={event} key={event.id}>\n                                <div\n                                    className={cn(\n                                        \"flex items-center gap-2 p-2 border rounded-md hover:bg-muted cursor-pointer\",\n                                        {\n                                            [dayCellVariants({color: event.color})]:\n                                                badgeVariant === \"colored\",\n                                        },\n                                    )}\n                                >\n                                        <EventBullet color={event.color}/>\n                                        <div className=\"flex justify-between items-center w-full\">\n                                            <p className=\"text-sm font-medium\">{event.title}</p>\n                                            <p className=\"text-xs\">\n                                                {formatTime(event.startDate, use24HourFormat)}\n                                            </p>\n                                        </div>\n                                </div>\n                            </EventDetailsDialog>\n                        ))\n                    ) : (\n                        <p className=\"text-sm text-muted-foreground\">\n                            No events for this date.\n                        </p>\n                    )}\n                </div>\n            </ModalContent>\n        </Modal>\n    );\n}\n",
      "type": "registry:component"
    },
    {
      "path": "src/modules/components/calendar/dnd/draggable-event.tsx",
      "content": "import { motion } from \"framer-motion\";\nimport type React from \"react\";\nimport type { ReactNode } from \"react\";\nimport { useDragDrop } from \"@/modules/components/calendar/contexts/dnd-context\";\nimport type { IEvent } from \"@/modules/components/calendar/interfaces\";\n\ninterface DraggableEventProps {\n\tevent: IEvent;\n\tchildren: ReactNode;\n\tclassName?: string;\n}\n\nexport function DraggableEvent({\n\tevent,\n\tchildren,\n\tclassName,\n}: DraggableEventProps) {\n\tconst { startDrag, endDrag, isDragging, draggedEvent } = useDragDrop();\n\n\tconst isCurrentlyDragged = isDragging && draggedEvent?.id === event.id;\n\n\tconst handleClick = (e: React.MouseEvent<HTMLDivElement>) => {\n\t\te.stopPropagation();\n\t};\n\n\treturn (\n\t\t<motion.div\n\t\t\tclassName={`${className || \"\"} ${isCurrentlyDragged ? \"opacity-50 cursor-grabbing\" : \"cursor-grab\"}`}\n\t\t\tdraggable\n\t\t\tonClick={(e: React.MouseEvent<HTMLDivElement>) => handleClick(e)}\n\t\t\tonDragStart={(e) => {\n\t\t\t\t(e as DragEvent).dataTransfer!.setData(\n\t\t\t\t\t\"text/plain\",\n\t\t\t\t\tevent.id.toString(),\n\t\t\t\t);\n\t\t\t\tstartDrag(event);\n\t\t\t}}\n\t\t\tonDragEnd={() => {\n\t\t\t\tendDrag();\n\t\t\t}}\n\t\t>\n\t\t\t{children}\n\t\t</motion.div>\n\t);\n}\n",
      "type": "registry:component"
    },
    {
      "path": "src/modules/components/calendar/dnd/droppable-area.tsx",
      "content": "import React, { type ReactNode } from \"react\";\nimport { useDragDrop } from \"@/modules/components/calendar/contexts/dnd-context\";\n\ninterface DroppableAreaProps {\n\tdate: Date;\n\thour?: number;\n\tminute?: number;\n\tchildren: ReactNode;\n\tclassName?: string;\n}\n\nexport function DroppableArea({\n\tdate,\n\thour,\n\tminute,\n\tchildren,\n\tclassName,\n}: DroppableAreaProps) {\n\tconst { handleEventDrop, isDragging } = useDragDrop();\n\n\treturn (\n\t\t<div\n\t\t\tclassName={`${className || \"\"} ${isDragging ? \"drop-target\" : \"\"}`}\n\t\t\tonDragOver={(e) => {\n\t\t\t\t// Prevent default to allow drop\n\t\t\t\te.preventDefault();\n\t\t\t\te.currentTarget.classList.add(\"bg-primary/10\");\n\t\t\t}}\n\t\t\tonDragLeave={(e) => {\n\t\t\t\te.currentTarget.classList.remove(\"bg-primary/10\");\n\t\t\t}}\n\t\t\tonDrop={(e) => {\n\t\t\t\te.preventDefault();\n\t\t\t\te.currentTarget.classList.remove(\"bg-primary/10\");\n\t\t\t\thandleEventDrop(date, hour, minute);\n\t\t\t}}\n\t\t>\n\t\t\t{children}\n\t\t</div>\n\t);\n}\n",
      "type": "registry:component"
    },
    {
      "path": "src/modules/components/calendar/dnd/resizable-event.tsx",
      "content": "\"use client\";\n\nimport {\n\taddMinutes,\n\tdifferenceInMinutes,\n\tformat,\n\tisAfter,\n\tisBefore,\n\tparseISO,\n} from \"date-fns\";\nimport { motion } from \"framer-motion\";\nimport { Resizable, type ResizeCallback } from \"re-resizable\";\nimport type React from \"react\";\nimport { useCallback, useMemo, useState } from \"react\";\nimport { cn } from \"@/lib/utils\";\nimport { useCalendar } from \"@/modules/components/calendar/contexts/calendar-context\";\n\nimport type { IEvent } from \"@/modules/components/calendar/interfaces\";\n\ninterface ResizableEventBlockProps {\n\tevent: IEvent;\n\tchildren: React.ReactNode;\n\tclassName?: string;\n}\n\nconst PIXELS_PER_HOUR = 96;\nconst MINUTES_PER_PIXEL = 60 / PIXELS_PER_HOUR;\nconst MIN_DURATION = 15; // in minutes\n\nexport function ResizableEvent({\n\tevent,\n\tchildren,\n\tclassName,\n}: ResizableEventBlockProps) {\n\tconst { updateEvent, use24HourFormat } = useCalendar();\n\n\tconst [isResizing, setIsResizing] = useState(false);\n\tconst [resizePreview, setResizePreview] = useState<{\n\t\tstart: string;\n\t\tend: string;\n\t} | null>(null);\n\n\tconst start = useMemo(() => parseISO(event.startDate), [event.startDate]);\n\tconst end = useMemo(() => parseISO(event.endDate), [event.endDate]);\n\tconst durationInMinutes = useMemo(\n\t\t() => differenceInMinutes(end, start),\n\t\t[start, end],\n\t);\n\n\tconst resizeBoundaries = useMemo(() => {\n\t\tconst dayStart = new Date(start);\n\t\tdayStart.setHours(0, 0, 0, 0);\n\n\t\tconst dayEnd = new Date(start);\n\t\tdayEnd.setHours(23, 59, 59, 999);\n\n\t\treturn { dayStart, dayEnd };\n\t}, [start]);\n\n\tconst handleResizeStart = useCallback(() => {\n\t\tsetIsResizing(true);\n\t}, []);\n\n\tconst handleResize: ResizeCallback = useCallback(\n\t\t(_, direction, ref) => {\n\t\t\tconst newHeight = parseInt(ref.style.height, 10);\n\t\t\tconst newDuration = Math.max(\n\t\t\t\tMIN_DURATION,\n\t\t\t\tMath.round((newHeight + 8) * MINUTES_PER_PIXEL),\n\t\t\t);\n\t\t\tconst delta = newDuration - durationInMinutes;\n\n\t\t\tlet newStart = start;\n\t\t\tlet newEnd = end;\n\n\t\t\tif (direction.includes(\"top\")) {\n\t\t\t\tnewStart = addMinutes(start, -delta);\n\t\t\t} else if (direction.includes(\"bottom\")) {\n\t\t\t\tnewEnd = addMinutes(end, delta);\n\t\t\t}\n\n\t\t\tif (isBefore(newStart, resizeBoundaries.dayStart)) {\n\t\t\t\tnewStart = resizeBoundaries.dayStart;\n\t\t\t}\n\t\t\tif (isAfter(newEnd, resizeBoundaries.dayEnd)) {\n\t\t\t\tnewEnd = resizeBoundaries.dayEnd;\n\t\t\t}\n\n\t\t\tsetResizePreview({\n\t\t\t\tstart: format(newStart, use24HourFormat ? \"HH:mm\" : \"h:mm a\"),\n\t\t\t\tend: format(newEnd, use24HourFormat ? \"HH:mm\" : \"h:mm a\"),\n\t\t\t});\n\n\t\t\tupdateEvent({\n\t\t\t\t...event,\n\t\t\t\tstartDate: newStart.toISOString(),\n\t\t\t\tendDate: newEnd.toISOString(),\n\t\t\t});\n\t\t},\n\t\t[\n\t\t\tstart,\n\t\t\tend,\n\t\t\tdurationInMinutes,\n\t\t\tresizeBoundaries,\n\t\t\tuse24HourFormat,\n\t\t\tupdateEvent,\n\t\t\tevent,\n\t\t],\n\t);\n\n\tconst handleResizeStop = useCallback(() => {\n\t\tsetIsResizing(false);\n\t\tsetResizePreview(null);\n\t}, []);\n\n\tconst resizeConfig = useMemo(\n\t\t() => ({\n\t\t\tminHeight: 15,\n\t\t\tmaxHeight: 1440,\n\t\t\tenable: {\n\t\t\t\ttop: true,\n\t\t\t\tbottom: true,\n\t\t\t\ttopRight: false,\n\t\t\t\tbottomRight: false,\n\t\t\t\tbottomLeft: false,\n\t\t\t\ttopLeft: false,\n\t\t\t},\n\t\t\thandleStyles: {\n\t\t\t\ttop: {\n\t\t\t\t\tcursor: \"ns-resize\",\n\t\t\t\t\theight: \"8px\",\n\t\t\t\t\ttop: \"-4px\",\n\t\t\t\t\tbackgroundColor: \"transparent\",\n\t\t\t\t},\n\t\t\t\tbottom: {\n\t\t\t\t\tcursor: \"ns-resize\",\n\t\t\t\t\theight: \"8px\",\n\t\t\t\t\tbottom: \"-4px\",\n\t\t\t\t\tbackgroundColor: \"transparent\",\n\t\t\t\t},\n\t\t\t},\n\t\t\thandleClasses: {\n\t\t\t\ttop: \"transition-colors rounded-sm\",\n\t\t\t\tbottom: \"transition-colors rounded-sm\",\n\t\t\t},\n\t\t\tonResizeStart: handleResizeStart,\n\t\t\tonResize: handleResize,\n\t\t\tonResizeStop: handleResizeStop,\n\t\t\tclassName: cn(\n\t\t\t\t\"transition-all duration-200\",\n\t\t\t\tisResizing && \"z-50 shadow-lg\",\n\t\t\t),\n\t\t}),\n\t\t[handleResizeStart, handleResize, handleResizeStop, isResizing],\n\t);\n\n\treturn (\n\t\t<motion.div\n\t\t\tinitial={{ opacity: 0, scale: 0.95 }}\n\t\t\tanimate={{ opacity: 1, scale: 1 }}\n\t\t\texit={{ opacity: 0, scale: 0.95 }}\n\t\t\ttransition={{ duration: 0.2 }}\n\t\t\tclassName={cn(\"relative group\", className)}\n\t\t>\n\t\t\t<Resizable {...resizeConfig}>{children}</Resizable>\n\n\t\t\t{isResizing && resizePreview && (\n\t\t\t\t<motion.div\n\t\t\t\t\tinitial={{ opacity: 0, y: -10 }}\n\t\t\t\t\tanimate={{ opacity: 1, y: 0 }}\n\t\t\t\t\texit={{ opacity: 0, y: -10 }}\n\t\t\t\t\tclassName=\"absolute -top-8 left-1/2 transform -translate-x-1/2 bg-gray-900 text-white text-xs px-2 py-1 rounded shadow-lg z-50 whitespace-nowrap\"\n\t\t\t\t>\n\t\t\t\t\t{resizePreview.start} - {resizePreview.end}\n\t\t\t\t</motion.div>\n\t\t\t)}\n\t\t</motion.div>\n\t);\n}\n",
      "type": "registry:component"
    },
    {
      "path": "src/modules/components/calendar/header/calendar-header.tsx",
      "content": "\"use client\";\n\nimport { motion } from \"framer-motion\";\nimport {\n\tCalendarRange,\n\tColumns,\n\tGrid2X2,\n\tGrid3X3,\n\tLayoutList,\n\tList,\n\tPlus,\n} from \"lucide-react\";\n\nimport { Button } from \"@/components/ui/button\";\nimport { ButtonGroup } from \"@/components/ui/button-group\";\nimport {\n\tslideFromLeft,\n\tslideFromRight,\n\ttransition,\n} from \"@/modules/components/calendar/animations\";\nimport { useCalendar } from \"@/modules/components/calendar/contexts/calendar-context\";\nimport { AddEditEventDialog } from \"@/modules/components/calendar/dialogs/add-edit-event-dialog\";\nimport { DateNavigator } from \"@/modules/components/calendar/header/date-navigator\";\nimport FilterEvents from \"@/modules/components/calendar/header/filter\";\nimport { TodayButton } from \"@/modules/components/calendar/header/today-button\";\nimport { UserSelect } from \"@/modules/components/calendar/header/user-select\";\nimport { Settings } from \"@/modules/components/calendar/settings/settings\";\nimport Views from \"./view-tabs\";\n\nexport function CalendarHeader() {\n\tconst { view, events } = useCalendar();\n\n\treturn (\n\t\t<div className=\"flex flex-col gap-4 border-b p-4 lg:flex-row lg:items-center lg:justify-between\">\n\t\t\t<motion.div\n\t\t\t\tclassName=\"flex items-center gap-3\"\n\t\t\t\tvariants={slideFromLeft}\n\t\t\t\tinitial=\"initial\"\n\t\t\t\tanimate=\"animate\"\n\t\t\t\ttransition={transition}\n\t\t\t>\n\t\t\t\t<TodayButton />\n\t\t\t\t<DateNavigator view={view} events={events} />\n\t\t\t</motion.div>\n\n\t\t\t<motion.div\n\t\t\t\tclassName=\"flex flex-col gap-4 lg:flex-row lg:items-center lg:gap-1.5\"\n\t\t\t\tvariants={slideFromRight}\n\t\t\t\tinitial=\"initial\"\n\t\t\t\tanimate=\"animate\"\n\t\t\t\ttransition={transition}\n\t\t\t>\n\t\t\t\t<div className=\"options flex-wrap flex items-center gap-4 md:gap-2\">\n\t\t\t\t\t<FilterEvents />\n\t\t\t\t\t<Views />\n\t\t\t\t</div>\n\n\t\t\t\t<div className=\"flex flex-col gap-4 lg:flex-row lg:items-center lg:gap-1.5\">\n\t\t\t\t\t<UserSelect />\n\n\t\t\t\t\t<AddEditEventDialog>\n\t\t\t\t\t\t<Button>\n\t\t\t\t\t\t\t<Plus className=\"h-4 w-4\" />\n\t\t\t\t\t\t\tAdd Event\n\t\t\t\t\t\t</Button>\n\t\t\t\t\t</AddEditEventDialog>\n\t\t\t\t</div>\n\t\t\t\t<Settings />\n\t\t\t</motion.div>\n\t\t</div>\n\t);\n}\n",
      "type": "registry:component"
    },
    {
      "path": "src/modules/components/calendar/header/view-tabs.tsx",
      "content": "import { motion, AnimatePresence } from \"motion/react\";\n\nimport { Tabs, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\n\nimport { cn } from \"@/lib/utils\";\nimport { useCalendar } from \"../contexts/calendar-context\";\nimport {\n  CalendarRange,\n  List,\n  Columns,\n  Grid3X3,\n  Grid2X2,\n} from \"lucide-react\";\nimport { TCalendarView } from \"../types\";\nimport { memo } from \"react\";\n\nconst tabs = [\n  {\n    name: \"Agenda\",\n    value: \"agenda\",\n    icon: () => <CalendarRange className=\"h-4 w-4\" />,\n  },\n  {\n    name: \"Day\",\n    value: \"day\",\n    icon: () => <List className=\"h-4 w-4\" />,\n  },\n  {\n    name: \"Week\",\n    value: \"week\",\n    icon: () => <Columns className=\"h-4 w-4\" />,\n  },\n  {\n    name: \"Month\",\n    value: \"month\",\n    icon: () => <Grid3X3 className=\"h-4 w-4\" />,\n  },\n  {\n    name: \"Year\",\n    value: \"year\",\n    icon: () => <Grid2X2 className=\"h-4 w-4\" />,\n  },\n];\n\nfunction Views() {\n  const { view, setView } = useCalendar();\n\n  return (\n    <Tabs\n      value={view}\n      onValueChange={(value) => setView(value as TCalendarView)}\n      className=\"gap-4 sm:w-auto w-full\"\n    >\n      <TabsList className=\"h-auto gap-2 rounded-xl p-1 w-full\">\n        {tabs.map(({ icon: Icon, name, value }) => {\n          const isActive = view === value;\n\n          return (\n            <motion.div\n              key={value}\n              layout\n              className={cn(\n                \"flex h-8 items-center justify-center overflow-hidden rounded-md\",\n                isActive ? \"flex-1\" : \"flex-none\"\n              )}\n              onClick={() => setView(value as TCalendarView)}\n              initial={false}\n              animate={{\n                width: isActive ? 120 : 32,\n              }}\n              transition={{\n                type: \"tween\",\n                stiffness: 400,\n                damping: 25,\n              }}\n            >\n              <TabsTrigger value={value} asChild>\n                <motion.div\n                  className=\"flex h-8 w-full items-center justify-center cursor-pointer\"\n                  animate={{ filter: \"blur(0px)\" }}\n                  exit={{ filter: \"blur(2px)\" }}\n                  transition={{ duration: 0.25, ease: \"easeOut\" }}\n                >\n                  <Icon />\n                  <AnimatePresence initial={false}>\n                    {isActive && (\n                      <motion.span\n                        className=\"font-medium\"\n                        initial={{ opacity: 0, scaleX: 0.8 }}\n                        animate={{ opacity: 1, scaleX: 1 }}\n                        transition={{ duration: 0.25, ease: \"easeOut\" }}\n                        style={{ originX: 0 }}\n                      >\n                        {name}\n                      </motion.span>\n                    )}\n                  </AnimatePresence>\n                </motion.div>\n              </TabsTrigger>\n            </motion.div>\n          );\n        })}\n      </TabsList>\n    </Tabs>\n  );\n}\n\nexport default memo(Views);",
      "type": "registry:component"
    },
    {
      "path": "src/modules/components/calendar/header/date-navigator.tsx",
      "content": "import { formatDate } from \"date-fns\";\nimport { AnimatePresence, motion } from \"framer-motion\";\nimport { ChevronLeft, ChevronRight } from \"lucide-react\";\nimport { useMemo } from \"react\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Button } from \"@/components/ui/button\";\nimport {\n\tbuttonHover,\n\ttransition,\n} from \"@/modules/components/calendar/animations\";\nimport { useCalendar } from \"@/modules/components/calendar/contexts/calendar-context\";\n\nimport {\n\tgetEventsCount,\n\tnavigateDate,\n\trangeText,\n} from \"@/modules/components/calendar/helpers\";\n\nimport type { IEvent } from \"@/modules/components/calendar/interfaces\";\nimport type { TCalendarView } from \"@/modules/components/calendar/types\";\n\ninterface IProps {\n\tview: TCalendarView;\n\tevents: IEvent[];\n}\n\nconst MotionButton = motion.create(Button);\nconst MotionBadge = motion.create(Badge);\n\nexport function DateNavigator({ view, events }: IProps) {\n\tconst { selectedDate, setSelectedDate } = useCalendar();\n\n\tconst month = formatDate(selectedDate, \"MMMM\");\n\tconst year = selectedDate.getFullYear();\n\n\tconst eventCount = useMemo(\n\t\t() => getEventsCount(events, selectedDate, view),\n\t\t[events, selectedDate, view],\n\t);\n\n\tconst handlePrevious = () =>\n\t\tsetSelectedDate(navigateDate(selectedDate, view, \"previous\"));\n\tconst handleNext = () =>\n\t\tsetSelectedDate(navigateDate(selectedDate, view, \"next\"));\n\n\treturn (\n\t\t<div className=\"space-y-0.5\">\n\t\t\t<div className=\"flex items-center gap-2\">\n\t\t\t\t<motion.span\n\t\t\t\t\tclassName=\"text-lg font-semibold\"\n\t\t\t\t\tinitial={{ x: -20, opacity: 0 }}\n\t\t\t\t\tanimate={{ x: 0, opacity: 1 }}\n\t\t\t\t\ttransition={transition}\n\t\t\t\t>\n\t\t\t\t\t{month} {year}\n\t\t\t\t</motion.span>\n\t\t\t\t<AnimatePresence mode=\"wait\">\n\t\t\t\t\t<MotionBadge\n\t\t\t\t\t\tkey={eventCount}\n\t\t\t\t\t\tvariant=\"secondary\"\n\t\t\t\t\t\tinitial={{ scale: 0.8, opacity: 0 }}\n\t\t\t\t\t\tanimate={{ scale: 1, opacity: 1 }}\n\t\t\t\t\t\texit={{ scale: 0.8, opacity: 0 }}\n\t\t\t\t\t\ttransition={transition}\n\t\t\t\t\t>\n\t\t\t\t\t\t{eventCount} events\n\t\t\t\t\t</MotionBadge>\n\t\t\t\t</AnimatePresence>\n\t\t\t</div>\n\n\t\t\t<div className=\"flex items-center gap-2\">\n\t\t\t\t<MotionButton\n\t\t\t\t\tvariant=\"outline\"\n\t\t\t\t\tsize=\"icon\"\n\t\t\t\t\tclassName=\"h-6 w-6\"\n\t\t\t\t\tonClick={handlePrevious}\n\t\t\t\t\tvariants={buttonHover}\n\t\t\t\t\twhileHover=\"hover\"\n\t\t\t\t\twhileTap=\"tap\"\n\t\t\t\t>\n\t\t\t\t\t<ChevronLeft className=\"h-4 w-4\" />\n\t\t\t\t</MotionButton>\n\n\t\t\t\t<motion.p\n\t\t\t\t\tclassName=\"text-sm text-muted-foreground\"\n\t\t\t\t\tinitial={{ opacity: 0 }}\n\t\t\t\t\tanimate={{ opacity: 1 }}\n\t\t\t\t\ttransition={transition}\n\t\t\t\t>\n\t\t\t\t\t{rangeText(view, selectedDate)}\n\t\t\t\t</motion.p>\n\n\t\t\t\t<MotionButton\n\t\t\t\t\tvariant=\"outline\"\n\t\t\t\t\tsize=\"icon\"\n\t\t\t\t\tclassName=\"h-6 w-6\"\n\t\t\t\t\tonClick={handleNext}\n\t\t\t\t\tvariants={buttonHover}\n\t\t\t\t\twhileHover=\"hover\"\n\t\t\t\t\twhileTap=\"tap\"\n\t\t\t\t>\n\t\t\t\t\t<ChevronRight className=\"h-4 w-4\" />\n\t\t\t\t</MotionButton>\n\t\t\t</div>\n\t\t</div>\n\t);\n}\n",
      "type": "registry:component"
    },
    {
      "path": "src/modules/components/calendar/header/filter.tsx",
      "content": "import { CheckIcon, Filter, RefreshCcw } from \"lucide-react\";\nimport {\n\tDropdownMenu,\n\tDropdownMenuContent,\n\tDropdownMenuItem,\n\tDropdownMenuTrigger,\n} from \"@/components/ui/dropdown-menu\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { Toggle } from \"@/components/ui/toggle\";\nimport { useCalendar } from \"@/modules/components/calendar/contexts/calendar-context\";\nimport type { TEventColor } from \"@/modules/components/calendar/types\";\n\nexport default function FilterEvents() {\n\tconst { selectedColors, filterEventsBySelectedColors, clearFilter } =\n\t\tuseCalendar();\n\n\tconst colors: TEventColor[] = [\n\t\t\"blue\",\n\t\t\"green\",\n\t\t\"red\",\n\t\t\"yellow\",\n\t\t\"purple\",\n\t\t\"orange\",\n\t];\n\n\treturn (\n\t\t<DropdownMenu>\n\t\t\t<DropdownMenuTrigger asChild>\n\t\t\t\t<Toggle variant=\"outline\" className=\"cursor-pointer w-fit\">\n\t\t\t\t\t<Filter className=\"h-4 w-4\" />\n\t\t\t\t</Toggle>\n\t\t\t</DropdownMenuTrigger>\n\t\t\t<DropdownMenuContent align=\"end\" className=\"w-[150px]\">\n\t\t\t\t{colors.map((color, index) => (\n\t\t\t\t\t<DropdownMenuItem\n\t\t\t\t\t\tkey={index}\n\t\t\t\t\t\tclassName=\"flex items-center gap-2 cursor-pointer\"\n\t\t\t\t\t\tonClick={(e) => {\n\t\t\t\t\t\t\te.preventDefault();\n\t\t\t\t\t\t\tfilterEventsBySelectedColors(color);\n\t\t\t\t\t\t}}\n\t\t\t\t\t>\n\t\t\t\t\t\t<div\n\t\t\t\t\t\t\tclassName={`size-3.5 rounded-full bg-${color}-600 dark:bg-${color}-700`}\n\t\t\t\t\t\t/>\n\t\t\t\t\t\t<span className=\"capitalize flex justify-center items-center gap-2\">\n\t\t\t\t\t\t\t{color}\n\t\t\t\t\t\t\t<span>\n\t\t\t\t\t\t\t\t{selectedColors.includes(color) && (\n\t\t\t\t\t\t\t\t\t<span className=\"text-blue-500\">\n\t\t\t\t\t\t\t\t\t\t<CheckIcon className=\"size-4\" />\n\t\t\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t</span>\n\t\t\t\t\t</DropdownMenuItem>\n\t\t\t\t))}\n\t\t\t\t<Separator className=\"my-2\" />\n\t\t\t\t<DropdownMenuItem\n\t\t\t\t\tdisabled={selectedColors.length === 0}\n\t\t\t\t\tclassName=\"flex gap-2 cursor-pointer\"\n\t\t\t\t\tonClick={(e) => {\n\t\t\t\t\t\te.preventDefault();\n\t\t\t\t\t\tclearFilter();\n\t\t\t\t\t}}\n\t\t\t\t>\n\t\t\t\t\t<RefreshCcw className=\"size-3.5\" />\n\t\t\t\t\tClear Filter\n\t\t\t\t</DropdownMenuItem>\n\t\t\t</DropdownMenuContent>\n\t\t</DropdownMenu>\n\t);\n}\n",
      "type": "registry:component"
    },
    {
      "path": "src/modules/components/calendar/header/today-button.tsx",
      "content": "import { formatDate } from \"date-fns\";\nimport { motion } from \"framer-motion\";\nimport { Button } from \"@/components/ui/button\";\nimport {\n\tbuttonHover,\n\ttransition,\n} from \"@/modules/components/calendar/animations\";\nimport { useCalendar } from \"@/modules/components/calendar/contexts/calendar-context\";\n\nconst MotionButton = motion.create(Button);\n\nexport function TodayButton() {\n\tconst { setSelectedDate } = useCalendar();\n\n\tconst today = new Date();\n\tconst handleClick = () => setSelectedDate(today);\n\n\treturn (\n\t\t<MotionButton\n\t\t\tvariant=\"outline\"\n\t\t\tclassName=\"flex h-14 w-14 flex-col items-center justify-center p-0 text-center\"\n\t\t\tonClick={handleClick}\n\t\t\tvariants={buttonHover}\n\t\t\twhileHover=\"hover\"\n\t\t\twhileTap=\"tap\"\n\t\t\ttransition={transition}\n\t\t>\n\t\t\t<motion.span\n\t\t\t\tclassName=\"w-full bg-primary py-1 text-xs font-semibold text-primary-foreground\"\n\t\t\t\tinitial={{ y: -10, opacity: 0 }}\n\t\t\t\tanimate={{ y: 0, opacity: 1 }}\n\t\t\t\ttransition={{ delay: 0.1, ...transition }}\n\t\t\t>\n\t\t\t\t{formatDate(today, \"MMM\").toUpperCase()}\n\t\t\t</motion.span>\n\t\t\t<motion.span\n\t\t\t\tclassName=\"text-lg font-bold\"\n\t\t\t\tinitial={{ y: 10, opacity: 0 }}\n\t\t\t\tanimate={{ y: 0, opacity: 1 }}\n\t\t\t\ttransition={{ delay: 0.2, ...transition }}\n\t\t\t>\n\t\t\t\t{today.getDate()}\n\t\t\t</motion.span>\n\t\t</MotionButton>\n\t);\n}\n",
      "type": "registry:component"
    },
    {
      "path": "src/modules/components/calendar/header/user-select.tsx",
      "content": "import { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\nimport { AvatarGroup } from \"@/components/ui/avatar-group\";\nimport {\n\tSelect,\n\tSelectContent,\n\tSelectItem,\n\tSelectTrigger,\n\tSelectValue,\n} from \"@/components/ui/select\";\nimport { useCalendar } from \"@/modules/components/calendar/contexts/calendar-context\";\n\nexport function UserSelect() {\n\tconst { users, selectedUserId, filterEventsBySelectedUser } = useCalendar();\n\n\treturn (\n\t\t<Select value={selectedUserId!} onValueChange={filterEventsBySelectedUser}>\n\t\t\t<SelectTrigger className=\"w-full\">\n\t\t\t\t<SelectValue placeholder=\"Select a user\" />\n\t\t\t</SelectTrigger>\n\t\t\t<SelectContent align=\"end\">\n\t\t\t\t<SelectItem value=\"all\">\n\t\t\t\t\t<AvatarGroup className=\"mx-2 flex items-center\" max={3}>\n\t\t\t\t\t\t{users.map((user) => (\n\t\t\t\t\t\t\t<Avatar key={user.id} className=\"size-6 text-xxs\">\n\t\t\t\t\t\t\t\t<AvatarImage\n\t\t\t\t\t\t\t\t\tsrc={user.picturePath ?? undefined}\n\t\t\t\t\t\t\t\t\talt={user.name}\n\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t<AvatarFallback className=\"text-xxs\">\n\t\t\t\t\t\t\t\t\t{user.name[0]}\n\t\t\t\t\t\t\t\t</AvatarFallback>\n\t\t\t\t\t\t\t</Avatar>\n\t\t\t\t\t\t))}\n\t\t\t\t\t</AvatarGroup>\n\t\t\t\t\tAll\n\t\t\t\t</SelectItem>\n\n\t\t\t\t{users.map((user) => (\n\t\t\t\t\t<SelectItem\n\t\t\t\t\t\tkey={user.id}\n\t\t\t\t\t\tvalue={user.id}\n\t\t\t\t\t\tclassName=\"flex-1 cursor-pointer\"\n\t\t\t\t\t>\n\t\t\t\t\t\t<div className=\"flex items-center gap-2\">\n\t\t\t\t\t\t\t<Avatar key={user.id} className=\"size-6\">\n\t\t\t\t\t\t\t\t<AvatarImage\n\t\t\t\t\t\t\t\t\tsrc={user.picturePath ?? undefined}\n\t\t\t\t\t\t\t\t\talt={user.name}\n\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t<AvatarFallback className=\"text-xxs\">\n\t\t\t\t\t\t\t\t\t{user.name[0]}\n\t\t\t\t\t\t\t\t</AvatarFallback>\n\t\t\t\t\t\t\t</Avatar>\n\n\t\t\t\t\t\t\t<p className=\"truncate\">{user.name}</p>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</SelectItem>\n\t\t\t\t))}\n\t\t\t</SelectContent>\n\t\t</Select>\n\t);\n}\n",
      "type": "registry:component"
    },
    {
      "path": "src/modules/components/calendar/settings/settings.tsx",
      "content": "import {\n\tCheckIcon,\n\tDotIcon,\n\tMoonIcon,\n\tPaletteIcon,\n\tSettingsIcon,\n\tSunMediumIcon,\n\tXIcon,\n} from \"lucide-react\";\nimport { useTheme } from \"next-themes\";\nimport { Button } from \"@/components/ui/button\";\nimport {\n\tDropdownMenu,\n\tDropdownMenuContent,\n\tDropdownMenuGroup,\n\tDropdownMenuItem,\n\tDropdownMenuLabel,\n\tDropdownMenuRadioGroup,\n\tDropdownMenuRadioItem,\n\tDropdownMenuSeparator,\n\tDropdownMenuShortcut,\n\tDropdownMenuTrigger,\n} from \"@/components/ui/dropdown-menu\";\nimport { Switch } from \"@/components/ui/switch\";\nimport { useCalendar } from \"@/modules/components/calendar/contexts/calendar-context\";\nimport type { TCalendarView } from \"@/modules/components/calendar/types\";\nimport { useDragDrop } from \"@/modules/components/calendar/contexts/dnd-context\";\n\nexport function Settings() {\n\tconst {\n\t\tbadgeVariant,\n\t\tsetBadgeVariant,\n\t\tuse24HourFormat,\n\t\ttoggleTimeFormat,\n\t\tview,\n\t\tsetView,\n\t\tagendaModeGroupBy,\n\t\tsetAgendaModeGroupBy,\n\t} = useCalendar();\n\tconst { showConfirmation, setShowConfirmation } = useDragDrop();\n\tconst { theme, setTheme } = useTheme();\n\n\tconst isDarkMode = theme === \"dark\";\n\tconst isDotVariant = badgeVariant === \"dot\";\n\n\treturn (\n\t\t<DropdownMenu>\n\t\t\t<DropdownMenuTrigger asChild>\n\t\t\t\t<Button variant=\"outline\" size=\"icon\">\n\t\t\t\t\t<SettingsIcon />\n\t\t\t\t</Button>\n\t\t\t</DropdownMenuTrigger>\n\t\t\t<DropdownMenuContent className=\"w-56\">\n\t\t\t\t<DropdownMenuLabel>Calendar settings</DropdownMenuLabel>\n\t\t\t\t<DropdownMenuSeparator />\n\t\t\t\t<DropdownMenuGroup>\n\t\t\t\t\t<DropdownMenuItem>\n\t\t\t\t\t\tUse dark mode\n\t\t\t\t\t\t<DropdownMenuShortcut>\n\t\t\t\t\t\t\t<Switch\n\t\t\t\t\t\t\t\ticon={\n\t\t\t\t\t\t\t\t\tisDarkMode ? (\n\t\t\t\t\t\t\t\t\t\t<MoonIcon className=\"h-4 w-4\" />\n\t\t\t\t\t\t\t\t\t) : (\n\t\t\t\t\t\t\t\t\t\t<SunMediumIcon className=\"h-4 w-4\" />\n\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tchecked={isDarkMode}\n\t\t\t\t\t\t\t\tonCheckedChange={(checked) =>\n\t\t\t\t\t\t\t\t\tsetTheme(checked ? \"dark\" : \"light\")\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t</DropdownMenuShortcut>\n\t\t\t\t\t</DropdownMenuItem>\n\t\t\t\t\t<DropdownMenuItem>\n\t\t\t\t\t\tShow confirmation dialog on event drop\n\t\t\t\t\t\t<DropdownMenuShortcut>\n\t\t\t\t\t\t\t<Switch\n\t\t\t\t\t\t\t\ticon={\n\t\t\t\t\t\t\t\t\tshowConfirmation ? (\n\t\t\t\t\t\t\t\t\t\t<CheckIcon className=\"h-4 w-4\" />\n\t\t\t\t\t\t\t\t\t) : (\n\t\t\t\t\t\t\t\t\t\t<XIcon className=\"h-4 w-4\" />\n\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tchecked={showConfirmation}\n\t\t\t\t\t\t\t\tonCheckedChange={(checked) => setShowConfirmation(checked)}\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t</DropdownMenuShortcut>\n\t\t\t\t\t</DropdownMenuItem>\n\t\t\t\t\t<DropdownMenuItem>\n\t\t\t\t\t\tUse dot badge\n\t\t\t\t\t\t<DropdownMenuShortcut>\n\t\t\t\t\t\t\t<Switch\n\t\t\t\t\t\t\t\ticon={\n\t\t\t\t\t\t\t\t\tisDotVariant ? (\n\t\t\t\t\t\t\t\t\t\t<DotIcon className=\"w-4 h-4\" />\n\t\t\t\t\t\t\t\t\t) : (\n\t\t\t\t\t\t\t\t\t\t<PaletteIcon className=\"w-4 h-4\" />\n\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tchecked={isDotVariant}\n\t\t\t\t\t\t\t\tonCheckedChange={(checked) =>\n\t\t\t\t\t\t\t\t\tsetBadgeVariant(checked ? \"dot\" : \"colored\")\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t</DropdownMenuShortcut>\n\t\t\t\t\t</DropdownMenuItem>\n\t\t\t\t\t<DropdownMenuItem>\n\t\t\t\t\t\tUse 24 hour format\n\t\t\t\t\t\t<DropdownMenuShortcut>\n\t\t\t\t\t\t\t<Switch\n\t\t\t\t\t\t\t\ticon={\n\t\t\t\t\t\t\t\t\tuse24HourFormat ? (\n\t\t\t\t\t\t\t\t\t\t<svg\n\t\t\t\t\t\t\t\t\t\t\txmlns=\"http://www.w3.org/2000/svg\"\n\t\t\t\t\t\t\t\t\t\t\twidth={24}\n\t\t\t\t\t\t\t\t\t\t\theight={24}\n\t\t\t\t\t\t\t\t\t\t\tviewBox=\"0 0 24 24\"\n\t\t\t\t\t\t\t\t\t\t\tfill=\"none\"\n\t\t\t\t\t\t\t\t\t\t\tstroke=\"currentColor\"\n\t\t\t\t\t\t\t\t\t\t\tstrokeWidth={2}\n\t\t\t\t\t\t\t\t\t\t\tstrokeLinecap=\"round\"\n\t\t\t\t\t\t\t\t\t\t\tstrokeLinejoin=\"round\"\n\t\t\t\t\t\t\t\t\t\t\tclassName=\"icon icon-tabler icons-tabler-outline icon-tabler-clock-24\"\n\t\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\t\t<path stroke=\"none\" d=\"M0 0h24v24H0z\" fill=\"none\" />\n\t\t\t\t\t\t\t\t\t\t\t<path d=\"M3 12a9 9 0 0 0 5.998 8.485m12.002 -8.485a9 9 0 1 0 -18 0\" />\n\t\t\t\t\t\t\t\t\t\t\t<path d=\"M12 7v5\" />\n\t\t\t\t\t\t\t\t\t\t\t<path d=\"M12 15h2a1 1 0 0 1 1 1v1a1 1 0 0 1 -1 1h-1a1 1 0 0 0 -1 1v1a1 1 0 0 0 1 1h2\" />\n\t\t\t\t\t\t\t\t\t\t\t<path d=\"M18 15v2a1 1 0 0 0 1 1h1\" />\n\t\t\t\t\t\t\t\t\t\t\t<path d=\"M21 15v6\" />\n\t\t\t\t\t\t\t\t\t\t</svg>\n\t\t\t\t\t\t\t\t\t) : (\n\t\t\t\t\t\t\t\t\t\t<svg\n\t\t\t\t\t\t\t\t\t\t\txmlns=\"http://www.w3.org/2000/svg\"\n\t\t\t\t\t\t\t\t\t\t\twidth={24}\n\t\t\t\t\t\t\t\t\t\t\theight={24}\n\t\t\t\t\t\t\t\t\t\t\tviewBox=\"0 0 24 24\"\n\t\t\t\t\t\t\t\t\t\t\tfill=\"none\"\n\t\t\t\t\t\t\t\t\t\t\tstroke=\"currentColor\"\n\t\t\t\t\t\t\t\t\t\t\tstrokeWidth={2}\n\t\t\t\t\t\t\t\t\t\t\tstrokeLinecap=\"round\"\n\t\t\t\t\t\t\t\t\t\t\tstrokeLinejoin=\"round\"\n\t\t\t\t\t\t\t\t\t\t\tclassName=\"icon icon-tabler icons-tabler-outline icon-tabler-clock-12\"\n\t\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\t\t<path stroke=\"none\" d=\"M0 0h24v24H0z\" fill=\"none\" />\n\t\t\t\t\t\t\t\t\t\t\t<path d=\"M3 12a9 9 0 0 0 9 9m9 -9a9 9 0 1 0 -18 0\" />\n\t\t\t\t\t\t\t\t\t\t\t<path d=\"M12 7v5l.5 .5\" />\n\t\t\t\t\t\t\t\t\t\t\t<path d=\"M18 15h2a1 1 0 0 1 1 1v1a1 1 0 0 1 -1 1h-1a1 1 0 0 0 -1 1v1a1 1 0 0 0 1 1h2\" />\n\t\t\t\t\t\t\t\t\t\t\t<path d=\"M15 21v-6\" />\n\t\t\t\t\t\t\t\t\t\t</svg>\n\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tchecked={use24HourFormat}\n\t\t\t\t\t\t\t\tonCheckedChange={toggleTimeFormat}\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t</DropdownMenuShortcut>\n\t\t\t\t\t</DropdownMenuItem>\n\t\t\t\t</DropdownMenuGroup>\n\t\t\t\t<DropdownMenuSeparator />\n\t\t\t\t<DropdownMenuGroup>\n\t\t\t\t\t<DropdownMenuLabel>Agenda view group by</DropdownMenuLabel>\n\t\t\t\t\t<DropdownMenuRadioGroup\n\t\t\t\t\t\tvalue={agendaModeGroupBy}\n\t\t\t\t\t\tonValueChange={(value) =>\n\t\t\t\t\t\t\tsetAgendaModeGroupBy(value as \"date\" | \"color\")\n\t\t\t\t\t\t}\n\t\t\t\t\t>\n\t\t\t\t\t\t<DropdownMenuRadioItem value=\"date\">Date</DropdownMenuRadioItem>\n\t\t\t\t\t\t<DropdownMenuRadioItem value=\"color\">Color</DropdownMenuRadioItem>\n\t\t\t\t\t</DropdownMenuRadioGroup>\n\t\t\t\t</DropdownMenuGroup>\n\t\t\t</DropdownMenuContent>\n\t\t</DropdownMenu>\n\t);\n}\n",
      "type": "registry:component"
    },
    {
      "path": "src/modules/components/calendar/skeletons/calendar-header-skeleton.tsx",
      "content": "import { Skeleton } from \"@/components/ui/skeleton\";\n\nexport function CalendarHeaderSkeleton() {\n\treturn (\n\t\t<div className=\"flex items-center justify-between border-b px-4 py-2\">\n\t\t\t<div className=\"flex items-center gap-2\">\n\t\t\t\t<Skeleton className=\"h-8 w-8\" />\n\t\t\t\t<Skeleton className=\"h-8 w-32\" />\n\t\t\t</div>\n\n\t\t\t<div className=\"flex items-center gap-2\">\n\t\t\t\t<Skeleton className=\"h-8 w-24\" />\n\t\t\t\t<div className=\"flex gap-1\">\n\t\t\t\t\t<Skeleton className=\"h-8 w-8\" />\n\t\t\t\t\t<Skeleton className=\"h-8 w-8\" />\n\t\t\t\t\t<Skeleton className=\"h-8 w-8\" />\n\t\t\t\t</div>\n\t\t\t\t<Skeleton className=\"h-8 w-24\" />\n\t\t\t\t<Skeleton className=\"h-8 w-8\" />\n\t\t\t</div>\n\t\t</div>\n\t);\n}\n",
      "type": "registry:component"
    },
    {
      "path": "src/modules/components/calendar/skeletons/calendar-skeleton.tsx",
      "content": "import { CalendarHeaderSkeleton } from \"@/modules/components/calendar/skeletons/calendar-header-skeleton\";\nimport { MonthViewSkeleton } from \"@/modules/components/calendar/skeletons/month-view-skeleton\";\n\nexport function CalendarSkeleton() {\n\treturn (\n\t\t<div className=\"container mx-auto\">\n\t\t\t<div className=\"flex h-screen flex-col\">\n\t\t\t\t<CalendarHeaderSkeleton />\n\t\t\t\t<div className=\"flex-1\">\n\t\t\t\t\t<MonthViewSkeleton />\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</div>\n\t);\n}\n",
      "type": "registry:component"
    },
    {
      "path": "src/modules/components/calendar/skeletons/day-view-skeleton.tsx",
      "content": "import { Skeleton } from \"@/components/ui/skeleton\";\n\nexport function DayViewSkeleton() {\n\treturn (\n\t\t<div className=\"flex h-full flex-col\">\n\t\t\t<div className=\"grid grid-cols-2 border-b\">\n\t\t\t\t<div className=\"w-18\"></div>\n\t\t\t\t<div className=\"flex flex-col items-center justify-center py-2\">\n\t\t\t\t\t<Skeleton className=\"h-6 w-24 rounded-full\" />\n\t\t\t\t\t<Skeleton className=\"mt-1 h-4 w-16\" />\n\t\t\t\t</div>\n\t\t\t</div>\n\n\t\t\t<div className=\"flex flex-1 overflow-y-auto\">\n\t\t\t\t<div className=\"w-18 flex-shrink-0\">\n\t\t\t\t\t{Array.from({ length: 12 }).map((_, i) => (\n\t\t\t\t\t\t<div key={i} className=\"relative h-12 border-b pr-2 text-right\">\n\t\t\t\t\t\t\t<Skeleton className=\"absolute -top-3 right-2 h-4 w-10\" />\n\t\t\t\t\t\t</div>\n\t\t\t\t\t))}\n\t\t\t\t</div>\n\n\t\t\t\t<div className=\"flex-1\">\n\t\t\t\t\t<div className=\"relative\">\n\t\t\t\t\t\t{Array.from({ length: 12 }).map((_, hourIndex) => (\n\t\t\t\t\t\t\t<div key={hourIndex} className=\"h-12 border-b\"></div>\n\t\t\t\t\t\t))}\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</div>\n\t);\n}\n",
      "type": "registry:component"
    },
    {
      "path": "src/modules/components/calendar/skeletons/month-view-skeleton.tsx",
      "content": "import { Skeleton } from \"@/components/ui/skeleton\";\n\nexport function MonthViewSkeleton() {\n\treturn (\n\t\t<div className=\"flex h-full flex-col\">\n\t\t\t<div className=\"grid grid-cols-7 border-b py-2\">\n\t\t\t\t{Array.from({ length: 7 }).map((_, i) => (\n\t\t\t\t\t<div key={i} className=\"flex justify-center\">\n\t\t\t\t\t\t<Skeleton className=\"h-6 w-12\" />\n\t\t\t\t\t</div>\n\t\t\t\t))}\n\t\t\t</div>\n\n\t\t\t<div className=\"grid flex-1 grid-cols-7 grid-rows-6\">\n\t\t\t\t{Array.from({ length: 42 }).map((_, i) => (\n\t\t\t\t\t<div key={i} className=\"border-b border-r p-1\">\n\t\t\t\t\t\t<Skeleton className=\"mb-1 h-6 w-6 rounded-full\" />\n\t\t\t\t\t\t<div className=\"mt-1 space-y-1\">\n\t\t\t\t\t\t\t{Array.from({ length: Math.floor(Math.random() * 3) }).map(\n\t\t\t\t\t\t\t\t(_, j) => (\n\t\t\t\t\t\t\t\t\t<Skeleton key={j} className=\"h-5 w-full\" />\n\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t))}\n\t\t\t</div>\n\t\t</div>\n\t);\n}\n",
      "type": "registry:component"
    },
    {
      "path": "src/modules/components/calendar/skeletons/week-view-skeleton.tsx",
      "content": "import { Skeleton } from \"@/components/ui/skeleton\";\n\nexport function WeekViewSkeleton() {\n\treturn (\n\t\t<div className=\"flex h-full flex-col\">\n\t\t\t<div className=\"grid grid-cols-8 border-b\">\n\t\t\t\t<div className=\"w-18\"></div>\n\t\t\t\t{Array.from({ length: 7 }).map((_, i) => (\n\t\t\t\t\t<div\n\t\t\t\t\t\tkey={i}\n\t\t\t\t\t\tclassName=\"flex flex-col items-center justify-center py-2\"\n\t\t\t\t\t>\n\t\t\t\t\t\t<Skeleton className=\"h-6 w-10 rounded-full\" />\n\t\t\t\t\t\t<Skeleton className=\"mt-1 h-4 w-6\" />\n\t\t\t\t\t</div>\n\t\t\t\t))}\n\t\t\t</div>\n\n\t\t\t<div className=\"flex flex-1 overflow-y-auto\">\n\t\t\t\t<div className=\"w-18 flex-shrink-0\">\n\t\t\t\t\t{Array.from({ length: 12 }).map((_, i) => (\n\t\t\t\t\t\t<div key={i} className=\"relative h-12 border-b pr-2 text-right\">\n\t\t\t\t\t\t\t<Skeleton className=\"absolute -top-3 right-2 h-4 w-10\" />\n\t\t\t\t\t\t</div>\n\t\t\t\t\t))}\n\t\t\t\t</div>\n\n\t\t\t\t<div className=\"grid flex-1 grid-cols-7 divide-x\">\n\t\t\t\t\t{Array.from({ length: 7 }).map((_, dayIndex) => (\n\t\t\t\t\t\t<div key={dayIndex} className=\"relative\">\n\t\t\t\t\t\t\t{Array.from({ length: 12 }).map((_, hourIndex) => (\n\t\t\t\t\t\t\t\t<div key={hourIndex} className=\"h-12 border-b\"></div>\n\t\t\t\t\t\t\t))}\n\t\t\t\t\t\t</div>\n\t\t\t\t\t))}\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</div>\n\t);\n}\n",
      "type": "registry:component"
    },
    {
      "path": "src/modules/components/calendar/skeletons/year-view-skeleton.tsx",
      "content": "import { Skeleton } from \"@/components/ui/skeleton\";\n\nconst MONTHS = Array.from({ length: 12 });\n\nexport function YearViewSkeleton() {\n\treturn (\n\t\t<div className=\"hidden sm:grid grid-cols-3 gap-4 flex-grow overflow-hidden auto-rows-fr lg:grid-cols-4\">\n\t\t\t{MONTHS.map((_, monthIndex) => (\n\t\t\t\t<div\n\t\t\t\t\tkey={monthIndex}\n\t\t\t\t\tclassName=\"flex flex-col border rounded-md overflow-hidden h-full animate-pulse\"\n\t\t\t\t>\n\t\t\t\t\t<div className=\"bg-primary/5 px-1 py-2 text-center\">\n\t\t\t\t\t\t<Skeleton className=\"h-4 w-24 mx-auto\" />\n\t\t\t\t\t</div>\n\n\t\t\t\t\t<div className=\"grid grid-cols-7 text-center text-xs py-2 px-1\">\n\t\t\t\t\t\t{Array.from({ length: 7 }).map((_, i) => (\n\t\t\t\t\t\t\t<Skeleton key={i} className=\"h-3 w-3 mx-auto\" />\n\t\t\t\t\t\t))}\n\t\t\t\t\t</div>\n\n\t\t\t\t\t<div className=\"grid grid-cols-7 gap-0 p-1 flex-grow\">\n\t\t\t\t\t\t{Array.from({ length: 42 }).map((_, i) => (\n\t\t\t\t\t\t\t<div\n\t\t\t\t\t\t\t\tkey={i}\n\t\t\t\t\t\t\t\tclassName=\"flex flex-col items-center justify-center p-1\"\n\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t<Skeleton className=\"h-4 w-4 rounded-full\" />\n\t\t\t\t\t\t\t\t<Skeleton className=\"h-1.5 w-3 mt-1\" />\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t))}\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t))}\n\t\t</div>\n\t);\n}\n",
      "type": "registry:component"
    },
    {
      "path": "src/modules/components/calendar/views/agenda-view/agenda-events.tsx",
      "content": "import {format, parseISO} from \"date-fns\";\nimport type {FC} from \"react\";\nimport {Avatar, AvatarFallback, AvatarImage} from \"@/components/ui/avatar\";\nimport {\n    Command,\n    CommandEmpty,\n    CommandGroup,\n    CommandInput,\n    CommandItem,\n    CommandList,\n} from \"@/components/ui/command\";\nimport {cn} from \"@/lib/utils\";\nimport {useCalendar} from \"@/modules/components/calendar/contexts/calendar-context\";\nimport {EventDetailsDialog} from \"@/modules/components/calendar/dialogs/event-details-dialog\";\nimport {\n    formatTime,\n    getBgColor,\n    getColorClass, getEventsForMonth,\n    getFirstLetters,\n    toCapitalize,\n} from \"@/modules/components/calendar/helpers\";\nimport {EventBullet} from \"@/modules/components/calendar/views/month-view/event-bullet\";\n\nexport const AgendaEvents: FC = () => {\n    const {events, use24HourFormat, badgeVariant, agendaModeGroupBy, selectedDate} =\n        useCalendar();\n\n    const monthEvents = getEventsForMonth(events, selectedDate)\n\n    const agendaEvents = Object.groupBy(monthEvents, (event) => {\n        return agendaModeGroupBy === \"date\"\n            ? format(parseISO(event.startDate), \"yyyy-MM-dd\")\n            : event.color;\n    });\n\n    const groupedAndSortedEvents = Object.entries(agendaEvents).sort(\n        (a, b) => new Date(a[0]).getTime() - new Date(b[0]).getTime(),\n    );\n\n    return (\n        <Command className=\"py-4 h-[80vh] bg-transparent\">\n            <div className=\"mb-4 mx-4\">\n                <CommandInput placeholder=\"Type a command or search...\"/>\n            </div>\n            <CommandList className=\"max-h-max px-3 border-t\">\n                {groupedAndSortedEvents.map(([date, groupedEvents]) => (\n                    <CommandGroup\n                        key={date}\n                        heading={\n                            agendaModeGroupBy === \"date\"\n                                ? format(parseISO(date), \"EEEE, MMMM d, yyyy\")\n                                : toCapitalize(groupedEvents![0].color)\n                        }\n                    >\n                        {groupedEvents!.map((event) => (\n                            <CommandItem\n                                key={event.id}\n                                className={cn(\n                                    \"mb-2 p-4 border rounded-md data-[selected=true]:bg-bg transition-all data-[selected=true]:text-none hover:cursor-pointer\",\n                                    {\n                                        [getColorClass(event.color)]: badgeVariant === \"colored\",\n                                        \"hover:bg-zinc-200 dark:hover:bg-gray-900\":\n                                            badgeVariant === \"dot\",\n                                        \"hover:opacity-60\": badgeVariant === \"colored\",\n                                    },\n                                )}\n                            >\n                                <EventDetailsDialog event={event}>\n                                    <div className=\"w-full flex items-center justify-between gap-4\">\n                                        <div className=\"flex items-center gap-2\">\n                                            {badgeVariant === \"dot\" ? (\n                                                <EventBullet color={event.color}/>\n                                            ) : (\n                                                <Avatar>\n                                                    <AvatarImage src=\"\" alt=\"@shadcn\"/>\n                                                    <AvatarFallback className={getBgColor(event.color)}>\n                                                        {getFirstLetters(event.title)}\n                                                    </AvatarFallback>\n                                                </Avatar>\n                                            )}\n                                            <div className=\"flex flex-col\">\n                                                <p\n                                                    className={cn({\n                                                        \"font-medium\": badgeVariant === \"dot\",\n                                                        \"text-foreground\": badgeVariant === \"dot\",\n                                                    })}\n                                                >\n                                                    {event.title}\n                                                </p>\n                                                <p className=\"text-muted-foreground text-sm line-clamp-1 text-ellipsis md:text-clip w-1/3\">\n                                                    {event.description}\n                                                </p>\n                                            </div>\n                                        </div>\n                                        <div className=\"w-40 flex justify-center items-center gap-1\">\n                                            {agendaModeGroupBy === \"date\" ? (\n                                                <>\n                                                    <p className=\"text-sm\">\n                                                        {formatTime(event.startDate, use24HourFormat)}\n                                                    </p>\n                                                    <span className=\"text-muted-foreground\">-</span>\n                                                    <p className=\"text-sm\">\n                                                        {formatTime(event.endDate, use24HourFormat)}\n                                                    </p>\n                                                </>\n                                            ) : (\n                                                <>\n                                                    <p className=\"text-sm\">\n                                                        {format(event.startDate, \"MM/dd/yyyy\")}\n                                                    </p>\n                                                    <span className=\"text-sm\">at</span>\n                                                    <p className=\"text-sm\">\n                                                        {formatTime(event.startDate, use24HourFormat)}\n                                                    </p>\n                                                </>\n                                            )}\n                                        </div>\n                                    </div>\n                                </EventDetailsDialog>\n                            </CommandItem>\n                        ))}\n                    </CommandGroup>\n                ))}\n                <CommandEmpty>No results found.</CommandEmpty>\n            </CommandList>\n        </Command>\n    );\n};\n",
      "type": "registry:component"
    },
    {
      "path": "src/modules/components/calendar/views/month-view/calendar-month-view.tsx",
      "content": "import { motion } from \"framer-motion\";\nimport { useMemo } from \"react\";\nimport {\n\tstaggerContainer,\n\ttransition,\n} from \"@/modules/components/calendar/animations\";\nimport { useCalendar } from \"@/modules/components/calendar/contexts/calendar-context\";\n\nimport {\n\tcalculateMonthEventPositions,\n\tgetCalendarCells,\n} from \"@/modules/components/calendar/helpers\";\n\nimport type { IEvent } from \"@/modules/components/calendar/interfaces\";\nimport { DayCell } from \"@/modules/components/calendar/views/month-view/day-cell\";\n\ninterface IProps {\n\tsingleDayEvents: IEvent[];\n\tmultiDayEvents: IEvent[];\n}\n\nconst WEEK_DAYS = [\"Sun\", \"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\", \"Sat\"];\n\nexport function CalendarMonthView({ singleDayEvents, multiDayEvents }: IProps) {\n\tconst { selectedDate } = useCalendar();\n\n\tconst allEvents = [...multiDayEvents, ...singleDayEvents];\n\n\tconst cells = useMemo(() => getCalendarCells(selectedDate), [selectedDate]);\n\n\tconst eventPositions = useMemo(\n\t\t() =>\n\t\t\tcalculateMonthEventPositions(\n\t\t\t\tmultiDayEvents,\n\t\t\t\tsingleDayEvents,\n\t\t\t\tselectedDate,\n\t\t\t),\n\t\t[multiDayEvents, singleDayEvents, selectedDate],\n\t);\n\n\treturn (\n\t\t<motion.div initial=\"initial\" animate=\"animate\" variants={staggerContainer}>\n\t\t\t<div className=\"grid grid-cols-7\">\n\t\t\t\t{WEEK_DAYS.map((day, index) => (\n\t\t\t\t\t<motion.div\n\t\t\t\t\t\tkey={day}\n\t\t\t\t\t\tclassName=\"flex items-center justify-center py-2\"\n\t\t\t\t\t\tinitial={{ opacity: 0, y: -10 }}\n\t\t\t\t\t\tanimate={{ opacity: 1, y: 0 }}\n\t\t\t\t\t\ttransition={{ delay: index * 0.05, ...transition }}\n\t\t\t\t\t>\n\t\t\t\t\t\t<span className=\"text-xs font-medium text-t-quaternary\">{day}</span>\n\t\t\t\t\t</motion.div>\n\t\t\t\t))}\n\t\t\t</div>\n\n\t\t\t<div className=\"grid grid-cols-7 overflow-hidden\">\n\t\t\t\t{cells.map((cell, index) => (\n\t\t\t\t\t<DayCell\n\t\t\t\t\t\tkey={index}\n\t\t\t\t\t\tcell={cell}\n\t\t\t\t\t\tevents={allEvents}\n\t\t\t\t\t\teventPositions={eventPositions}\n\t\t\t\t\t/>\n\t\t\t\t))}\n\t\t\t</div>\n\t\t</motion.div>\n\t);\n}\n",
      "type": "registry:component"
    },
    {
      "path": "src/modules/components/calendar/views/month-view/day-cell.tsx",
      "content": "\"use client\";\n\nimport { cva } from \"class-variance-authority\";\nimport { isToday, startOfDay, isSunday, isSameMonth } from \"date-fns\";\nimport { motion } from \"framer-motion\";\nimport { useMemo, useCallback } from \"react\";\n\nimport { cn } from \"@/lib/utils\";\nimport {\n  staggerContainer,\n  transition,\n} from \"@/modules/components/calendar/animations\";\nimport { EventListDialog } from \"@/modules/components/calendar/dialogs/events-list-dialog\";\nimport { DroppableArea } from \"@/modules/components/calendar/dnd/droppable-area\";\nimport { getMonthCellEvents } from \"@/modules/components/calendar/helpers\";\nimport { useMediaQuery } from \"@/modules/components/calendar/hooks\";\nimport type {\n  ICalendarCell,\n  IEvent,\n} from \"@/modules/components/calendar/interfaces\";\nimport { EventBullet } from \"@/modules/components/calendar/views/month-view/event-bullet\";\nimport { MonthEventBadge } from \"@/modules/components/calendar/views/month-view/month-event-badge\";\nimport { AddEditEventDialog } from \"../../dialogs/add-edit-event-dialog\";\nimport { Button } from \"@/components/ui/button\";\nimport { Plus } from \"lucide-react\";\n\ninterface IProps {\n  cell: ICalendarCell;\n  events: IEvent[];\n  eventPositions: Record<string, number>;\n}\n\nexport const dayCellVariants = cva(\"text-white\", {\n  variants: {\n    color: {\n      blue: \"bg-blue-600 dark:bg-blue-500 hover:bg-blue-700 dark:hover:bg-blue-400 \",\n      green:\n        \"bg-green-600 dark:bg-green-500 hover:bg-green-700 dark:hover:bg-green-400\",\n      red: \"bg-red-600 dark:bg-red-500 hover:bg-red-700 dark:hover:bg-red-400\",\n      yellow:\n        \"bg-yellow-600 dark:bg-yellow-500 hover:bg-yellow-700 dark:hover:bg-yellow-400\",\n      purple:\n        \"bg-purple-600 dark:bg-purple-500 hover:bg-purple-700 dark:hover:bg-purple-400\",\n      orange:\n        \"bg-orange-600 dark:bg-orange-500 hover:bg-orange-700 dark:hover:bg-orange-400\",\n      gray: \"bg-gray-600 dark:bg-gray-500 hover:bg-gray-700 dark:hover:bg-gray-400\",\n    },\n  },\n  defaultVariants: {\n    color: \"blue\",\n  },\n});\n\nconst MAX_VISIBLE_EVENTS = 3;\n\nexport function DayCell({ cell, events, eventPositions }: IProps) {\n  const { day, currentMonth, date } = cell;\n  const isMobile = useMediaQuery(\"(max-width: 768px)\");\n\n  // Memoize cellEvents and currentCellMonth for performance\n  const { cellEvents, currentCellMonth } = useMemo(() => {\n    const cellEvents = getMonthCellEvents(date, events, eventPositions);\n    const currentCellMonth = startOfDay(\n      new Date(date.getFullYear(), date.getMonth(), 1)\n    );\n    return { cellEvents, currentCellMonth };\n  }, [date, events, eventPositions]);\n\n  // Memoize event rendering for each position with animation\n  const renderEventAtPosition = useCallback(\n    (position: number) => {\n      const event = cellEvents.find((e) => e.position === position);\n      if (!event) {\n        return (\n          <motion.div\n            key={`empty-${position}`}\n            className=\"lg:flex-1\"\n            initial={false}\n            animate={false}\n          />\n        );\n      }\n      const showBullet = isSameMonth(\n        new Date(event.startDate),\n        currentCellMonth\n      );\n\n      return (\n        <motion.div\n          key={`event-${event.id}-${position}`}\n          className=\"lg:flex-1\"\n          initial={{ opacity: 0, x: -10 }}\n          animate={{ opacity: 1, x: 0 }}\n          transition={{ delay: position * 0.1, ...transition }}\n        >\n          <>\n            {showBullet && (\n              <EventBullet className=\"lg:hidden\" color={event.color} />\n            )}\n            <MonthEventBadge\n              className=\"hidden lg:flex\"\n              event={event}\n              cellDate={startOfDay(date)}\n            />\n          </>\n        </motion.div>\n      );\n    },\n    [cellEvents, currentCellMonth, date]\n  );\n\n  const showMoreCount = cellEvents.length - MAX_VISIBLE_EVENTS;\n\n  const showMobileMore = isMobile && currentMonth && showMoreCount > 0;\n  const showDesktopMore = !isMobile && currentMonth && showMoreCount > 0;\n\n  const cellContent = useMemo(\n    () => (\n      <motion.div\n        className={cn(\n          \"flex h-full lg:min-h-[10rem] flex-col gap-1 border-l border-t\",\n          isSunday(date) && \"border-l-0\"\n        )}\n        initial={{ opacity: 0, y: 10 }}\n        animate={{ opacity: 1, y: 0 }}\n        transition={transition}\n      >\n        <DroppableArea date={date} className=\"w-full h-full py-2\">\n          <motion.span\n            className={cn(\n              \"h-6 px-1 text-xs font-semibold lg:px-2\",\n              !currentMonth && \"opacity-20\",\n              isToday(date) &&\n                \"flex w-6 translate-x-1 items-center justify-center rounded-full bg-primary px-0 font-bold text-primary-foreground\"\n            )}\n          >\n            {day}\n          </motion.span>\n\n          <motion.div\n            className={cn(\n              \"flex h-fit gap-1 px-2 mt-1 lg:h-[94px] lg:flex-col lg:gap-2 lg:px-0\",\n              !currentMonth && \"opacity-50\"\n            )}\n          >\n            {(cellEvents.length === 0 && !isMobile) ? (\n              <div className=\"w-full h-full flex justify-center items-center group\">\n                <AddEditEventDialog startDate={date}>\n                  <Button\n                    variant=\"ghost\"\n                    className=\"border opacity-0 group-hover:opacity-100 transition-opacity duration-200\"\n                  >\n                    <Plus className=\"h-4 w-4\" />\n                    <span className=\"max-sm:hidden\">Add Event</span>\n                  </Button>\n                </AddEditEventDialog>\n              </div>\n            ) : (\n              [0, 1, 2].map(renderEventAtPosition)\n            )}\n          </motion.div>\n\n          {showMobileMore && (\n            <div className=\"flex justify-end items-end mx-2\">\n              <span className=\"text-[0.6rem] font-semibold text-accent-foreground\">\n                +{showMoreCount}\n              </span>\n            </div>\n          )}\n\n          {showDesktopMore && (\n            <motion.div\n              className={cn(\n                \"h-4.5 px-1.5 my-2 text-end text-xs font-semibold text-muted-foreground\",\n                !currentMonth && \"opacity-50\"\n              )}\n              initial={{ opacity: 0, y: 5 }}\n              animate={{ opacity: 1, y: 0 }}\n              transition={{ delay: 0.3, ...transition }}\n            >\n              <EventListDialog date={date} events={cellEvents} />\n            </motion.div>\n          )}\n        </DroppableArea>\n      </motion.div>\n    ),\n    [\n      date,\n      day,\n      currentMonth,\n      cellEvents,\n      showMobileMore,\n      showDesktopMore,\n      showMoreCount,\n      renderEventAtPosition,\n    ]\n  );\n\n  if (isMobile && currentMonth) {\n    return (\n      <EventListDialog date={date} events={cellEvents}>\n        {cellContent}\n      </EventListDialog>\n    );\n  }\n\n  return cellContent;\n}\n",
      "type": "registry:component"
    },
    {
      "path": "src/modules/components/calendar/views/month-view/event-bullet.tsx",
      "content": "import { cva } from \"class-variance-authority\";\nimport { motion } from \"framer-motion\";\nimport { cn } from \"@/lib/utils\";\nimport { transition } from \"@/modules/components/calendar/animations\";\nimport type { TEventColor } from \"@/modules/components/calendar/types\";\n\nconst eventBulletVariants = cva(\"size-2 rounded-full\", {\n\tvariants: {\n\t\tcolor: {\n\t\t\tblue: \"bg-blue-600 dark:bg-blue-500\",\n\t\t\tgreen: \"bg-green-600 dark:bg-green-500\",\n\t\t\tred: \"bg-red-600 dark:bg-red-500\",\n\t\t\tyellow: \"bg-yellow-600 dark:bg-yellow-500\",\n\t\t\tpurple: \"bg-purple-600 dark:bg-purple-500\",\n\t\t\torange: \"bg-orange-600 dark:bg-orange-500\",\n\t\t\tgray: \"bg-gray-600 dark:bg-gray-500\",\n\t\t},\n\t},\n\tdefaultVariants: {\n\t\tcolor: \"blue\",\n\t},\n});\n\nexport function EventBullet({\n\tcolor,\n\tclassName,\n}: {\n\tcolor: TEventColor;\n\tclassName?: string;\n}) {\n\treturn (\n\t\t<motion.div\n\t\t\tclassName={cn(eventBulletVariants({ color, className }))}\n\t\t\tinitial={{ scale: 0, opacity: 0 }}\n\t\t\tanimate={{ scale: 1, opacity: 1 }}\n\t\t\twhileHover={{ scale: 1.2 }}\n\t\t\ttransition={transition}\n\t\t/>\n\t);\n}\n",
      "type": "registry:component"
    },
    {
      "path": "src/modules/components/calendar/views/month-view/month-event-badge.tsx",
      "content": "import type { VariantProps } from \"class-variance-authority\";\nimport { cva } from \"class-variance-authority\";\nimport { endOfDay, isSameDay, parseISO, startOfDay } from \"date-fns\";\nimport { cn } from \"@/lib/utils\";\nimport { useCalendar } from \"@/modules/components/calendar/contexts/calendar-context\";\nimport { EventDetailsDialog } from \"@/modules/components/calendar/dialogs/event-details-dialog\";\nimport { DraggableEvent } from \"@/modules/components/calendar/dnd/draggable-event\";\nimport { formatTime } from \"@/modules/components/calendar/helpers\";\nimport type { IEvent } from \"@/modules/components/calendar/interfaces\";\nimport {EventBullet} from \"@/modules/components/calendar/views/month-view/event-bullet\";\n\nconst eventBadgeVariants = cva(\n\t\"mx-1 flex size-auto h-6.5 select-none items-center justify-between gap-1.5 truncate whitespace-nowrap rounded-md border px-2 text-xs\",\n\t{\n\t\tvariants: {\n\t\t\tcolor: {\n\t\t\t\t// Colored variants\n\t\t\t\tblue: \"border-blue-200 bg-blue-50 text-blue-700 dark:border-blue-800 dark:bg-blue-950 dark:text-blue-300\",\n\t\t\t\tgreen:\n\t\t\t\t\t\"border-green-200 bg-green-50 text-green-700 dark:border-green-800 dark:bg-green-950 dark:text-green-300\",\n\t\t\t\tred: \"border-red-200 bg-red-50 text-red-700 dark:border-red-800 dark:bg-red-950 dark:text-red-300\",\n\t\t\t\tyellow:\n\t\t\t\t\t\"border-yellow-200 bg-yellow-50 text-yellow-700 dark:border-yellow-800 dark:bg-yellow-950 dark:text-yellow-300\",\n\t\t\t\tpurple:\n\t\t\t\t\t\"border-purple-200 bg-purple-50 text-purple-700 dark:border-purple-800 dark:bg-purple-950 dark:text-purple-300\",\n\t\t\t\torange:\n\t\t\t\t\t\"border-orange-200 bg-orange-50 text-orange-700 dark:border-orange-800 dark:bg-orange-950 dark:text-orange-300\",\n\n\t\t\t\t// Dot variants\n\t\t\t\t\"blue-dot\": \"bg-bg-secondary text-t-primary [&_svg]:fill-blue-600\",\n\t\t\t\t\"green-dot\": \"bg-bg-secondary text-t-primary [&_svg]:fill-green-600\",\n\t\t\t\t\"red-dot\": \"bg-bg-secondary text-t-primary [&_svg]:fill-red-600\",\n\t\t\t\t\"orange-dot\": \"bg-bg-secondary text-t-primary [&_svg]:fill-orange-600\",\n\t\t\t\t\"purple-dot\": \"bg-bg-secondary text-t-primary [&_svg]:fill-purple-600\",\n\t\t\t\t\"yellow-dot\": \"bg-bg-secondary text-t-primary [&_svg]:fill-yellow-600\",\n\t\t\t},\n\t\t\tmultiDayPosition: {\n\t\t\t\tfirst:\n\t\t\t\t\t\"relative z-10 mr-0 rounded-r-none border-r-0 [&>span]:mr-2.5\",\n\t\t\t\tmiddle:\n\t\t\t\t\t\"relative z-10 mx-0 w-[calc(100%_+_1px)] rounded-none border-x-0\",\n\t\t\t\tlast: \"ml-0 rounded-l-none border-l-0\",\n\t\t\t\tnone: \"\",\n\t\t\t},\n\t\t},\n\t\tdefaultVariants: {\n\t\t\tcolor: \"blue-dot\",\n\t\t},\n\t},\n);\n\ninterface IProps\n\textends Omit<\n\t\tVariantProps<typeof eventBadgeVariants>,\n\t\t\"color\" | \"multiDayPosition\"\n\t> {\n\tevent: IEvent;\n\tcellDate: Date;\n\teventCurrentDay?: number;\n\teventTotalDays?: number;\n\tclassName?: string;\n\tposition?: \"first\" | \"middle\" | \"last\" | \"none\";\n}\n\nexport function MonthEventBadge({\n\tevent,\n\tcellDate,\n\teventCurrentDay,\n\teventTotalDays,\n\tclassName,\n\tposition: propPosition,\n}: IProps) {\n\tconst { badgeVariant, use24HourFormat } = useCalendar();\n\n\tconst itemStart = startOfDay(parseISO(event.startDate));\n\tconst itemEnd = endOfDay(parseISO(event.endDate));\n\n\tif (cellDate < itemStart || cellDate > itemEnd) return null;\n\n\tlet position: \"first\" | \"middle\" | \"last\" | \"none\" | undefined;\n\n\tif (propPosition) {\n\t\tposition = propPosition;\n\t} else if (eventCurrentDay && eventTotalDays) {\n\t\tposition = \"none\";\n\t} else if (isSameDay(itemStart, itemEnd)) {\n\t\tposition = \"none\";\n\t} else if (isSameDay(cellDate, itemStart)) {\n\t\tposition = \"first\";\n\t} else if (isSameDay(cellDate, itemEnd)) {\n\t\tposition = \"last\";\n\t} else {\n\t\tposition = \"middle\";\n\t}\n\n\tconst renderBadgeText = [\"first\", \"none\"].includes(position) ;\n\tconst renderBadgeTime =  [\"last\", \"none\"].includes(position);\n\n\tconst color = (\n\t\tbadgeVariant === \"dot\" ? `${event.color}-dot` : event.color\n\t) as VariantProps<typeof eventBadgeVariants>[\"color\"];\n\n\tconst eventBadgeClasses = cn(\n\t\teventBadgeVariants({ color, multiDayPosition: position, className }),\n\t);\n\n\treturn (\n\t\t<DraggableEvent event={event}>\n\t\t\t<EventDetailsDialog event={event}>\n\t\t\t\t<div role=\"button\" tabIndex={0} className={eventBadgeClasses}>\n\t\t\t\t\t<div className=\"flex items-center gap-1.5 truncate\">\n\t\t\t\t\t\t{![\"middle\", \"last\"].includes(position) &&\n\t\t\t\t\t\t\tbadgeVariant === \"dot\" && (\n\t\t\t\t\t\t\t\t<EventBullet color={event.color} />\n\t\t\t\t\t\t\t)}\n\n\t\t\t\t\t\t{renderBadgeText && (\n\t\t\t\t\t\t\t<p className=\"flex-1 truncate font-semibold\">\n\t\t\t\t\t\t\t\t{eventCurrentDay && (\n\t\t\t\t\t\t\t\t\t<span className=\"text-xs\">\n\t\t\t\t\t\t\t\t\t\tDay {eventCurrentDay} of {eventTotalDays} •{\" \"}\n\t\t\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t\t\t{event.title}\n\t\t\t\t\t\t\t</p>\n\t\t\t\t\t\t)}\n\t\t\t\t\t</div>\n\n\t\t\t\t\t<div className=\"hidden sm:block\">\n\t\t\t\t\t\t{renderBadgeTime && (\n\t\t\t\t\t\t\t<span>\n\t\t\t\t\t\t\t{formatTime(new Date(event.startDate), use24HourFormat)}\n\t\t\t\t\t\t</span>\n\t\t\t\t\t\t)}\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t</EventDetailsDialog>\n\t\t</DraggableEvent>\n\t);\n}\n",
      "type": "registry:component"
    },
    {
      "path": "src/modules/components/calendar/views/week-and-day-view/calendar-day-view.tsx",
      "content": "import { format, isWithinInterval, parseISO } from \"date-fns\";\nimport { Calendar, Clock, User } from \"lucide-react\";\nimport { useEffect, useRef } from \"react\";\nimport { DayPicker } from \"@/components/ui/day-picker\";\nimport { ScrollArea } from \"@/components/ui/scroll-area\";\nimport { useCalendar } from \"@/modules/components/calendar/contexts/calendar-context\";\n\nimport { AddEditEventDialog } from \"@/modules/components/calendar/dialogs/add-edit-event-dialog\";\nimport { DroppableArea } from \"@/modules/components/calendar/dnd/droppable-area\";\nimport { groupEvents } from \"@/modules/components/calendar/helpers\";\nimport type { IEvent } from \"@/modules/components/calendar/interfaces\";\nimport { CalendarTimeline } from \"@/modules/components/calendar/views/week-and-day-view/calendar-time-line\";\nimport { DayViewMultiDayEventsRow } from \"@/modules/components/calendar/views/week-and-day-view/day-view-multi-day-events-row\";\nimport { RenderGroupedEvents } from \"@/modules/components/calendar/views/week-and-day-view/render-grouped-events\";\n\ninterface IProps {\n\tsingleDayEvents: IEvent[];\n\tmultiDayEvents: IEvent[];\n}\n\nexport function CalendarDayView({ singleDayEvents, multiDayEvents }: IProps) {\n\tconst { selectedDate, setSelectedDate, users, use24HourFormat } =\n\t\tuseCalendar();\n\tconst scrollAreaRef = useRef<HTMLDivElement>(null);\n\n\tconst hours = Array.from({ length: 24 }, (_, i) => i);\n\n\tuseEffect(() => {\n\t\tconst handleDragOver = (e: DragEvent) => {\n\t\t\tif (!scrollAreaRef.current) return;\n\n\t\t\tconst scrollArea = scrollAreaRef.current;\n\t\t\tconst rect = scrollArea.getBoundingClientRect();\n\t\t\tconst scrollSpeed = 15;\n\n\t\t\tconst scrollContainer =\n\t\t\t\tscrollArea.querySelector(\"[data-radix-scroll-area-viewport]\") ||\n\t\t\t\tscrollArea;\n\n\t\t\tif (e.clientY < rect.top + 60) {\n\t\t\t\tscrollContainer.scrollTop -= scrollSpeed;\n\t\t\t}\n\n\t\t\tif (e.clientY > rect.bottom - 60) {\n\t\t\t\tscrollContainer.scrollTop += scrollSpeed;\n\t\t\t}\n\t\t};\n\n\t\tdocument.addEventListener(\"dragover\", handleDragOver);\n\t\treturn () => {\n\t\t\tdocument.removeEventListener(\"dragover\", handleDragOver);\n\t\t};\n\t}, []);\n\n\tconst getCurrentEvents = (events: IEvent[]) => {\n\t\tconst now = new Date();\n\n\t\treturn (\n\t\t\tevents.filter((event) =>\n\t\t\t\tisWithinInterval(now, {\n\t\t\t\t\tstart: parseISO(event.startDate),\n\t\t\t\t\tend: parseISO(event.endDate),\n\t\t\t\t}),\n\t\t\t) || []\n\t\t);\n\t};\n\n\tconst currentEvents = getCurrentEvents(singleDayEvents);\n\n\tconst dayEvents = singleDayEvents.filter((event) => {\n\t\tconst eventDate = parseISO(event.startDate);\n\t\treturn (\n\t\t\teventDate.getDate() === selectedDate.getDate() &&\n\t\t\teventDate.getMonth() === selectedDate.getMonth() &&\n\t\t\teventDate.getFullYear() === selectedDate.getFullYear()\n\t\t);\n\t});\n\n\tconst groupedEvents = groupEvents(dayEvents);\n\n\treturn (\n\t\t<div className=\"flex\">\n\t\t\t<div className=\"flex flex-1 flex-col\">\n\t\t\t\t<div>\n\t\t\t\t\t<DayViewMultiDayEventsRow\n\t\t\t\t\t\tselectedDate={selectedDate}\n\t\t\t\t\t\tmultiDayEvents={multiDayEvents}\n\t\t\t\t\t/>\n\n\t\t\t\t\t{/* Day header */}\n\t\t\t\t\t<div className=\"relative z-20 flex border-b\">\n\t\t\t\t\t\t<div className=\"w-18\"></div>\n\t\t\t\t\t\t<span className=\"flex-1 border-l py-2 text-center text-xs font-medium text-t-quaternary\">\n\t\t\t\t\t\t\t{format(selectedDate, \"EE\")}{\" \"}\n\t\t\t\t\t\t\t<span className=\"font-semibold text-t-secondary\">\n\t\t\t\t\t\t\t\t{format(selectedDate, \"d\")}\n\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t</span>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\n\t\t\t\t<ScrollArea className=\"h-[800px]\" type=\"always\" ref={scrollAreaRef}>\n\t\t\t\t\t<div className=\"flex\">\n\t\t\t\t\t\t{/* Hours column */}\n\t\t\t\t\t\t<div className=\"relative w-18\">\n\t\t\t\t\t\t\t{hours.map((hour, index) => (\n\t\t\t\t\t\t\t\t<div key={hour} className=\"relative\" style={{ height: \"96px\" }}>\n\t\t\t\t\t\t\t\t\t<div className=\"absolute -top-3 right-2 flex h-6 items-center\">\n\t\t\t\t\t\t\t\t\t\t{index !== 0 && (\n\t\t\t\t\t\t\t\t\t\t\t<span className=\"text-xs text-t-quaternary\">\n\t\t\t\t\t\t\t\t\t\t\t\t{format(\n\t\t\t\t\t\t\t\t\t\t\t\t\tnew Date().setHours(hour, 0, 0, 0),\n\t\t\t\t\t\t\t\t\t\t\t\t\tuse24HourFormat ? \"HH:00\" : \"h a\",\n\t\t\t\t\t\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t))}\n\t\t\t\t\t\t</div>\n\n\t\t\t\t\t\t{/* Day grid */}\n\t\t\t\t\t\t<div className=\"relative flex-1 border-l\">\n\t\t\t\t\t\t\t<div className=\"relative\">\n\t\t\t\t\t\t\t\t{hours.map((hour, index) => (\n\t\t\t\t\t\t\t\t\t<div\n\t\t\t\t\t\t\t\t\t\tkey={hour}\n\t\t\t\t\t\t\t\t\t\tclassName=\"relative\"\n\t\t\t\t\t\t\t\t\t\tstyle={{ height: \"96px\" }}\n\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\t{index !== 0 && (\n\t\t\t\t\t\t\t\t\t\t\t<div className=\"pointer-events-none absolute inset-x-0 top-0 border-b\"></div>\n\t\t\t\t\t\t\t\t\t\t)}\n\n\t\t\t\t\t\t\t\t\t\t<DroppableArea\n\t\t\t\t\t\t\t\t\t\t\tdate={selectedDate}\n\t\t\t\t\t\t\t\t\t\t\thour={hour}\n\t\t\t\t\t\t\t\t\t\t\tminute={0}\n\t\t\t\t\t\t\t\t\t\t\tclassName=\"absolute inset-x-0 top-0 h-[48px]\"\n\t\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\t\t<AddEditEventDialog\n\t\t\t\t\t\t\t\t\t\t\t\tstartDate={selectedDate}\n\t\t\t\t\t\t\t\t\t\t\t\tstartTime={{ hour, minute: 0 }}\n\t\t\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\t\t\t<div className=\"absolute inset-0 cursor-pointer transition-colors hover:bg-secondary\" />\n\t\t\t\t\t\t\t\t\t\t\t</AddEditEventDialog>\n\t\t\t\t\t\t\t\t\t\t</DroppableArea>\n\n\t\t\t\t\t\t\t\t\t\t<div className=\"pointer-events-none absolute inset-x-0 top-1/2 border-b border-dashed border-b-tertiary\"></div>\n\n\t\t\t\t\t\t\t\t\t\t<DroppableArea\n\t\t\t\t\t\t\t\t\t\t\tdate={selectedDate}\n\t\t\t\t\t\t\t\t\t\t\thour={hour}\n\t\t\t\t\t\t\t\t\t\t\tminute={30}\n\t\t\t\t\t\t\t\t\t\t\tclassName=\"absolute inset-x-0 bottom-0 h-[48px]\"\n\t\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\t\t<AddEditEventDialog\n\t\t\t\t\t\t\t\t\t\t\t\tstartDate={selectedDate}\n\t\t\t\t\t\t\t\t\t\t\t\tstartTime={{ hour, minute: 30 }}\n\t\t\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\t\t\t<div className=\"absolute inset-0 cursor-pointer transition-colors hover:bg-secondary\" />\n\t\t\t\t\t\t\t\t\t\t\t</AddEditEventDialog>\n\t\t\t\t\t\t\t\t\t\t</DroppableArea>\n\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t))}\n\n\t\t\t\t\t\t\t\t<RenderGroupedEvents\n\t\t\t\t\t\t\t\t\tgroupedEvents={groupedEvents}\n\t\t\t\t\t\t\t\t\tday={selectedDate}\n\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t</div>\n\n\t\t\t\t\t\t\t<CalendarTimeline />\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t</ScrollArea>\n\t\t\t</div>\n\n\t\t\t<div className=\"hidden w-72 divide-y border-l md:block\">\n\t\t\t\t<DayPicker\n\t\t\t\t\tclassName=\"mx-auto w-fit\"\n\t\t\t\t\tmode=\"single\"\n\t\t\t\t\tselected={selectedDate}\n\t\t\t\t\tonSelect={(date) => date && setSelectedDate(date)}\n\t\t\t\t\tinitialFocus\n\t\t\t\t/>\n\n\t\t\t\t<div className=\"flex-1 space-y-3\">\n\t\t\t\t\t{currentEvents.length > 0 ? (\n\t\t\t\t\t\t<div className=\"flex items-start gap-2 px-4 pt-4\">\n\t\t\t\t\t\t\t<span className=\"relative mt-[5px] flex size-2.5\">\n\t\t\t\t\t\t\t\t<span className=\"absolute inline-flex size-full animate-ping rounded-full bg-green-400 opacity-75\"></span>\n\t\t\t\t\t\t\t\t<span className=\"relative inline-flex size-2.5 rounded-full bg-green-600\"></span>\n\t\t\t\t\t\t\t</span>\n\n\t\t\t\t\t\t\t<p className=\"text-sm font-semibold text-t-secondary\">\n\t\t\t\t\t\t\t\tHappening now\n\t\t\t\t\t\t\t</p>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t) : (\n\t\t\t\t\t\t<p className=\"p-4 text-center text-sm italic text-t-tertiary\">\n\t\t\t\t\t\t\tNo appointments or consultations at the moment\n\t\t\t\t\t\t</p>\n\t\t\t\t\t)}\n\n\t\t\t\t\t{currentEvents.length > 0 && (\n\t\t\t\t\t\t<ScrollArea className=\"h-[422px] px-4\" type=\"always\">\n\t\t\t\t\t\t\t<div className=\"space-y-6 pb-4\">\n\t\t\t\t\t\t\t\t{currentEvents.map((event) => {\n\t\t\t\t\t\t\t\t\tconst user = users.find((user) => user.id === event.user.id);\n\n\t\t\t\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t\t\t\t<div key={event.id} className=\"space-y-1.5\">\n\t\t\t\t\t\t\t\t\t\t\t<p className=\"line-clamp-2 text-sm font-semibold\">\n\t\t\t\t\t\t\t\t\t\t\t\t{event.title}\n\t\t\t\t\t\t\t\t\t\t\t</p>\n\n\t\t\t\t\t\t\t\t\t\t\t{user && (\n\t\t\t\t\t\t\t\t\t\t\t\t<div className=\"flex items-center gap-1.5\">\n\t\t\t\t\t\t\t\t\t\t\t\t\t<User className=\"size-4 text-t-quinary\" />\n\t\t\t\t\t\t\t\t\t\t\t\t\t<span className=\"text-sm text-t-tertiary\">\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t{user.name}\n\t\t\t\t\t\t\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t\t)}\n\n\t\t\t\t\t\t\t\t\t\t\t<div className=\"flex items-center gap-1.5\">\n\t\t\t\t\t\t\t\t\t\t\t\t<Calendar className=\"size-4 text-t-quinary\" />\n\t\t\t\t\t\t\t\t\t\t\t\t<span className=\"text-sm text-t-tertiary\">\n\t\t\t\t\t\t\t\t\t\t\t\t\t{format(new Date(event.startDate), \"MMM d, yyyy\")}\n\t\t\t\t\t\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t\t\t\t\t\t</div>\n\n\t\t\t\t\t\t\t\t\t\t\t<div className=\"flex items-center gap-1.5\">\n\t\t\t\t\t\t\t\t\t\t\t\t<Clock className=\"size-4 text-t-quinary\" />\n\t\t\t\t\t\t\t\t\t\t\t\t<span className=\"text-sm text-t-tertiary\">\n\t\t\t\t\t\t\t\t\t\t\t\t\t{format(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tparseISO(event.startDate),\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tuse24HourFormat ? \"HH:mm\" : \"hh:mm a\",\n\t\t\t\t\t\t\t\t\t\t\t\t\t)}{\" \"}\n\t\t\t\t\t\t\t\t\t\t\t\t\t-\n\t\t\t\t\t\t\t\t\t\t\t\t\t{format(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tparseISO(event.endDate),\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tuse24HourFormat ? \"HH:mm\" : \"hh:mm a\",\n\t\t\t\t\t\t\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t})}\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</ScrollArea>\n\t\t\t\t\t)}\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</div>\n\t);\n}\n",
      "type": "registry:component"
    },
    {
      "path": "src/modules/components/calendar/views/week-and-day-view/calendar-time-line.tsx",
      "content": "import { useEffect, useState } from \"react\";\nimport { useCalendar } from \"@/modules/components/calendar/contexts/calendar-context\";\nimport { formatTime } from \"@/modules/components/calendar/helpers\";\n\nexport function CalendarTimeline() {\n\tconst { use24HourFormat } = useCalendar();\n\tconst [currentTime, setCurrentTime] = useState(new Date());\n\n\tuseEffect(() => {\n\t\tconst timer = setInterval(() => setCurrentTime(new Date()), 60 * 1000);\n\t\treturn () => clearInterval(timer);\n\t}, []);\n\n\tconst getCurrentTimePosition = () => {\n\t\tconst minutes = currentTime.getHours() * 60 + currentTime.getMinutes();\n\t\treturn (minutes / 1440) * 100;\n\t};\n\n\tconst formatCurrentTime = () => {\n\t\treturn formatTime(currentTime, use24HourFormat);\n\t};\n\n\treturn (\n\t\t<div\n\t\t\tclassName=\"pointer-events-none absolute inset-x-0 z-50 border-t border-primary\"\n\t\t\tstyle={{ top: `${getCurrentTimePosition()}%` }}\n\t\t>\n\t\t\t<div className=\"absolute -left-1.5 -top-1.5 size-3 rounded-full bg-primary\"></div>\n\n\t\t\t<div className=\"absolute -left-18 flex w-16 -translate-y-1/2 justify-end bg-background pr-1 text-xs font-medium text-primary\">\n\t\t\t\t{formatCurrentTime()}\n\t\t\t</div>\n\t\t</div>\n\t);\n}\n",
      "type": "registry:component"
    },
    {
      "path": "src/modules/components/calendar/views/week-and-day-view/calendar-week-view.tsx",
      "content": "import {addDays, format, isSameDay, parseISO, startOfWeek} from \"date-fns\";\nimport {motion} from \"framer-motion\";\nimport {ScrollArea} from \"@/components/ui/scroll-area\";\nimport {\n    fadeIn,\n    staggerContainer,\n    transition,\n} from \"@/modules/components/calendar/animations\";\nimport {useCalendar} from \"@/modules/components/calendar/contexts/calendar-context\";\nimport {AddEditEventDialog} from \"@/modules/components/calendar/dialogs/add-edit-event-dialog\";\nimport {DroppableArea} from \"@/modules/components/calendar/dnd/droppable-area\";\nimport {groupEvents} from \"@/modules/components/calendar/helpers\";\nimport type {IEvent} from \"@/modules/components/calendar/interfaces\";\nimport {CalendarTimeline} from \"@/modules/components/calendar/views/week-and-day-view/calendar-time-line\";\nimport {RenderGroupedEvents} from \"@/modules/components/calendar/views/week-and-day-view/render-grouped-events\";\nimport {\n    WeekViewMultiDayEventsRow\n} from \"@/modules/components/calendar/views/week-and-day-view/week-view-multi-day-events-row\";\nimport {AlertCircleIcon} from 'lucide-react'\n\ninterface IProps {\n    singleDayEvents: IEvent[];\n    multiDayEvents: IEvent[];\n}\n\nexport function CalendarWeekView({singleDayEvents, multiDayEvents}: IProps) {\n    const {selectedDate, use24HourFormat} = useCalendar();\n\n    const weekStart = startOfWeek(selectedDate);\n    const weekDays = Array.from({length: 7}, (_, i) => addDays(weekStart, i));\n    const hours = Array.from({length: 24}, (_, i) => i);\n\n    return (\n        <motion.div\n            initial=\"initial\"\n            animate=\"animate\"\n            exit=\"exit\"\n            variants={fadeIn}\n            transition={transition}\n        >\n            <motion.div\n                className=\"flex flex-col items-center justify-center border-b p-4 text-sm sm:hidden\"\n                initial={{opacity: 0, y: -20}}\n                animate={{opacity: 1, y: 0}}\n                transition={transition}\n            >\n                <p>Weekly view is not recommended on smaller devices.</p>\n                <p>Please switch to a desktop device or use the daily view instead.</p>\n            </motion.div>\n\n            <motion.div\n                className=\"flex-col sm:flex\"\n                variants={staggerContainer}\n            >\n                <div>\n                    <WeekViewMultiDayEventsRow\n                        selectedDate={selectedDate}\n                        multiDayEvents={multiDayEvents}\n                    />\n\n                    {/* Week header */}\n                    <motion.div\n                        className=\"relative z-20 flex border-b\"\n                        initial={{opacity: 0, y: -20}}\n                        animate={{opacity: 1, y: 0}}\n                        transition={transition}\n                    >\n                        {/* Time column header - responsive width */}\n                        <div className=\"w-18\"></div>\n                        <div className=\"grid flex-1 grid-cols-7  border-l\">\n                            {weekDays.map((day, index) => (\n                                <motion.span\n                                    key={index}\n                                    className=\"py-1 sm:py-2 text-center text-xs font-medium text-t-quaternary\"\n                                    initial={{opacity: 0, y: -10}}\n                                    animate={{opacity: 1, y: 0}}\n                                    transition={{delay: index * 0.05, ...transition}}\n                                >\n                                    {/* Mobile: Show only day abbreviation and number */}\n                                    <span className=\"block sm:hidden\">\n\t\t\t\t\t\t\t\t\t{format(day, \"EEE\").charAt(0)}\n                                        <span className=\"block font-semibold text-t-secondary text-xs\">\n\t\t\t\t\t\t\t\t\t\t{format(day, \"d\")}\n\t\t\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t\t\t</span>\n                                    {/* Desktop: Show full format */}\n                                    <span className=\"hidden sm:inline\">\n\t\t\t\t\t\t\t\t\t{format(day, \"EE\")}{\" \"}\n                                        <span className=\"ml-1 font-semibold text-t-secondary\">\n\t\t\t\t\t\t\t\t\t\t{format(day, \"d\")}\n\t\t\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t\t\t</span>\n                                </motion.span>\n                            ))}\n                        </div>\n                    </motion.div>\n\n                </div>\n\n                <ScrollArea className=\"h-[736px]\" type=\"always\">\n                    <div className=\"flex\">\n                        {/* Hours column */}\n                        <motion.div className=\"relative w-18\" variants={staggerContainer}>\n                            {hours.map((hour, index) => (\n                                <motion.div\n                                    key={hour}\n                                    className=\"relative\"\n                                    style={{height: \"96px\"}}\n                                    initial={{opacity: 0, x: -20}}\n                                    animate={{opacity: 1, x: 0}}\n                                    transition={{delay: index * 0.02, ...transition}}\n                                >\n                                    <div className=\"absolute -top-3 right-2 flex h-6 items-center\">\n                                        {index !== 0 && (\n                                            <span className=\"text-xs text-t-quaternary\">\n\t\t\t\t\t\t\t\t\t\t\t\t{format(\n                                                    new Date().setHours(hour, 0, 0, 0),\n                                                    use24HourFormat ? \"HH:00\" : \"h a\",\n                                                )}\n\t\t\t\t\t\t\t\t\t\t\t</span>\n                                        )}\n                                    </div>\n                                </motion.div>\n                            ))}\n                        </motion.div>\n\n                        {/* Week grid */}\n                        <motion.div\n                            className=\"relative flex-1 border-l\"\n                            variants={staggerContainer}\n                        >\n                            <div className=\"grid grid-cols-7 divide-x\">\n                                {weekDays.map((day, dayIndex) => {\n                                    const dayEvents = singleDayEvents.filter(\n                                        (event) =>\n                                            isSameDay(parseISO(event.startDate), day) ||\n                                            isSameDay(parseISO(event.endDate), day),\n                                    );\n                                    const groupedEvents = groupEvents(dayEvents);\n\n                                    return (\n                                        <motion.div\n                                            key={dayIndex}\n                                            className=\"relative\"\n                                            initial={{opacity: 0}}\n                                            animate={{opacity: 1}}\n                                            transition={{delay: dayIndex * 0.1, ...transition}}\n                                        >\n                                            {hours.map((hour, index) => (\n                                                <motion.div\n                                                    key={hour}\n                                                    className=\"relative\"\n                                                    style={{height: \"96px\"}}\n                                                    initial={{opacity: 0}}\n                                                    animate={{opacity: 1}}\n                                                    transition={{delay: index * 0.01, ...transition}}\n                                                >\n                                                    {index !== 0 && (\n                                                        <div\n                                                            className=\"pointer-events-none absolute inset-x-0 top-0 border-b\"></div>\n                                                    )}\n\n                                                    <DroppableArea\n                                                        date={day}\n                                                        hour={hour}\n                                                        minute={0}\n                                                        className=\"absolute inset-x-0 top-0  h-[48px]\"\n                                                    >\n                                                        <AddEditEventDialog\n                                                            startDate={day}\n                                                            startTime={{hour, minute: 0}}\n                                                        >\n                                                            <div\n                                                                className=\"absolute inset-0 cursor-pointer transition-colors hover:bg-secondary\"/>\n                                                        </AddEditEventDialog>\n                                                    </DroppableArea>\n\n                                                    <div\n                                                        className=\"pointer-events-none absolute inset-x-0 top-1/2 border-b border-dashed border-b-tertiary\"></div>\n\n                                                    <DroppableArea\n                                                        date={day}\n                                                        hour={hour}\n                                                        minute={30}\n                                                        className=\"absolute inset-x-0 bottom-0 h-[48px]\"\n                                                    >\n                                                        <AddEditEventDialog\n                                                            startDate={day}\n                                                            startTime={{hour, minute: 30}}\n                                                        >\n                                                            <div\n                                                                className=\"absolute inset-0 cursor-pointer transition-colors hover:bg-secondary\"/>\n                                                        </AddEditEventDialog>\n                                                    </DroppableArea>\n                                                </motion.div>\n                                            ))}\n\n                                            <RenderGroupedEvents\n                                                groupedEvents={groupedEvents}\n                                                day={day}\n                                            />\n                                        </motion.div>\n                                    );\n                                })}\n                            </div>\n\n                            <CalendarTimeline/>\n                        </motion.div>\n                    </div>\n                </ScrollArea>\n            </motion.div>\n        </motion.div>\n    );\n}\n\n\n",
      "type": "registry:component"
    },
    {
      "path": "src/modules/components/calendar/views/week-and-day-view/day-view-multi-day-events-row.tsx",
      "content": "import {\n\tdifferenceInDays,\n\tendOfDay,\n\tisWithinInterval,\n\tparseISO,\n\tstartOfDay,\n} from \"date-fns\";\nimport type { IEvent } from \"@/modules/components/calendar/interfaces\";\nimport { MonthEventBadge } from \"@/modules/components/calendar/views/month-view/month-event-badge\";\n\ninterface IProps {\n\tselectedDate: Date;\n\tmultiDayEvents: IEvent[];\n}\n\nexport function DayViewMultiDayEventsRow({\n\tselectedDate,\n\tmultiDayEvents,\n}: IProps) {\n\tconst dayStart = startOfDay(selectedDate);\n\tconst dayEnd = endOfDay(selectedDate);\n\n\tconst multiDayEventsInDay = multiDayEvents\n\t\t.filter((event) => {\n\t\t\tconst eventStart = parseISO(event.startDate);\n\t\t\tconst eventEnd = parseISO(event.endDate);\n\n\t\t\treturn (\n\t\t\t\tisWithinInterval(dayStart, { start: eventStart, end: eventEnd }) ||\n\t\t\t\tisWithinInterval(dayEnd, { start: eventStart, end: eventEnd }) ||\n\t\t\t\t(eventStart <= dayStart && eventEnd >= dayEnd)\n\t\t\t);\n\t\t})\n\t\t.sort((a, b) => {\n\t\t\tconst durationA = differenceInDays(\n\t\t\t\tparseISO(a.endDate),\n\t\t\t\tparseISO(a.startDate),\n\t\t\t);\n\t\t\tconst durationB = differenceInDays(\n\t\t\t\tparseISO(b.endDate),\n\t\t\t\tparseISO(b.startDate),\n\t\t\t);\n\t\t\treturn durationB - durationA;\n\t\t});\n\n\tif (multiDayEventsInDay.length === 0) return null;\n\n\treturn (\n\t\t<div className=\"flex border-b\">\n\t\t\t<div className=\"w-18\"></div>\n\t\t\t<div className=\"flex flex-1 flex-col gap-1 border-l py-1\">\n\t\t\t\t{multiDayEventsInDay.map((event) => {\n\t\t\t\t\tconst eventStart = startOfDay(parseISO(event.startDate));\n\t\t\t\t\tconst eventEnd = startOfDay(parseISO(event.endDate));\n\t\t\t\t\tconst currentDate = startOfDay(selectedDate);\n\n\t\t\t\t\tconst eventTotalDays = differenceInDays(eventEnd, eventStart) + 1;\n\t\t\t\t\tconst eventCurrentDay = differenceInDays(currentDate, eventStart) + 1;\n\n\t\t\t\t\treturn (\n\t\t\t\t\t\t<MonthEventBadge\n\t\t\t\t\t\t\tkey={event.id}\n\t\t\t\t\t\t\tevent={event}\n\t\t\t\t\t\t\tcellDate={selectedDate}\n\t\t\t\t\t\t\teventCurrentDay={eventCurrentDay}\n\t\t\t\t\t\t\teventTotalDays={eventTotalDays}\n\t\t\t\t\t\t/>\n\t\t\t\t\t);\n\t\t\t\t})}\n\t\t\t</div>\n\t\t</div>\n\t);\n}\n",
      "type": "registry:component"
    },
    {
      "path": "src/modules/components/calendar/views/week-and-day-view/event-block.tsx",
      "content": "import type { VariantProps } from \"class-variance-authority\";\nimport { cva } from \"class-variance-authority\";\nimport { differenceInMinutes, parseISO } from \"date-fns\";\nimport type { HTMLAttributes } from \"react\";\nimport { cn } from \"@/lib/utils\";\nimport { useCalendar } from \"@/modules/components/calendar/contexts/calendar-context\";\nimport { EventDetailsDialog } from \"@/modules/components/calendar/dialogs/event-details-dialog\";\nimport { DraggableEvent } from \"@/modules/components/calendar/dnd/draggable-event\";\nimport { ResizableEvent } from \"@/modules/components/calendar/dnd/resizable-event\";\nimport { formatTime } from \"@/modules/components/calendar/helpers\";\nimport type { IEvent } from \"@/modules/components/calendar/interfaces\";\n\nconst calendarWeekEventCardVariants = cva(\n\t\"flex select-none flex-col gap-0.5 truncate whitespace-nowrap rounded-md border px-2 py-1.5 text-xs focus-visible:outline-offset-2\",\n\t{\n\t\tvariants: {\n\t\t\tcolor: {\n\t\t\t\t// Colored variants\n\t\t\t\tblue: \"border-blue-200 bg-blue-100/50 text-blue-700 hover:bg-blue-100 dark:border-blue-800 dark:bg-blue-950/50 dark:text-blue-300 dark:hover:bg-blue-950\",\n\t\t\t\tgreen:\n\t\t\t\t\t\"border-green-200 bg-green-100/50 text-green-700 hover:bg-green-100 dark:border-green-800 dark:bg-green-950/50 dark:text-green-300 dark:hover:bg-green-950\",\n\t\t\t\tred: \"border-red-200 bg-red-100/50 text-red-700 hover:bg-red-100 dark:border-red-800 dark:bg-red-950/50 dark:text-red-300 dark:hover:bg-red-950\",\n\t\t\t\tyellow:\n\t\t\t\t\t\"border-yellow-200 bg-yellow-100/50 text-yellow-700 hover:bg-yellow-100 dark:border-yellow-800 dark:bg-yellow-950/50 dark:text-yellow-300 dark:hover:bg-yellow-950\",\n\t\t\t\tpurple:\n\t\t\t\t\t\"border-purple-200 bg-purple-100/50 text-purple-700 hover:bg-purple-100 dark:border-purple-800 dark:bg-purple-950/50 dark:text-purple-300 dark:hover:bg-purple-950\",\n\t\t\t\torange:\n\t\t\t\t\t\"border-orange-200 bg-orange-100/50 text-orange-700 hover:bg-orange-100 dark:border-orange-800 dark:bg-orange-950/50 dark:text-orange-300 dark:hover:bg-orange-950\",\n\n\t\t\t\t// Dot variants\n\t\t\t\t\"blue-dot\":\n\t\t\t\t\t\"border-border bg-card text-foreground hover:bg-accent [&_svg]:fill-blue-600 dark:[&_svg]:fill-blue-500\",\n\t\t\t\t\"green-dot\":\n\t\t\t\t\t\"border-border bg-card text-foreground hover:bg-accent [&_svg]:fill-green-600 dark:[&_svg]:fill-green-500\",\n\t\t\t\t\"red-dot\":\n\t\t\t\t\t\"border-border bg-card text-foreground hover:bg-accent [&_svg]:fill-red-600 dark:[&_svg]:fill-red-500\",\n\t\t\t\t\"orange-dot\":\n\t\t\t\t\t\"border-border bg-card text-foreground hover:bg-accent [&_svg]:fill-orange-600 dark:[&_svg]:fill-orange-500\",\n\t\t\t\t\"purple-dot\":\n\t\t\t\t\t\"border-border bg-card text-foreground hover:bg-accent [&_svg]:fill-purple-600 dark:[&_svg]:fill-purple-500\",\n\t\t\t\t\"yellow-dot\":\n\t\t\t\t\t\"border-border bg-card text-foreground hover:bg-accent [&_svg]:fill-yellow-600 dark:[&_svg]:fill-yellow-500\",\n\t\t\t},\n\t\t},\n\t\tdefaultVariants: {\n\t\t\tcolor: \"blue-dot\",\n\t\t},\n\t},\n);\n\ninterface IProps\n\textends HTMLAttributes<HTMLDivElement>,\n\t\tOmit<VariantProps<typeof calendarWeekEventCardVariants>, \"color\"> {\n\tevent: IEvent;\n}\n\nexport function EventBlock({ event, className }: IProps) {\n\tconst { badgeVariant, use24HourFormat } = useCalendar();\n\n\tconst start = parseISO(event.startDate);\n\tconst end = parseISO(event.endDate);\n\tconst durationInMinutes = differenceInMinutes(end, start);\n\tconst heightInPixels = (durationInMinutes / 60) * 96 - 8;\n\n\tconst color = (\n\t\tbadgeVariant === \"dot\" ? `${event.color}-dot` : event.color\n\t) as VariantProps<typeof calendarWeekEventCardVariants>[\"color\"];\n\n\tconst calendarWeekEventCardClasses = cn(\n\t\tcalendarWeekEventCardVariants({ color, className }),\n\t\tdurationInMinutes < 35 && \"py-0 justify-center\",\n\t);\n\n\treturn (\n\t\t<ResizableEvent event={event}>\n\t\t\t<DraggableEvent event={event}>\n\t\t\t\t<EventDetailsDialog event={event}>\n\t\t\t\t\t<div\n\t\t\t\t\t\trole=\"button\"\n\t\t\t\t\t\ttabIndex={0}\n\t\t\t\t\t\tclassName={calendarWeekEventCardClasses}\n\t\t\t\t\t\tstyle={{ height: `${heightInPixels}px` }}\n\t\t\t\t\t>\n\t\t\t\t\t\t<div className=\"flex items-center gap-1.5 truncate\">\n\t\t\t\t\t\t\t{badgeVariant === \"dot\" && (\n\t\t\t\t\t\t\t\t<svg\n\t\t\t\t\t\t\t\t\twidth=\"8\"\n\t\t\t\t\t\t\t\t\theight=\"8\"\n\t\t\t\t\t\t\t\t\tviewBox=\"0 0 8 8\"\n\t\t\t\t\t\t\t\t\tclassName=\"shrink-0\"\n\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t<circle cx=\"4\" cy=\"4\" r=\"4\" />\n\t\t\t\t\t\t\t\t</svg>\n\t\t\t\t\t\t\t)}\n\n\t\t\t\t\t\t\t<p className=\"truncate font-semibold\">{event.title}</p>\n\t\t\t\t\t\t</div>\n\n\t\t\t\t\t\t{durationInMinutes > 25 && (\n\t\t\t\t\t\t\t<p>\n\t\t\t\t\t\t\t\t{formatTime(start, use24HourFormat)} -{\" \"}\n\t\t\t\t\t\t\t\t{formatTime(end, use24HourFormat)}\n\t\t\t\t\t\t\t</p>\n\t\t\t\t\t\t)}\n\t\t\t\t\t</div>\n\t\t\t\t</EventDetailsDialog>\n\t\t\t</DraggableEvent>\n\t\t</ResizableEvent>\n\t);\n}\n",
      "type": "registry:component"
    },
    {
      "path": "src/modules/components/calendar/views/week-and-day-view/render-grouped-events.tsx",
      "content": "import { areIntervalsOverlapping, parseISO } from \"date-fns\";\nimport { getEventBlockStyle } from \"@/modules/components/calendar/helpers\";\nimport type { IEvent } from \"@/modules/components/calendar/interfaces\";\nimport { EventBlock } from \"@/modules/components/calendar/views/week-and-day-view/event-block\";\n\ninterface RenderGroupedEventsProps {\n\tgroupedEvents: IEvent[][];\n\tday: Date;\n}\n\nexport function RenderGroupedEvents({\n\tgroupedEvents,\n\tday,\n}: RenderGroupedEventsProps) {\n\treturn groupedEvents.map((group, groupIndex) =>\n\t\tgroup.map((event) => {\n\t\t\tlet style = getEventBlockStyle(\n\t\t\t\tevent,\n\t\t\t\tday,\n\t\t\t\tgroupIndex,\n\t\t\t\tgroupedEvents.length,\n\t\t\t);\n\t\t\tconst hasOverlap = groupedEvents.some(\n\t\t\t\t(otherGroup, otherIndex) =>\n\t\t\t\t\totherIndex !== groupIndex &&\n\t\t\t\t\totherGroup.some((otherEvent) =>\n\t\t\t\t\t\tareIntervalsOverlapping(\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tstart: parseISO(event.startDate),\n\t\t\t\t\t\t\t\tend: parseISO(event.endDate),\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tstart: parseISO(otherEvent.startDate),\n\t\t\t\t\t\t\t\tend: parseISO(otherEvent.endDate),\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t),\n\t\t\t\t\t),\n\t\t\t);\n\n\t\t\tif (!hasOverlap) style = { ...style, width: \"100%\", left: \"0%\" };\n\n\t\t\treturn (\n\t\t\t\t<div key={event.id} className=\"absolute p-1\" style={style}>\n\t\t\t\t\t<EventBlock event={event} />\n\t\t\t\t</div>\n\t\t\t);\n\t\t}),\n\t);\n}\n",
      "type": "registry:component"
    },
    {
      "path": "src/modules/components/calendar/views/week-and-day-view/week-view-multi-day-events-row.tsx",
      "content": "import {\n\taddDays,\n\tdifferenceInDays,\n\tendOfWeek,\n\tisAfter,\n\tisBefore,\n\tparseISO,\n\tstartOfDay,\n\tstartOfWeek,\n} from \"date-fns\";\nimport { useMemo } from \"react\";\nimport type { IEvent } from \"@/modules/components/calendar/interfaces\";\nimport { MonthEventBadge } from \"@/modules/components/calendar/views/month-view/month-event-badge\";\n\ninterface IProps {\n\tselectedDate: Date;\n\tmultiDayEvents: IEvent[];\n}\n\nexport function WeekViewMultiDayEventsRow({\n\tselectedDate,\n\tmultiDayEvents,\n}: IProps) {\n\tconst weekStart = startOfWeek(selectedDate);\n\tconst weekEnd = endOfWeek(selectedDate);\n\tconst weekDays = Array.from({ length: 7 }, (_, i) => addDays(weekStart, i));\n\n\tconst processedEvents = useMemo(() => {\n\t\treturn multiDayEvents\n\t\t\t.map((event) => {\n\t\t\t\tconst start = parseISO(event.startDate);\n\t\t\t\tconst end = parseISO(event.endDate);\n\t\t\t\tconst adjustedStart = isBefore(start, weekStart) ? weekStart : start;\n\t\t\t\tconst adjustedEnd = isAfter(end, weekEnd) ? weekEnd : end;\n\t\t\t\tconst startIndex = differenceInDays(adjustedStart, weekStart);\n\t\t\t\tconst endIndex = differenceInDays(adjustedEnd, weekStart);\n\n\t\t\t\treturn {\n\t\t\t\t\t...event,\n\t\t\t\t\tadjustedStart,\n\t\t\t\t\tadjustedEnd,\n\t\t\t\t\tstartIndex,\n\t\t\t\t\tendIndex,\n\t\t\t\t};\n\t\t\t})\n\t\t\t.sort((a, b) => {\n\t\t\t\tconst startDiff = a.adjustedStart.getTime() - b.adjustedStart.getTime();\n\t\t\t\tif (startDiff !== 0) return startDiff;\n\t\t\t\treturn b.endIndex - b.startIndex - (a.endIndex - a.startIndex);\n\t\t\t});\n\t}, [multiDayEvents, weekStart, weekEnd]);\n\n\tconst eventRows = useMemo(() => {\n\t\tconst rows: (typeof processedEvents)[] = [];\n\n\t\tprocessedEvents.forEach((event) => {\n\t\t\tlet rowIndex = rows.findIndex((row) =>\n\t\t\t\trow.every(\n\t\t\t\t\t(e) => e.endIndex < event.startIndex || e.startIndex > event.endIndex,\n\t\t\t\t),\n\t\t\t);\n\n\t\t\tif (rowIndex === -1) {\n\t\t\t\trowIndex = rows.length;\n\t\t\t\trows.push([]);\n\t\t\t}\n\n\t\t\trows[rowIndex].push(event);\n\t\t});\n\n\t\treturn rows;\n\t}, [processedEvents]);\n\n\tconst hasEventsInWeek = useMemo(() => {\n\t\treturn multiDayEvents.some((event) => {\n\t\t\tconst start = parseISO(event.startDate);\n\t\t\tconst end = parseISO(event.endDate);\n\n\t\t\treturn (\n\t\t\t\t// Event starts within the week\n\t\t\t\t(start >= weekStart && start <= weekEnd) ||\n\t\t\t\t// Event ends within the week\n\t\t\t\t(end >= weekStart && end <= weekEnd) ||\n\t\t\t\t// Event spans the entire week\n\t\t\t\t(start <= weekStart && end >= weekEnd)\n\t\t\t);\n\t\t});\n\t}, [multiDayEvents, weekStart, weekEnd]);\n\n\tif (!hasEventsInWeek) {\n\t\treturn null;\n\t}\n\n\treturn (\n\t\t<div className=\"overflow-hidden flex\">\n\t\t\t<div className=\"w-18 border-b\"></div>\n\t\t\t<div className=\"grid flex-1 grid-cols-7 divide-x border-b border-l\">\n\t\t\t\t{weekDays.map((day, dayIndex) => (\n\t\t\t\t\t<div\n\t\t\t\t\t\tkey={day.toISOString()}\n\t\t\t\t\t\tclassName=\"flex h-full flex-col gap-1 py-1\"\n\t\t\t\t\t>\n\t\t\t\t\t\t{eventRows.map((row, rowIndex) => {\n\t\t\t\t\t\t\tconst event = row.find(\n\t\t\t\t\t\t\t\t(e) => e.startIndex <= dayIndex && e.endIndex >= dayIndex,\n\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\t\tif (!event) {\n\t\t\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t\t\t<div key={`${rowIndex}-${dayIndex}`} className=\"h-6.5\" />\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tlet position: \"first\" | \"middle\" | \"last\" | \"none\" = \"none\";\n\n\t\t\t\t\t\t\tif (\n\t\t\t\t\t\t\t\tdayIndex === event.startIndex &&\n\t\t\t\t\t\t\t\tdayIndex === event.endIndex\n\t\t\t\t\t\t\t) {\n\t\t\t\t\t\t\t\tposition = \"none\";\n\t\t\t\t\t\t\t} else if (dayIndex === event.startIndex) {\n\t\t\t\t\t\t\t\tposition = \"first\";\n\t\t\t\t\t\t\t} else if (dayIndex === event.endIndex) {\n\t\t\t\t\t\t\t\tposition = \"last\";\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tposition = \"middle\";\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t\t<MonthEventBadge\n\t\t\t\t\t\t\t\t\tkey={`${event.id}-${dayIndex}`}\n\t\t\t\t\t\t\t\t\tevent={event}\n\t\t\t\t\t\t\t\t\tcellDate={startOfDay(day)}\n\t\t\t\t\t\t\t\t\tposition={position}\n\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t})}\n\t\t\t\t\t</div>\n\t\t\t\t))}\n\t\t\t</div>\n\t\t</div>\n\t);\n}\n",
      "type": "registry:component"
    },
    {
      "path": "src/modules/components/calendar/views/year-view/calendar-year-view.tsx",
      "content": "import { getYear, isSameDay, isSameMonth } from \"date-fns\";\nimport { motion } from \"framer-motion\";\nimport { cn } from \"@/lib/utils\";\nimport {\n\tstaggerContainer,\n\ttransition,\n} from \"@/modules/components/calendar/animations\";\nimport { useCalendar } from \"@/modules/components/calendar/contexts/calendar-context\";\nimport { EventListDialog } from \"@/modules/components/calendar/dialogs/events-list-dialog\";\nimport { getCalendarCells } from \"@/modules/components/calendar/helpers\";\nimport type { IEvent } from \"@/modules/components/calendar/interfaces\";\nimport { EventBullet } from \"@/modules/components/calendar/views/month-view/event-bullet\";\n\ninterface IProps {\n\tsingleDayEvents: IEvent[];\n\tmultiDayEvents: IEvent[];\n}\n\nconst MONTHS = [\n\t\"January\",\n\t\"February\",\n\t\"March\",\n\t\"April\",\n\t\"May\",\n\t\"June\",\n\t\"July\",\n\t\"August\",\n\t\"September\",\n\t\"October\",\n\t\"November\",\n\t\"December\",\n];\n\nconst WEEKDAYS = [\"Su\", \"Mo\", \"Tu\", \"We\", \"Th\", \"Fr\", \"Sa\"];\n\nexport function CalendarYearView({ singleDayEvents, multiDayEvents }: IProps) {\n\tconst { selectedDate, setSelectedDate } = useCalendar();\n\tconst currentYear = getYear(selectedDate);\n\tconst allEvents = [...multiDayEvents, ...singleDayEvents];\n\n\treturn (\n\t\t<div className=\"flex flex-col h-full  overflow-y-auto p-4  sm:p-6\">\n\t\t\t{/* Year grid */}\n\t\t\t<motion.div\n\t\t\t\tinitial=\"initial\"\n\t\t\t\tanimate=\"animate\"\n\t\t\t\tvariants={staggerContainer}\n\t\t\t\tclassName=\"grid grid-cols-1 gap-4 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 auto-rows-fr\"\n\t\t\t>\n\t\t\t\t{MONTHS.map((month, monthIndex) => {\n\t\t\t\t\tconst monthDate = new Date(currentYear, monthIndex, 1);\n\t\t\t\t\tconst cells = getCalendarCells(monthDate);\n\n\t\t\t\t\treturn (\n\t\t\t\t\t\t<motion.div\n\t\t\t\t\t\t\tkey={month}\n\t\t\t\t\t\t\tclassName=\"flex flex-col border border-border rounded-lg shadow-sm overflow-hidden\"\n\t\t\t\t\t\t\tinitial={{ opacity: 0, scale: 0.95 }}\n\t\t\t\t\t\t\tanimate={{ opacity: 1, scale: 1 }}\n\t\t\t\t\t\t\ttransition={{ delay: monthIndex * 0.05, ...transition }}\n\t\t\t\t\t\t\trole=\"region\"\n\t\t\t\t\t\t\taria-label={`${month} ${currentYear} calendar`}\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t{/* Month header */}\n\t\t\t\t\t\t\t<div\n\t\t\t\t\t\t\t\tclassName=\"px-3 py-2 text-center font-semibold text-sm sm:text-base cursor-pointer hover:bg-primary/20 transition-colors\"\n\t\t\t\t\t\t\t\tonClick={() =>\n\t\t\t\t\t\t\t\t\tsetSelectedDate(new Date(currentYear, monthIndex, 1))\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\trole=\"button\"\n\t\t\t\t\t\t\t\ttabIndex={0}\n\t\t\t\t\t\t\t\tonKeyDown={(e) => {\n\t\t\t\t\t\t\t\t\tif (e.key === \"Enter\" || e.key === \" \") {\n\t\t\t\t\t\t\t\t\t\tsetSelectedDate(new Date(currentYear, monthIndex, 1));\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t\taria-label={`Select ${month}`}\n\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t{month}\n\t\t\t\t\t\t\t</div>\n\n\t\t\t\t\t\t\t<div className=\"grid grid-cols-7 text-center text-xs font-medium text-muted-foreground py-2\">\n\t\t\t\t\t\t\t\t{WEEKDAYS.map((day) => (\n\t\t\t\t\t\t\t\t\t<div key={day} className=\"p-1\">\n\t\t\t\t\t\t\t\t\t\t{day}\n\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t))}\n\t\t\t\t\t\t\t</div>\n\n\t\t\t\t\t\t\t<div className=\"grid grid-cols-7 gap-0.5 p-1.5 flex-grow text-xs\">\n\t\t\t\t\t\t\t\t{cells.map((cell) => {\n\t\t\t\t\t\t\t\t\tconst isCurrentMonth = isSameMonth(cell.date, monthDate);\n\t\t\t\t\t\t\t\t\tconst isToday = isSameDay(cell.date, new Date());\n\t\t\t\t\t\t\t\t\tconst dayEvents = allEvents.filter((event) =>\n\t\t\t\t\t\t\t\t\t\tisSameDay(new Date(event.startDate), cell.date),\n\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t\tconst hasEvents = dayEvents.length > 0;\n\n\t\t\t\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t\t\t\t<div\n\t\t\t\t\t\t\t\t\t\t\tkey={cell.date.toISOString()}\n\t\t\t\t\t\t\t\t\t\t\tclassName={cn(\n\t\t\t\t\t\t\t\t\t\t\t\t\"flex flex-col items-center justify-start p-1 min-h-[2rem] relative\",\n\t\t\t\t\t\t\t\t\t\t\t\t!isCurrentMonth && \"text-muted-foreground/40\",\n\t\t\t\t\t\t\t\t\t\t\t\thasEvents && isCurrentMonth\n\t\t\t\t\t\t\t\t\t\t\t\t\t? \"cursor-pointer hover:bg-accent/20 hover:rounded-md\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t: \"cursor-default\",\n\t\t\t\t\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\t\t{isCurrentMonth && hasEvents ? (\n\t\t\t\t\t\t\t\t\t\t\t\t<EventListDialog date={cell.date} events={dayEvents}>\n\t\t\t\t\t\t\t\t\t\t\t\t\t<div className=\"w-full h-full flex flex-col items-center justify-start gap-0.5\">\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<span\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tclassName={cn(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"size-5 flex items-center justify-center font-medium\",\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tisToday &&\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"rounded-full bg-primary text-primary-foreground\",\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t{cell.day}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<div className=\"flex justify-center items-center gap-0.5\">\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t{dayEvents.length <= 2 ? (\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tdayEvents\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t.slice(0, 2)\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t.map((event) => (\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<EventBullet\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tkey={event.id}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tcolor={event.color}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tclassName=\"size-1.5\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t))\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t) : (\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<div className=\"flex flex-col justify-center items-center\">\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<EventBullet\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tcolor={dayEvents[0].color}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tclassName=\"size-1.5\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<span className=\"text-[0.6rem]\">\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t+{dayEvents.length - 1}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t\t\t</EventListDialog>\n\t\t\t\t\t\t\t\t\t\t\t) : (\n\t\t\t\t\t\t\t\t\t\t\t\t<div className=\"w-full h-full flex flex-col items-center justify-start\">\n\t\t\t\t\t\t\t\t\t\t\t\t\t<span\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tclassName={cn(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"size-5 flex items-center justify-center font-medium\",\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t{cell.day}\n\t\t\t\t\t\t\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t})}\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</motion.div>\n\t\t\t\t\t);\n\t\t\t\t})}\n\t\t\t</motion.div>\n\t\t</div>\n\t);\n}\n",
      "type": "registry:component"
    },
    {
      "path": "src/modules/components/calendar/calendar.tsx",
      "content": "import React from \"react\";\nimport { CalendarBody } from \"@/modules/components/calendar/calendar-body\";\nimport { CalendarProvider } from \"@/modules/components/calendar/contexts/calendar-context\";\nimport { DndProvider } from \"@/modules/components/calendar/contexts/dnd-context\";\nimport { CalendarHeader } from \"@/modules/components/calendar/header/calendar-header\";\nimport { getEvents, getUsers } from \"@/modules/components/calendar/requests\";\n\nasync function getCalendarData() {\n\treturn {\n\t\tevents: await getEvents(),\n\t\tusers: await getUsers(),\n\t};\n}\n\nexport async function Calendar() {\n\tconst { events, users } = await getCalendarData();\n\n\treturn (\n\t\t<CalendarProvider events={events} users={users} view=\"month\">\n\t\t\t<DndProvider showConfirmation={false}>\n\t\t\t\t<div className=\"w-full border rounded-xl\">\n\t\t\t\t\t<CalendarHeader />\n\t\t\t\t\t<CalendarBody />\n\t\t\t\t</div>\n\t\t\t</DndProvider>\n\t\t</CalendarProvider>\n\t);\n}\n",
      "type": "registry:component"
    },
    {
      "path": "src/modules/components/calendar/calendar-body.tsx",
      "content": "\"use client\";\n\nimport { isSameDay, parseISO } from \"date-fns\";\nimport { motion } from \"framer-motion\";\nimport React from \"react\";\nimport { fadeIn, transition } from \"@/modules/components/calendar/animations\";\nimport { useCalendar } from \"@/modules/components/calendar/contexts/calendar-context\";\nimport { AgendaEvents } from \"@/modules/components/calendar/views/agenda-view/agenda-events\";\nimport { CalendarMonthView } from \"@/modules/components/calendar/views/month-view/calendar-month-view\";\nimport { CalendarDayView } from \"@/modules/components/calendar/views/week-and-day-view/calendar-day-view\";\nimport { CalendarWeekView } from \"@/modules/components/calendar/views/week-and-day-view/calendar-week-view\";\nimport { CalendarYearView } from \"@/modules/components/calendar/views/year-view/calendar-year-view\";\n\nexport function CalendarBody() {\n\tconst { view, events } = useCalendar();\n\n\tconst singleDayEvents = events.filter((event) => {\n\t\tconst startDate = parseISO(event.startDate);\n\t\tconst endDate = parseISO(event.endDate);\n\t\treturn isSameDay(startDate, endDate);\n\t});\n\n\tconst multiDayEvents = events.filter((event) => {\n\t\tconst startDate = parseISO(event.startDate);\n\t\tconst endDate = parseISO(event.endDate);\n\t\treturn !isSameDay(startDate, endDate);\n\t});\n\n\treturn (\n\t\t<div className=\"w-full h-full overflow-scroll relative\">\n\t\t\t<motion.div\n\t\t\t\tkey={view}\n\t\t\t\tinitial=\"initial\"\n\t\t\t\tanimate=\"animate\"\n\t\t\t\texit=\"exit\"\n\t\t\t\tvariants={fadeIn}\n\t\t\t\ttransition={transition}\n\t\t\t>\n\t\t\t\t{view === \"month\" && (\n\t\t\t\t\t<CalendarMonthView\n\t\t\t\t\t\tsingleDayEvents={singleDayEvents}\n\t\t\t\t\t\tmultiDayEvents={multiDayEvents}\n\t\t\t\t\t/>\n\t\t\t\t)}\n\t\t\t\t{view === \"week\" && (\n\t\t\t\t\t<CalendarWeekView\n\t\t\t\t\t\tsingleDayEvents={singleDayEvents}\n\t\t\t\t\t\tmultiDayEvents={multiDayEvents}\n\t\t\t\t\t/>\n\t\t\t\t)}\n\t\t\t\t{view === \"day\" && (\n\t\t\t\t\t<CalendarDayView\n\t\t\t\t\t\tsingleDayEvents={singleDayEvents}\n\t\t\t\t\t\tmultiDayEvents={multiDayEvents}\n\t\t\t\t\t/>\n\t\t\t\t)}\n\t\t\t\t{view === \"year\" && (\n\t\t\t\t\t<CalendarYearView\n\t\t\t\t\t\tsingleDayEvents={singleDayEvents}\n\t\t\t\t\t\tmultiDayEvents={multiDayEvents}\n\t\t\t\t\t/>\n\t\t\t\t)}\n\t\t\t\t{view === \"agenda\" && (\n\t\t\t\t\t<motion.div\n\t\t\t\t\t\tkey=\"agenda\"\n\t\t\t\t\t\tinitial=\"initial\"\n\t\t\t\t\t\tanimate=\"animate\"\n\t\t\t\t\t\texit=\"exit\"\n\t\t\t\t\t\tvariants={fadeIn}\n\t\t\t\t\t\ttransition={transition}\n\t\t\t\t\t>\n\t\t\t\t\t\t<AgendaEvents />\n\t\t\t\t\t</motion.div>\n\t\t\t\t)}\n\t\t\t</motion.div>\n\t\t</div>\n\t);\n}\n",
      "type": "registry:component"
    },
    {
      "path": "src/modules/components/calendar/constants.ts",
      "content": "import type { TEventColor } from \"@/modules/components/calendar/types\";\n\nexport const COLORS: TEventColor[] = [\n\t\"blue\",\n\t\"green\",\n\t\"red\",\n\t\"yellow\",\n\t\"purple\",\n\t\"orange\",\n];\n",
      "type": "registry:component"
    },
    {
      "path": "src/modules/components/calendar/animations.ts",
      "content": "import type { Variants } from \"framer-motion\";\n\nexport const fadeIn: Variants = {\n\tinitial: { opacity: 0 },\n\tanimate: { opacity: 1 },\n\texit: { opacity: 0 },\n};\n\nexport const slideFromLeft: Variants = {\n\tinitial: { x: -20, opacity: 0 },\n\tanimate: { x: 0, opacity: 1 },\n\texit: { x: 20, opacity: 0 },\n};\n\nexport const slideFromRight: Variants = {\n\tinitial: { x: 20, opacity: 0 },\n\tanimate: { x: 0, opacity: 1 },\n\texit: { x: -20, opacity: 0 },\n};\n\nexport const transition = {\n\ttype: \"spring\",\n\tstiffness: 200,\n\tdamping: 20,\n};\n\nexport const staggerContainer: Variants = {\n\tanimate: {\n\t\ttransition: {\n\t\t\tstaggerChildren: 0.1,\n\t\t},\n\t},\n};\n\nexport const buttonHover: Variants = {\n\thover: { scale: 1.05 },\n\ttap: { scale: 0.95 },\n};\n",
      "type": "registry:component"
    },
    {
      "path": "src/modules/components/calendar/helpers.ts",
      "content": "import {\n\taddDays,\n\taddMonths,\n\taddWeeks,\n\taddYears,\n\tdifferenceInDays,\n\tdifferenceInMinutes,\n\teachDayOfInterval,\n\tendOfMonth,\n\tendOfWeek,\n\tendOfYear,\n\tformat,\n\tisSameDay,\n\tisSameMonth,\n\tisSameWeek,\n\tisSameYear,\n\tisValid,\n\tparseISO,\n\tstartOfDay,\n\tstartOfMonth,\n\tstartOfWeek,\n\tstartOfYear,\n\tsubDays,\n\tsubMonths,\n\tsubWeeks,\n\tsubYears,\n} from \"date-fns\";\nimport { useCalendar } from \"@/modules/components/calendar/contexts/calendar-context\";\nimport type {\n\tICalendarCell,\n\tIEvent,\n} from \"@/modules/components/calendar/interfaces\";\nimport type {\n\tTCalendarView,\n\tTEventColor,\n} from \"@/modules/components/calendar/types\";\n\nconst FORMAT_STRING = \"MMM d, yyyy\";\n\nexport function rangeText(view: TCalendarView, date: Date): string {\n\tlet start: Date;\n\tlet end: Date;\n\n\tswitch (view) {\n\t\tcase \"month\":\n\t\t\tstart = startOfMonth(date);\n\t\t\tend = endOfMonth(date);\n\t\t\tbreak;\n\t\tcase \"week\":\n\t\t\tstart = startOfWeek(date);\n\t\t\tend = endOfWeek(date);\n\t\t\tbreak;\n\t\tcase \"day\":\n\t\t\treturn format(date, FORMAT_STRING);\n\t\tcase \"year\":\n\t\t\tstart = startOfYear(date);\n\t\t\tend = endOfYear(date);\n\t\t\tbreak;\n\t\tcase \"agenda\":\n\t\t\tstart = startOfMonth(date);\n\t\t\tend = endOfMonth(date);\n\t\t\tbreak;\n\t\tdefault:\n\t\t\treturn \"Error while formatting\";\n\t}\n\n\treturn `${format(start, FORMAT_STRING)} - ${format(end, FORMAT_STRING)}`;\n}\n\nexport function navigateDate(\n\tdate: Date,\n\tview: TCalendarView,\n\tdirection: \"previous\" | \"next\",\n): Date {\n\tconst operations: Record<TCalendarView, (d: Date, n: number) => Date> = {\n\t\tmonth: direction === \"next\" ? addMonths : subMonths,\n\t\tweek: direction === \"next\" ? addWeeks : subWeeks,\n\t\tday: direction === \"next\" ? addDays : subDays,\n\t\tyear: direction === \"next\" ? addYears : subYears,\n\t\tagenda: direction === \"next\" ? addMonths : subMonths,\n\t};\n\n\treturn operations[view](date, 1);\n}\n\nexport function getEventsCount(\n\tevents: IEvent[],\n\tdate: Date,\n\tview: TCalendarView,\n): number {\n\tconst compareFns: Record<TCalendarView, (d1: Date, d2: Date) => boolean> = {\n\t\tday: isSameDay,\n\t\tweek: isSameWeek,\n\t\tmonth: isSameMonth,\n\t\tyear: isSameYear,\n\t\tagenda: isSameMonth,\n\t};\n\n\tconst compareFn = compareFns[view];\n\treturn events.filter((event) => compareFn(parseISO(event.startDate), date))\n\t\t.length;\n}\n\nexport function groupEvents(dayEvents: IEvent[]): IEvent[][] {\n\tconst sortedEvents = dayEvents.sort(\n\t\t(a, b) => parseISO(a.startDate).getTime() - parseISO(b.startDate).getTime(),\n\t);\n\tconst groups: IEvent[][] = [];\n\n\tfor (const event of sortedEvents) {\n\t\tconst eventStart = parseISO(event.startDate);\n\t\tlet placed = false;\n\n\t\tfor (const group of groups) {\n\t\t\tconst lastEventInGroup = group[group.length - 1];\n\t\t\tconst lastEventEnd = parseISO(lastEventInGroup.endDate);\n\n\t\t\tif (eventStart >= lastEventEnd) {\n\t\t\t\tgroup.push(event);\n\t\t\t\tplaced = true;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\tif (!placed) groups.push([event]);\n\t}\n\n\treturn groups;\n}\n\nexport function getEventBlockStyle(\n\tevent: IEvent,\n\tday: Date,\n\tgroupIndex: number,\n\tgroupSize: number,\n) {\n\tconst startDate = parseISO(event.startDate);\n\tconst dayStart = startOfDay(day); // Use startOfDay instead of manual reset\n\tconst eventStart = startDate < dayStart ? dayStart : startDate;\n\tconst startMinutes = differenceInMinutes(eventStart, dayStart);\n\n\tconst top = (startMinutes / 1440) * 100; // 1440 minutes in a day\n\tconst width = 100 / groupSize;\n\tconst left = groupIndex * width;\n\n\treturn { top: `${top}%`, width: `${width}%`, left: `${left}%` };\n}\n\nexport function getCalendarCells(selectedDate: Date): ICalendarCell[] {\n\tconst year = selectedDate.getFullYear();\n\tconst month = selectedDate.getMonth();\n\n\tconst daysInMonth = endOfMonth(selectedDate).getDate(); // Faster than new Date(year, month + 1, 0)\n\tconst firstDayOfMonth = startOfMonth(selectedDate).getDay();\n\tconst daysInPrevMonth = endOfMonth(new Date(year, month - 1)).getDate();\n\tconst totalDays = firstDayOfMonth + daysInMonth;\n\n\tconst prevMonthCells = Array.from({ length: firstDayOfMonth }, (_, i) => ({\n\t\tday: daysInPrevMonth - firstDayOfMonth + i + 1,\n\t\tcurrentMonth: false,\n\t\tdate: new Date(year, month - 1, daysInPrevMonth - firstDayOfMonth + i + 1),\n\t}));\n\n\tconst currentMonthCells = Array.from({ length: daysInMonth }, (_, i) => ({\n\t\tday: i + 1,\n\t\tcurrentMonth: true,\n\t\tdate: new Date(year, month, i + 1),\n\t}));\n\n\tconst nextMonthCells = Array.from(\n\t\t{ length: (7 - (totalDays % 7)) % 7 },\n\t\t(_, i) => ({\n\t\t\tday: i + 1,\n\t\t\tcurrentMonth: false,\n\t\t\tdate: new Date(year, month + 1, i + 1),\n\t\t}),\n\t);\n\n\treturn [...prevMonthCells, ...currentMonthCells, ...nextMonthCells];\n}\n\nexport function calculateMonthEventPositions(\n\tmultiDayEvents: IEvent[],\n\tsingleDayEvents: IEvent[],\n\tselectedDate: Date,\n): Record<string, number> {\n\tconst monthStart = startOfMonth(selectedDate);\n\tconst monthEnd = endOfMonth(selectedDate);\n\n\tconst eventPositions: Record<string, number> = {};\n\tconst occupiedPositions: Record<string, boolean[]> = {};\n\n\teachDayOfInterval({ start: monthStart, end: monthEnd }).forEach((day) => {\n\t\toccupiedPositions[day.toISOString()] = [false, false, false];\n\t});\n\n\tconst sortedEvents = [\n\t\t...multiDayEvents.sort((a, b) => {\n\t\t\tconst aDuration = differenceInDays(\n\t\t\t\tparseISO(a.endDate),\n\t\t\t\tparseISO(a.startDate),\n\t\t\t);\n\t\t\tconst bDuration = differenceInDays(\n\t\t\t\tparseISO(b.endDate),\n\t\t\t\tparseISO(b.startDate),\n\t\t\t);\n\t\t\treturn (\n\t\t\t\tbDuration - aDuration ||\n\t\t\t\tparseISO(a.startDate).getTime() - parseISO(b.startDate).getTime()\n\t\t\t);\n\t\t}),\n\t\t...singleDayEvents.sort(\n\t\t\t(a, b) =>\n\t\t\t\tparseISO(a.startDate).getTime() - parseISO(b.startDate).getTime(),\n\t\t),\n\t];\n\n\tsortedEvents.forEach((event) => {\n\t\tconst eventStart = parseISO(event.startDate);\n\t\tconst eventEnd = parseISO(event.endDate);\n\t\tconst eventDays = eachDayOfInterval({\n\t\t\tstart: eventStart < monthStart ? monthStart : eventStart,\n\t\t\tend: eventEnd > monthEnd ? monthEnd : eventEnd,\n\t\t});\n\n\t\tlet position = -1;\n\n\t\tfor (let i = 0; i < 3; i++) {\n\t\t\tif (\n\t\t\t\teventDays.every((day) => {\n\t\t\t\t\tconst dayPositions = occupiedPositions[startOfDay(day).toISOString()];\n\t\t\t\t\treturn dayPositions && !dayPositions[i];\n\t\t\t\t})\n\t\t\t) {\n\t\t\t\tposition = i;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\tif (position !== -1) {\n\t\t\teventDays.forEach((day) => {\n\t\t\t\tconst dayKey = startOfDay(day).toISOString();\n\t\t\t\toccupiedPositions[dayKey][position] = true;\n\t\t\t});\n\t\t\teventPositions[event.id] = position;\n\t\t}\n\t});\n\n\treturn eventPositions;\n}\n\nexport function getMonthCellEvents(\n\tdate: Date,\n\tevents: IEvent[],\n\teventPositions: Record<string, number>,\n) {\n\tconst dayStart = startOfDay(date);\n\tconst eventsForDate = events.filter((event) => {\n\t\tconst eventStart = parseISO(event.startDate);\n\t\tconst eventEnd = parseISO(event.endDate);\n\t\treturn (\n\t\t\t(dayStart >= eventStart && dayStart <= eventEnd) ||\n\t\t\tisSameDay(dayStart, eventStart) ||\n\t\t\tisSameDay(dayStart, eventEnd)\n\t\t);\n\t});\n\n\treturn eventsForDate\n\t\t.map((event) => ({\n\t\t\t...event,\n\t\t\tposition: eventPositions[event.id] ?? -1,\n\t\t\tisMultiDay: event.startDate !== event.endDate,\n\t\t}))\n\t\t.sort((a, b) => {\n\t\t\tif (a.isMultiDay && !b.isMultiDay) return -1;\n\t\t\tif (!a.isMultiDay && b.isMultiDay) return 1;\n\t\t\treturn a.position - b.position;\n\t\t});\n}\n\nexport function formatTime(\n\tdate: Date | string,\n\tuse24HourFormat: boolean,\n): string {\n\tconst parsedDate = typeof date === \"string\" ? parseISO(date) : date;\n\tif (!isValid(parsedDate)) return \"\";\n\treturn format(parsedDate, use24HourFormat ? \"HH:mm\" : \"h:mm a\");\n}\n\nexport const getFirstLetters = (str: string): string => {\n\tif (!str) return \"\";\n\tconst words = str.split(\" \");\n\tif (words.length === 1) return words[0].charAt(0).toUpperCase();\n\treturn `${words[0].charAt(0).toUpperCase()}${words[1].charAt(0).toUpperCase()}`;\n};\n\nexport const getEventsForDay = (\n\tevents: IEvent[],\n\tdate: Date,\n\tisWeek = false,\n): IEvent[] => {\n\tconst targetDate = startOfDay(date);\n\treturn events\n\t\t.filter((event) => {\n\t\t\tconst startOfDayForEventStart = startOfDay(parseISO(event.startDate));\n\t\t\tconst startOfDayForEventEnd = startOfDay(parseISO(event.endDate));\n\t\t\tif (isWeek) {\n\t\t\t\treturn (\n\t\t\t\t\tevent.startDate !== event.endDate &&\n\t\t\t\t\tstartOfDayForEventStart <= targetDate &&\n\t\t\t\t\tstartOfDayForEventEnd >= targetDate\n\t\t\t\t);\n\t\t\t}\n\t\t\treturn (\n\t\t\t\tstartOfDayForEventStart <= targetDate &&\n\t\t\t\tstartOfDayForEventEnd >= targetDate\n\t\t\t);\n\t\t})\n\t\t.map((event) => {\n\t\t\tconst eventStart = startOfDay(parseISO(event.startDate));\n\t\t\tconst eventEnd = startOfDay(parseISO(event.endDate));\n\t\t\tlet point: \"start\" | \"end\" | \"none\" | undefined;\n\n\t\t\tif (isSameDay(eventStart, eventEnd)) {\n\t\t\t\tpoint = \"none\";\n\t\t\t} else if (isSameDay(eventStart, targetDate)) {\n\t\t\t\tpoint = \"start\";\n\t\t\t} else if (isSameDay(eventEnd, targetDate)) {\n\t\t\t\tpoint = \"end\";\n\t\t\t}\n\n\t\t\treturn { ...event, point };\n\t\t});\n};\n\nexport const getWeekDates = (date: Date): Date[] => {\n\tconst startDate = startOfWeek(date, { weekStartsOn: 1 });\n\treturn Array.from({ length: 7 }, (_, i) => addDays(startDate, i));\n};\n\nexport const getEventsForWeek = (events: IEvent[], date: Date): IEvent[] => {\n\tconst weekDates = getWeekDates(date);\n\tconst startOfWeekDate = weekDates[0];\n\tconst endOfWeekDate = weekDates[6];\n\n\treturn events.filter((event) => {\n\t\tconst eventStart = parseISO(event.startDate);\n\t\tconst eventEnd = parseISO(event.endDate);\n\t\treturn (\n\t\t\tisValid(eventStart) &&\n\t\t\tisValid(eventEnd) &&\n\t\t\teventStart <= endOfWeekDate &&\n\t\t\teventEnd >= startOfWeekDate\n\t\t);\n\t});\n};\n\nexport const getEventsForMonth = (events: IEvent[], date: Date): IEvent[] => {\n\tconst startOfMonthDate = startOfMonth(date);\n\tconst endOfMonthDate = endOfMonth(date);\n\n\treturn events.filter((event) => {\n\t\tconst eventStart = parseISO(event.startDate);\n\t\tconst eventEnd = parseISO(event.endDate);\n\t\treturn (\n\t\t\tisValid(eventStart) &&\n\t\t\tisValid(eventEnd) &&\n\t\t\teventStart <= endOfMonthDate &&\n\t\t\teventEnd >= startOfMonthDate\n\t\t);\n\t});\n};\n\nexport const getEventsForYear = (events: IEvent[], date: Date): IEvent[] => {\n\tif (!events || !Array.isArray(events) || !isValid(date)) return [];\n\n\tconst startOfYearDate = startOfYear(date);\n\tconst endOfYearDate = endOfYear(date);\n\n\treturn events.filter((event) => {\n\t\tconst eventStart = parseISO(event.startDate);\n\t\tconst eventEnd = parseISO(event.endDate);\n\t\treturn (\n\t\t\tisValid(eventStart) &&\n\t\t\tisValid(eventEnd) &&\n\t\t\teventStart <= endOfYearDate &&\n\t\t\teventEnd >= startOfYearDate\n\t\t);\n\t});\n};\n\nexport const getColorClass = (color: string): string => {\n\tconst colorClasses: Record<TEventColor, string> = {\n\t\tred: \"border-red-200 bg-red-50 text-red-700 dark:border-red-800 dark:bg-red-950 dark:text-red-300\",\n\t\tyellow:\n\t\t\t\"border-yellow-200 bg-yellow-50 text-yellow-700 dark:border-yellow-800 dark:bg-yellow-950 dark:text-yellow-300\",\n\t\tgreen:\n\t\t\t\"border-green-200 bg-green-50 text-green-700 dark:border-green-800 dark:bg-green-950 dark:text-green-300\",\n\t\tblue: \"border-blue-200 bg-blue-50 text-blue-700 dark:border-blue-800 dark:bg-blue-950 dark:text-blue-300\",\n\t\torange:\n\t\t\t\"border-orange-200 bg-orange-50 text-orange-700 dark:border-orange-800 dark:bg-orange-950 dark:text-orange-300\",\n\t\tpurple:\n\t\t\t\"border-purple-200 bg-purple-50 text-purple-700 dark:border-purple-800 dark:bg-purple-950 dark:text-purple-300\",\n\t};\n\treturn colorClasses[color as TEventColor] || \"\";\n};\n\nexport const getBgColor = (color: string): string => {\n\tconst colorClasses: Record<TEventColor, string> = {\n\t\tred: \"bg-red-400 dark:bg-red-600\",\n\t\tyellow: \"bg-yellow-400 dark:bg-yellow-600\",\n\t\tgreen: \"bg-green-400 dark:bg-green-600\",\n\t\tblue: \"bg-blue-400 dark:bg-blue-600\",\n\t\torange: \"bg-orange-400 dark:bg-orange-600\",\n\t\tpurple: \"bg-purple-400 dark:bg-purple-600\",\n\t};\n\treturn colorClasses[color as TEventColor] || \"\";\n};\n\nexport const useGetEventsByMode = (events: IEvent[]) => {\n\tconst { view, selectedDate } = useCalendar();\n\n\tswitch (view) {\n\t\tcase \"day\":\n\t\t\treturn getEventsForDay(events, selectedDate);\n\t\tcase \"week\":\n\t\t\treturn getEventsForWeek(events, selectedDate);\n\t\tcase \"agenda\":\n\t\tcase \"month\":\n\t\t\treturn getEventsForMonth(events, selectedDate);\n\t\tcase \"year\":\n\t\t\treturn getEventsForYear(events, selectedDate);\n\t\tdefault:\n\t\t\treturn [];\n\t}\n};\n\nexport const toCapitalize = (str: string): string => {\n\tif (!str) return \"\";\n\treturn str.charAt(0).toUpperCase() + str.slice(1);\n};\n",
      "type": "registry:component"
    },
    {
      "path": "src/modules/components/calendar/hooks.ts",
      "content": "import { useEffect, useState } from \"react\";\n\nexport function useDisclosure({\n\tdefaultIsOpen = false,\n}: {\n\tdefaultIsOpen?: boolean;\n} = {}) {\n\tconst [isOpen, setIsOpen] = useState(defaultIsOpen);\n\n\tconst onOpen = () => setIsOpen(true);\n\tconst onClose = () => setIsOpen(false);\n\tconst onToggle = () => setIsOpen((currentValue) => !currentValue);\n\n\treturn { onOpen, onClose, isOpen, onToggle };\n}\n\nexport const useLocalStorage = <T>(\n\tkey: string,\n\tinitialValue: T,\n): [T, (value: T) => void] => {\n\tconst readValue = (): T => {\n\t\tif (typeof window === \"undefined\") {\n\t\t\treturn initialValue;\n\t\t}\n\n\t\ttry {\n\t\t\tconst item = window.localStorage.getItem(key);\n\t\t\treturn item ? (JSON.parse(item) as T) : initialValue;\n\t\t} catch (error) {\n\t\t\tconsole.warn(`Error reading localStorage key \"${key}\":`, error);\n\t\t\treturn initialValue;\n\t\t}\n\t};\n\n\tconst [storedValue, setStoredValue] = useState<T>(readValue);\n\n\tconst setValue = (value: T) => {\n\t\ttry {\n\t\t\tconst valueToStore =\n\t\t\t\tvalue instanceof Function ? value(storedValue) : value;\n\t\t\tsetStoredValue(valueToStore);\n\t\t\tif (typeof window !== \"undefined\") {\n\t\t\t\twindow.localStorage.setItem(key, JSON.stringify(valueToStore));\n\t\t\t}\n\t\t} catch (error) {\n\t\t\tconsole.warn(`Error setting localStorage key \"${key}\":`, error);\n\t\t}\n\t};\n\n\treturn [storedValue, setValue];\n};\n\nexport function useMediaQuery(query: string): boolean {\n\tconst [matches, setMatches] = useState(false);\n\n\tuseEffect(() => {\n\t\tconst media = window.matchMedia(query);\n\t\tif (media.matches !== matches) {\n\t\t\tsetMatches(media.matches);\n\t\t}\n\n\t\tconst listener = () => setMatches(media.matches);\n\t\tmedia.addEventListener(\"change\", listener);\n\n\t\treturn () => media.removeEventListener(\"change\", listener);\n\t}, [matches, query]);\n\n\treturn matches;\n}\n",
      "type": "registry:component"
    },
    {
      "path": "src/modules/components/calendar/interfaces.ts",
      "content": "import type { TEventColor } from \"@/modules/components/calendar/types\";\n\nexport interface IUser {\n\tid: string;\n\tname: string;\n\tpicturePath: string | null;\n}\n\nexport interface IEvent {\n\tid: number;\n\tstartDate: string;\n\tendDate: string;\n\ttitle: string;\n\tcolor: TEventColor;\n\tdescription: string;\n\tuser: IUser;\n}\n\nexport interface ICalendarCell {\n\tday: number;\n\tcurrentMonth: boolean;\n\tdate: Date;\n}\n",
      "type": "registry:component"
    },
    {
      "path": "src/modules/components/calendar/mocks.ts",
      "content": "import { COLORS } from \"@/modules/components/calendar/constants\";\nimport type { IEvent, IUser } from \"@/modules/components/calendar/interfaces\";\n\nexport const USERS_MOCK: IUser[] = [\n\t{\n\t\tid: \"f3b035ac-49f7-4e92-a715-35680bf63175\",\n\t\tname: \"Michael Doe\",\n\t\tpicturePath: null,\n\t},\n\t{\n\t\tid: \"3e36ea6e-78f3-40dd-ab8c-a6c737c3c422\",\n\t\tname: \"Alice Johnson\",\n\t\tpicturePath: null,\n\t},\n\t{\n\t\tid: \"a7aff6bd-a50a-4d6a-ab57-76f76bb27cf5\",\n\t\tname: \"Robert Smith\",\n\t\tpicturePath: null,\n\t},\n\t{\n\t\tid: \"dd503cf9-6c38-43cf-94cc-0d4032e2f77a\",\n\t\tname: \"Emily Davis\",\n\t\tpicturePath: null,\n\t},\n];\n\n// ================================== //\n\nconst events = [\n\t\"Doctor's appointment\",\n\t\"Dental cleaning\",\n\t\"Eye exam\",\n\t\"Therapy session\",\n\t\"Business meeting\",\n\t\"Team stand-up\",\n\t\"Project deadline\",\n\t\"Weekly report submission\",\n\t\"Client presentation\",\n\t\"Marketing strategy review\",\n\t\"Networking event\",\n\t\"Sales call\",\n\t\"Investor pitch\",\n\t\"Board meeting\",\n\t\"Employee training\",\n\t\"Performance review\",\n\t\"One-on-one meeting\",\n\t\"Lunch with a colleague\",\n\t\"HR interview\",\n\t\"Conference call\",\n\t\"Web development sprint planning\",\n\t\"Software deployment\",\n\t\"Code review\",\n\t\"QA testing session\",\n\t\"Cybersecurity audit\",\n\t\"Server maintenance\",\n\t\"API integration update\",\n\t\"Data backup\",\n\t\"Cloud migration\",\n\t\"System upgrade\",\n\t\"Content planning session\",\n\t\"Product launch\",\n\t\"Customer support review\",\n\t\"Team building activity\",\n\t\"Legal consultation\",\n\t\"Budget review\",\n\t\"Financial planning session\",\n\t\"Tax filing deadline\",\n\t\"Investor relations update\",\n\t\"Partnership negotiation\",\n\t\"Medical check-up\",\n\t\"Vaccination appointment\",\n\t\"Blood donation\",\n\t\"Gym workout\",\n\t\"Yoga class\",\n\t\"Physical therapy session\",\n\t\"Nutrition consultation\",\n\t\"Personal trainer session\",\n\t\"Parent-teacher meeting\",\n\t\"School open house\",\n\t\"College application deadline\",\n\t\"Final exam\",\n\t\"Graduation ceremony\",\n\t\"Job interview\",\n\t\"Internship orientation\",\n\t\"Office relocation\",\n\t\"Business trip\",\n\t\"Flight departure\",\n\t\"Hotel check-in\",\n\t\"Vacation planning\",\n\t\"Birthday party\",\n\t\"Wedding anniversary\",\n\t\"Family reunion\",\n\t\"Housewarming party\",\n\t\"Community volunteer work\",\n\t\"Charity fundraiser\",\n\t\"Religious service\",\n\t\"Concert attendance\",\n\t\"Theater play\",\n\t\"Movie night\",\n\t\"Sporting event\",\n\t\"Football match\",\n\t\"Basketball game\",\n\t\"Tennis practice\",\n\t\"Marathon training\",\n\t\"Cycling event\",\n\t\"Fishing trip\",\n\t\"Camping weekend\",\n\t\"Hiking expedition\",\n\t\"Photography session\",\n\t\"Art workshop\",\n\t\"Cooking class\",\n\t\"Book club meeting\",\n\t\"Grocery shopping\",\n\t\"Car maintenance\",\n\t\"Home renovation meeting\",\n];\n\nconst mockGenerator = (numberOfEvents: number): IEvent[] => {\n\tconst result: IEvent[] = [];\n\tlet currentId = 1;\n\n\tconst randomUser = USERS_MOCK[Math.floor(Math.random() * USERS_MOCK.length)];\n\n\t// Date range: 30 days before and after now\n\tconst now = new Date();\n\tconst startRange = new Date(now);\n\tstartRange.setDate(now.getDate() - 30);\n\tconst endRange = new Date(now);\n\tendRange.setDate(now.getDate() + 30);\n\n\t// Create an event happening now\n\tconst currentEvent = {\n\t\tid: currentId++,\n\t\tstartDate: new Date(now.getTime() - 30 * 60000).toISOString(),\n\t\tendDate: new Date(now.getTime() + 30 * 60000).toISOString(),\n\t\ttitle: events[Math.floor(Math.random() * events.length)],\n\t\tcolor: COLORS[Math.floor(Math.random() * COLORS.length)],\n\t\tdescription:\n\t\t\t\"Lorem ipsum dolor sit amet, consectetur adipiscing elit. Sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.\",\n\t\tuser: randomUser,\n\t};\n\n\tresult.push(currentEvent);\n\n\t// Generate the remaining events\n\tfor (let i = 0; i < numberOfEvents - 1; i++) {\n\t\t// Determine if this is a multi-day event (10% chance)\n\t\tconst isMultiDay = Math.random() < 0.1;\n\n\t\tconst startDate = new Date(\n\t\t\tstartRange.getTime() +\n\t\t\t\tMath.random() * (endRange.getTime() - startRange.getTime()),\n\t\t);\n\n\t\t// Set time between 8 AM and 8 PM\n\t\tstartDate.setHours(\n\t\t\t8 + Math.floor(Math.random() * 12),\n\t\t\tMath.floor(Math.random() * 60),\n\t\t\t0,\n\t\t\t0,\n\t\t);\n\n\t\tconst endDate = new Date(startDate);\n\n\t\tif (isMultiDay) {\n\t\t\t// Multi-day event: Add 1-4 days\n\t\t\tconst additionalDays = Math.floor(Math.random() * 4) + 1;\n\t\t\tendDate.setDate(startDate.getDate() + additionalDays);\n\t\t\tendDate.setHours(\n\t\t\t\t8 + Math.floor(Math.random() * 12),\n\t\t\t\tMath.floor(Math.random() * 60),\n\t\t\t\t0,\n\t\t\t\t0,\n\t\t\t);\n\t\t} else {\n\t\t\t// Same-day event: Add 1-3 hours\n\t\t\tendDate.setHours(endDate.getHours() + Math.floor(Math.random() * 3) + 1);\n\t\t}\n\n\t\tresult.push({\n\t\t\tid: currentId++,\n\t\t\tstartDate: startDate.toISOString(),\n\t\t\tendDate: endDate.toISOString(),\n\t\t\ttitle: events[Math.floor(Math.random() * events.length)],\n\t\t\tcolor: COLORS[Math.floor(Math.random() * COLORS.length)],\n\t\t\tdescription:\n\t\t\t\t\"Lorem ipsum dolor sit amet, consectetur adipiscing elit. Sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.\",\n\t\t\tuser: USERS_MOCK[Math.floor(Math.random() * USERS_MOCK.length)],\n\t\t});\n\t}\n\n\treturn result;\n};\n\nexport const CALENDAR_ITEMS_MOCK: IEvent[] = mockGenerator(80);\n",
      "type": "registry:component"
    },
    {
      "path": "src/modules/components/calendar/requests.ts",
      "content": "import {\n\tCALENDAR_ITEMS_MOCK,\n\tUSERS_MOCK,\n} from \"@/modules/components/calendar/mocks\";\n\nexport const getEvents = async () => {\n\treturn CALENDAR_ITEMS_MOCK;\n};\n\nexport const getUsers = async () => {\n\treturn USERS_MOCK;\n};\n",
      "type": "registry:component"
    },
    {
      "path": "src/modules/components/calendar/schemas.ts",
      "content": "import { z } from \"zod\";\n\nexport const eventSchema = z.object({\n\ttitle: z.string().min(1, \"Title is required\"),\n\tdescription: z.string().min(1, \"Description is required\"),\n\tstartDate: z.date({\n\t\trequired_error: \"Start date is required\",\n\t}),\n\tendDate: z.date({\n\t\trequired_error: \"End date is required\",\n\t}),\n\tcolor: z.enum([\"blue\", \"green\", \"red\", \"yellow\", \"purple\", \"orange\"], {\n\t\trequired_error: \"Variant is required\",\n\t}),\n});\n\nexport type TEventFormData = z.infer<typeof eventSchema>;\n",
      "type": "registry:component"
    },
    {
      "path": "src/modules/components/calendar/types.ts",
      "content": "export type TCalendarView = \"day\" | \"week\" | \"month\" | \"year\" | \"agenda\";\nexport type TEventColor =\n\t| \"blue\"\n\t| \"green\"\n\t| \"red\"\n\t| \"yellow\"\n\t| \"purple\"\n\t| \"orange\";\n",
      "type": "registry:component"
    }
  ]
}