{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "full-calendar",
  "type": "registry:block",
  "title": "Full Calendar",
  "description": "A full calendar component for scheduling events.",
  "dependencies": [
    "motion",
    "date-fns",
    "re-resizable",
    "zod",
    "react-hook-form",
    "@hookform/resolvers",
    "class-variance-authority",
    "clsx",
    "cmdk",
    "framer-motion",
    "lucide-react"
  ],
  "registryDependencies": [
    "alert-dialog",
    "avatar",
    "badge",
    "button",
    "calendar",
    "command",
    "dialog",
    "dropdown-menu",
    "form",
    "input",
    "label",
    "popover",
    "scroll-area",
    "select",
    "skeleton",
    "sonner",
    "switch",
    "textarea",
    "toggle",
    "tooltip",
    "https://calendar.jeraidi.tech/r/avatar-group.json",
    "https://calendar.jeraidi.tech/r/day-picker.json",
    "https://calendar.jeraidi.tech/r/date-time-picker.json",
    "https://calendar.jeraidi.tech/r/responsive-modal.json"
  ],
  "files": [
    {
      "path": "src/modules/components/calendar/contexts/calendar-context.tsx",
      "content": "\"use client\";\n\nimport React, { createContext, useContext, useState } from \"react\";\nimport type { IEvent, IUser } from \"@/modules/components/calendar/interfaces\";\nimport { TCalendarView, TEventColor } from \"@/modules/components/calendar/types\";\nimport { useLocalStorage } from \"@/modules/components/calendar/hooks\";\n\ninterface ICalendarContext {\n    selectedDate: Date;\n    view: TCalendarView;\n    setView: (view: TCalendarView) => void;\n    agendaModeGroupBy: \"date\" | \"color\";\n    setAgendaModeGroupBy: (groupBy: \"date\" | \"color\") => void;\n    use24HourFormat: boolean;\n    toggleTimeFormat: () => void;\n    setSelectedDate: (date: Date | undefined) => void;\n    selectedUserId: IUser[\"id\"] | \"all\";\n    setSelectedUserId: (userId: IUser[\"id\"] | \"all\") => void;\n    badgeVariant: \"dot\" | \"colored\";\n    setBadgeVariant: (variant: \"dot\" | \"colored\") => void;\n    selectedColors: TEventColor[];\n    filterEventsBySelectedColors: (colors: TEventColor) => void;\n    filterEventsBySelectedUser: (userId: IUser[\"id\"] | \"all\") => void;\n    users: IUser[];\n    events: IEvent[];\n    addEvent: (event: IEvent) => void;\n    updateEvent: (event: IEvent) => void;\n    removeEvent: (eventId: number) => void;\n    clearFilter: () => void;\n}\n\ninterface CalendarSettings {\n    badgeVariant: \"dot\" | \"colored\";\n    view: TCalendarView;\n    use24HourFormat: boolean;\n    agendaModeGroupBy: \"date\" | \"color\";\n}\n\nconst DEFAULT_SETTINGS: CalendarSettings = {\n    badgeVariant: \"colored\",\n    view: \"day\",\n    use24HourFormat: true,\n    agendaModeGroupBy: \"date\"\n};\n\nconst CalendarContext = createContext({} as ICalendarContext);\n\nexport function CalendarProvider({\n                                     children,\n                                     users,\n                                     events,\n                                     badge = \"colored\",\n                                     view = \"day\",\n                                 }: {\n    children: React.ReactNode;\n    users: IUser[];\n    events: IEvent[];\n    view?: TCalendarView;\n    badge?: \"dot\" | \"colored\";\n}) {\n    const [settings, setSettings] = useLocalStorage<CalendarSettings>(\"calendar-settings\", {\n        ...DEFAULT_SETTINGS,\n        badgeVariant: badge,\n        view: view\n    });\n\n    const [badgeVariant, setBadgeVariantState] = useState<\"dot\" | \"colored\">(settings.badgeVariant);\n    const [currentView, setCurrentViewState] = useState<TCalendarView>(settings.view);\n    const [use24HourFormat, setUse24HourFormatState] = useState<boolean>(settings.use24HourFormat);\n    const [agendaModeGroupBy, setAgendaModeGroupByState] = useState<\"date\" | \"color\">(settings.agendaModeGroupBy);\n\n    const [selectedDate, setSelectedDate] = useState(new Date());\n    const [selectedUserId, setSelectedUserId] = useState<IUser[\"id\"] | \"all\">(\"all\");\n    const [selectedColors, setSelectedColors] = useState<TEventColor[]>([]);\n\n    const [allEvents, setAllEvents] = useState<IEvent[]>(events || []);\n    const [filteredEvents, setFilteredEvents] = useState<IEvent[]>(events || []);\n\n    const updateSettings = (newPartialSettings: Partial<CalendarSettings>) => {\n        setSettings({\n            ...settings,\n            ...newPartialSettings\n        });\n    };\n\n    const setBadgeVariant = (variant: \"dot\" | \"colored\") => {\n        setBadgeVariantState(variant);\n        updateSettings({ badgeVariant: variant });\n    };\n\n    const setView = (newView: TCalendarView) => {\n        setCurrentViewState(newView);\n        updateSettings({ view: newView });\n    };\n\n    const toggleTimeFormat = () => {\n        const newValue = !use24HourFormat;\n        setUse24HourFormatState(newValue);\n        updateSettings({ use24HourFormat: newValue });\n    };\n\n    const setAgendaModeGroupBy = (groupBy: \"date\" | \"color\") => {\n        setAgendaModeGroupByState(groupBy);\n        updateSettings({ agendaModeGroupBy: groupBy });\n    };\n\n    const filterEventsBySelectedColors = (color: TEventColor) => {\n        const isColorSelected = selectedColors.includes(color);\n        const newColors = isColorSelected\n            ? selectedColors.filter((c) => c !== color)\n            : [...selectedColors, color];\n\n        if (newColors.length > 0) {\n            const filtered = allEvents.filter((event) => {\n                const eventColor = event.color || \"blue\";\n                return newColors.includes(eventColor);\n            });\n            setFilteredEvents(filtered);\n        } else {\n            setFilteredEvents(allEvents);\n        }\n\n        setSelectedColors(newColors);\n    };\n\n    const filterEventsBySelectedUser = (userId: IUser[\"id\"] | \"all\") => {\n        setSelectedUserId(userId);\n        if (userId === \"all\") {\n            setFilteredEvents(allEvents);\n        } else {\n            const filtered = allEvents.filter((event) => event.user.id === userId);\n            setFilteredEvents(filtered);\n        }\n    };\n\n    const handleSelectDate = (date: Date | undefined) => {\n        if (!date) return;\n        setSelectedDate(date);\n    };\n\n    const addEvent = (event: IEvent) => {\n        setAllEvents((prev) => [...prev, event]);\n        setFilteredEvents((prev) => [...prev, event]);\n    };\n\n    const updateEvent = (event: IEvent) => {\n        const updated = {\n            ...event,\n            startDate: new Date(event.startDate).toISOString(),\n            endDate: new Date(event.endDate).toISOString()\n        };\n\n        setAllEvents((prev) =>\n            prev.map((e) => (e.id === event.id ? updated : e))\n        );\n        setFilteredEvents((prev) =>\n            prev.map((e) => (e.id === event.id ? updated : e))\n        );\n    };\n\n    const removeEvent = (eventId: number) => {\n        setAllEvents((prev) => prev.filter((e) => e.id !== eventId));\n        setFilteredEvents((prev) => prev.filter((e) => e.id !== eventId));\n    };\n\n    const clearFilter = () => {\n        setFilteredEvents(allEvents);\n        setSelectedColors([]);\n        setSelectedUserId(\"all\");\n    };\n\n    const value = {\n        selectedDate,\n        setSelectedDate: handleSelectDate,\n        selectedUserId,\n        setSelectedUserId,\n        badgeVariant,\n        setBadgeVariant,\n        users,\n        selectedColors,\n        filterEventsBySelectedColors,\n        filterEventsBySelectedUser,\n        events: filteredEvents,\n        view: currentView,\n        use24HourFormat,\n        toggleTimeFormat,\n        setView,\n        agendaModeGroupBy,\n        setAgendaModeGroupBy,\n        addEvent,\n        updateEvent,\n        removeEvent,\n        clearFilter\n    };\n\n    return (\n        <CalendarContext.Provider value={value}>\n            {children}\n        </CalendarContext.Provider>\n    );\n}\n\nexport function useCalendar(): ICalendarContext {\n    const context = useContext(CalendarContext);\n    if (!context)\n        throw new Error(\"useCalendar must be used within a CalendarProvider.\");\n    return context;\n}\n",
      "type": "registry:component"
    },
    {
      "path": "src/modules/components/calendar/contexts/dnd-context.tsx",
      "content": "\"use client\";\n\nimport React, {createContext, useContext, useState, ReactNode, useCallback, useEffect} from 'react';\nimport { IEvent } from '@/modules/components/calendar/interfaces';\nimport {toast} from \"sonner\";\nimport {useCalendar} from \"@/modules/components/calendar/contexts/calendar-context\";\n\ninterface DragDropContextType {\n  draggedEvent: IEvent | null;\n  isDragging: boolean;\n  startDrag: (event: IEvent) => void;\n  endDrag: () => void;\n  handleEventDrop: (date: Date, hour?: number, minute?: number) => void;\n  onEventDropped?: (event: IEvent, newStartDate: Date, newEndDate: Date) => void;\n  setOnEventDropped: (callback: (event: IEvent, newStartDate: Date, newEndDate: Date) => void) => void;\n}\n\nconst DragDropContext = createContext<DragDropContextType | undefined>(undefined);\n\nexport function DndProvider({ children }: { children: ReactNode }) {\n  const { updateEvent } = useCalendar();\n  const [draggedEvent, setDraggedEvent] = useState<IEvent | null>(null);\n  const [isDragging, setIsDragging] = useState(false);\n  const [onEventDropped, setOnEventDroppedCallback] = useState<\n    ((event: IEvent, newStartDate: Date, newEndDate: Date) => void) | undefined\n  >(undefined);\n\n  const startDrag = (event: IEvent) => {\n    setDraggedEvent(event);\n    setIsDragging(true);\n  };\n\n  const endDrag = () => {\n    setDraggedEvent(null);\n    setIsDragging(false);\n  };\n\n  const handleEventDrop = (targetDate: Date, hour?: number, minute?: number) => {\n    if (!draggedEvent || !onEventDropped) return;\n\n    const originalStart = new Date(draggedEvent.startDate);\n    const originalEnd = new Date(draggedEvent.endDate);\n    const duration = originalEnd.getTime() - originalStart.getTime();\n\n    const newStart = new Date(targetDate);\n    if (hour !== undefined) {\n      newStart.setHours(hour);\n      newStart.setMinutes(minute || 0);\n    } else {\n      newStart.setHours(originalStart.getHours());\n      newStart.setMinutes(originalStart.getMinutes());\n    }\n\n    // Create new end date based on the same duration\n    const newEnd = new Date(newStart.getTime() + duration);\n\n    // Check if the event is being dropped in the same position\n    const isSamePosition =\n        originalStart.getFullYear() === newStart.getFullYear() &&\n        originalStart.getMonth() === newStart.getMonth() &&\n        originalStart.getDate() === newStart.getDate() &&\n        originalStart.getHours() === newStart.getHours() &&\n        originalStart.getMinutes() === newStart.getMinutes();\n\n    if (!isSamePosition) {\n      onEventDropped(draggedEvent, newStart, newEnd);\n    }\n\n    endDrag();\n  };\n\n  const setOnEventDropped = (callback: (event: IEvent, newStartDate: Date, newEndDate: Date) => void) => {\n    setOnEventDroppedCallback(() => callback);\n  };\n\n  const handleEventUpdate = useCallback((event: IEvent, newStartDate: Date, newEndDate: Date) => {\n    try {\n      const updatedEvent = {\n        ...event,\n        startDate: newStartDate.toISOString(),\n        endDate: newEndDate.toISOString(),\n      };\n\n      updateEvent(updatedEvent);\n      toast.success(\"Event updated successfully\");\n    } catch {\n      toast.error(\"Failed to update event\");\n    }\n  }, [updateEvent]);\n\n  useEffect(() => {\n    setOnEventDropped(handleEventUpdate);\n  }, [setOnEventDropped, handleEventUpdate]);\n\n  return (\n    <DragDropContext.Provider\n      value={{\n        draggedEvent,\n        isDragging,\n        startDrag,\n        endDrag,\n        handleEventDrop,\n        onEventDropped,\n        setOnEventDropped,\n      }}\n    >\n      {children}\n    </DragDropContext.Provider>\n  );\n}\n\nexport function useDragDrop() {\n  const context = useContext(DragDropContext);\n  if (context === undefined) {\n    throw new Error('useDragDrop must be used within a DragDropProvider');\n  }\n  return context;\n}",
      "type": "registry:component"
    },
    {
      "path": "src/modules/components/calendar/dialogs/add-edit-event-dialog.tsx",
      "content": "import {useForm} from \"react-hook-form\";\nimport {format, addMinutes, set} from \"date-fns\";\nimport {zodResolver} from \"@hookform/resolvers/zod\";\nimport {ReactNode, useEffect, useMemo} from \"react\";\nimport {toast} from \"sonner\";\n\nimport {useDisclosure} from \"@/modules/components/calendar/hooks\";\nimport {useCalendar} from \"@/modules/components/calendar/contexts/calendar-context\";\nimport {eventSchema, TEventFormData} from \"@/modules/components/calendar/schemas\";\nimport {COLORS} from \"@/modules/components/calendar/constants\";\nimport {IEvent} from \"@/modules/components/calendar/interfaces\";\n\nimport {Form, FormControl, FormField, FormItem, FormLabel, FormMessage} from \"@/components/ui/form\";\nimport {Input} from \"@/components/ui/input\";\nimport {Select, SelectContent, SelectItem, SelectTrigger, SelectValue} from \"@/components/ui/select\";\nimport {\n    Dialog,\n    DialogClose,\n    DialogContent,\n    DialogTrigger,\n    DialogDescription,\n    DialogHeader,\n    DialogTitle,\n    DialogFooter\n} from \"@/components/ui/dialog\";\nimport {Button} from \"@/components/ui/button\";\nimport {Textarea} from \"@/components/ui/textarea\";\nimport {DateTimePicker} from \"@/components/ui/date-time-picker\";\n\ninterface IProps {\n    children: ReactNode;\n    startDate?: Date;\n    startTime?: { hour: number; minute: number };\n    event?: IEvent;\n}\n\nexport function AddEditEventDialog({children, startDate, startTime, event}: IProps) {\n    const {isOpen, onClose, onToggle} = useDisclosure();\n    const {addEvent, updateEvent} = useCalendar();\n    const isEditing = !!event;\n\n    const initialDates = useMemo(() => {\n        if (!isEditing && !event) {\n            if (!startDate) {\n                const now = new Date();\n                return { startDate: now, endDate: addMinutes(now, 30) };\n            }\n            const start = startTime\n                ? set(new Date(startDate), {\n                    hours: startTime.hour,\n                    minutes: startTime.minute,\n                    seconds: 0,\n                })\n                : new Date(startDate);\n            const end = addMinutes(start, 30);\n            return { startDate: start, endDate: end };\n        }\n\n        return {\n            startDate: new Date(event.startDate),\n            endDate: new Date(event.endDate),\n        };\n    }, [startDate, startTime, event, isEditing]);\n\n    const form = useForm<TEventFormData>({\n        resolver: zodResolver(eventSchema),\n        defaultValues: {\n            title: event?.title ?? \"\",\n            description: event?.description ?? \"\",\n            startDate: initialDates.startDate,\n            endDate: initialDates.endDate,\n            color: event?.color ?? \"blue\",\n        },\n    });\n\n    useEffect(() => {\n        form.reset({\n            title: event?.title ?? \"\",\n            description: event?.description ?? \"\",\n            startDate: initialDates.startDate,\n            endDate: initialDates.endDate,\n            color: event?.color ?? \"blue\",\n        });\n    }, [event, initialDates, form.reset]);\n\n\n    const onSubmit = (values: TEventFormData) => {\n        try {\n            const formattedEvent: IEvent = {\n                ...values,\n                startDate: format(values.startDate, \"yyyy-MM-dd'T'HH:mm:ss\"),\n                endDate: format(values.endDate, \"yyyy-MM-dd'T'HH:mm:ss\"),\n                id: isEditing ? event.id : Math.floor(Math.random() * 1000000),\n                user: isEditing\n                    ? event.user\n                    : {\n                        id: Math.floor(Math.random() * 1000000).toString(),\n                        name: \"Jeraidi Yassir\",\n                        picturePath: null,\n                    },\n                color: values.color,\n            };\n\n            if (isEditing) {\n                updateEvent(formattedEvent);\n                toast.success(\"Event updated successfully\");\n            } else {\n                addEvent(formattedEvent);\n                toast.success(\"Event created successfully\");\n            }\n\n            onClose();\n            form.reset();\n        } catch (error) {\n            console.error(`Error ${isEditing ? \"editing\" : \"adding\"} event:`, error);\n            toast.error(`Failed to ${isEditing ? \"edit\" : \"add\"} event`);\n        }\n    };\n\n    return (\n        <Dialog open={isOpen} onOpenChange={onToggle} modal={false}>\n            <DialogTrigger asChild>{children}</DialogTrigger>\n            <DialogContent>\n                <DialogHeader>\n                    <DialogTitle>{isEditing ? \"Edit Event\" : \"Add New Event\"}</DialogTitle>\n                    <DialogDescription>\n                        {isEditing ? \"Modify your existing event.\" : \"Create a new event for your calendar.\"}\n                    </DialogDescription>\n                </DialogHeader>\n\n                <Form {...form}>\n                    <form id=\"event-form\" onSubmit={form.handleSubmit(onSubmit)} className=\"grid gap-4 py-4\">\n                        <FormField\n                            control={form.control}\n                            name=\"title\"\n                            render={({field, fieldState}) => (\n                                <FormItem>\n                                    <FormLabel htmlFor=\"title\" className=\"required\">Title</FormLabel>\n                                    <FormControl>\n                                        <Input\n                                            id=\"title\"\n                                            placeholder=\"Enter a title\"\n                                            {...field}\n                                            className={fieldState.invalid ? \"border-red-500\" : \"\"}\n                                        />\n                                    </FormControl>\n                                    <FormMessage/>\n                                </FormItem>\n                            )}\n                        />\n                        <FormField\n                            control={form.control}\n                            name=\"startDate\"\n                            render={({field}) => (\n                                <DateTimePicker form={form} field={field}/>\n                            )}\n                        />\n                        <FormField\n                            control={form.control}\n                            name=\"endDate\"\n                            render={({field}) => (\n                                <DateTimePicker form={form} field={field}/>\n                            )}\n                        />\n                        <FormField\n                            control={form.control}\n                            name=\"color\"\n                            render={({field, fieldState}) => (\n                                <FormItem>\n                                    <FormLabel className=\"required\">Variant</FormLabel>\n                                    <FormControl>\n                                        <Select value={field.value} onValueChange={field.onChange}>\n                                            <SelectTrigger\n                                                className={`w-full ${fieldState.invalid ? \"border-red-500\" : \"\"}`}>\n                                                <SelectValue placeholder=\"Select a variant\"/>\n                                            </SelectTrigger>\n                                            <SelectContent>\n                                                {COLORS.map((color) => (\n                                                    <SelectItem value={color} key={color}>\n                                                        <div className=\"flex items-center gap-2\">\n                                                            <div\n                                                                className={`size-3.5 rounded-full bg-${color}-600 dark:bg-${color}-700`}/>\n                                                            {color}\n                                                        </div>\n                                                    </SelectItem>\n                                                ))}\n                                            </SelectContent>\n                                        </Select>\n                                    </FormControl>\n                                    <FormMessage/>\n                                </FormItem>\n                            )}\n                        />\n                        <FormField\n                            control={form.control}\n                            name=\"description\"\n                            render={({field, fieldState}) => (\n                                <FormItem>\n                                    <FormLabel className=\"required\">Description</FormLabel>\n                                    <FormControl>\n                                        <Textarea\n                                            {...field}\n                                            placeholder=\"Enter a description\"\n                                            className={fieldState.invalid ? \"border-red-500\" : \"\"}\n                                        />\n                                    </FormControl>\n                                    <FormMessage/>\n                                </FormItem>\n                            )}\n                        />\n                    </form>\n                </Form>\n                <DialogFooter>\n                    <DialogClose asChild>\n                        <Button type=\"button\" variant=\"outline\">Cancel</Button>\n                    </DialogClose>\n                    <Button form=\"event-form\" type=\"submit\">\n                        {isEditing ? \"Save Changes\" : \"Create Event\"}\n                    </Button>\n                </DialogFooter>\n            </DialogContent>\n        </Dialog>\n    );\n}",
      "type": "registry:component"
    },
    {
      "path": "src/modules/components/calendar/dialogs/delete-event-dialog.tsx",
      "content": "import {useCalendar} from \"@/modules/components/calendar/contexts/calendar-context\";\nimport {toast} from \"sonner\";\nimport {Button} from \"@/components/ui/button\";\nimport {TrashIcon} from \"lucide-react\";\nimport {\n    AlertDialog,\n    AlertDialogAction, AlertDialogCancel,\n    AlertDialogContent, AlertDialogDescription, AlertDialogFooter,\n    AlertDialogHeader, AlertDialogTitle,\n    AlertDialogTrigger\n} from \"@/components/ui/alert-dialog\";\n\ninterface DeleteEventDialogProps {\n    eventId: number;\n}\n\nexport default function DeleteEventDialog(\n    {\n        eventId\n    }: DeleteEventDialogProps\n) {\n\n    const {removeEvent} = useCalendar()\n\n    const deleteEvent = () => {\n        try {\n            removeEvent(eventId);\n            toast.success(\"Event deleted successfully.\");\n        } catch {\n            toast.error(\"Error deleting event.\");\n        }\n    }\n\n    if (!eventId) {\n        return null;\n    }\n\n    return (\n        <AlertDialog>\n            <AlertDialogTrigger asChild>\n                <Button variant=\"destructive\"\n                >\n                    <TrashIcon />\n                    Delete\n                </Button>\n            </AlertDialogTrigger>\n            <AlertDialogContent>\n                <AlertDialogHeader>\n                    <AlertDialogTitle>Are you absolutely sure?</AlertDialogTitle>\n                    <AlertDialogDescription>\n                        This action cannot be undone. This will permanently delete your\n                        event and remove event data from our servers.\n                    </AlertDialogDescription>\n                </AlertDialogHeader>\n                <AlertDialogFooter>\n                    <AlertDialogCancel>Cancel</AlertDialogCancel>\n                    <AlertDialogAction onClick={deleteEvent}>Continue</AlertDialogAction>\n                </AlertDialogFooter>\n            </AlertDialogContent>\n        </AlertDialog>\n    )\n}",
      "type": "registry:component"
    },
    {
      "path": "src/modules/components/calendar/dialogs/event-details-dialog.tsx",
      "content": "\"use client\";\n\nimport {format, parseISO} from \"date-fns\";\nimport {Calendar, Clock, Text, User} from \"lucide-react\";\n\nimport {\n    Dialog,\n    DialogContent,\n    DialogHeader,\n    DialogTitle,\n    DialogTrigger,\n    DialogClose,\n} from \"@/components/ui/dialog\";\nimport {ScrollArea} from \"@/components/ui/scroll-area\";\n\nimport type {IEvent} from \"@/modules/components/calendar/interfaces\";\nimport {ReactNode} from \"react\";\nimport {AddEditEventDialog} from \"@/modules/components/calendar/dialogs/add-edit-event-dialog\";\nimport {Button} from \"@/components/ui/button\";\nimport {toast} from \"sonner\";\nimport {formatTime} from \"@/modules/components/calendar/helpers\";\nimport {useCalendar} from \"@/modules/components/calendar/contexts/calendar-context\";\n\ninterface IProps {\n    event: IEvent;\n    children: ReactNode;\n}\n\nexport function EventDetailsDialog({event, children}: IProps) {\n    const startDate = parseISO(event.startDate);\n    const endDate = parseISO(event.endDate);\n    const {use24HourFormat, removeEvent} = useCalendar()\n\n    const deleteEvent = (eventId : number) => {\n        try {\n            removeEvent(eventId);\n            toast.success(\"Event deleted successfully.\");\n        }catch {\n            toast.error(\"Error deleting event.\");\n        }\n    }\n\n    return (\n        <Dialog>\n            <DialogTrigger asChild>{children}</DialogTrigger>\n            <DialogContent>\n                <DialogHeader>\n                    <DialogTitle>{event.title}</DialogTitle>\n                </DialogHeader>\n\n                <ScrollArea className=\"max-h-[80vh]\">\n                    <div className=\"space-y-4 p-4\">\n                        <div className=\"flex items-start gap-2\">\n                            <User className=\"mt-1 size-4 shrink-0 text-muted-foreground\"/>\n                            <div>\n                                <p className=\"text-sm font-medium\">Responsible</p>\n                                <p className=\"text-sm text-muted-foreground\">\n                                    {event.user.name}\n                                </p>\n                            </div>\n                        </div>\n\n                        <div className=\"flex items-start gap-2\">\n                            <Calendar className=\"mt-1 size-4 shrink-0 text-muted-foreground\"/>\n                            <div>\n                                <p className=\"text-sm font-medium\">Start Date</p>\n                                <p className=\"text-sm text-muted-foreground\">\n                                    {format(startDate, \"EEEE dd MMMM\")}\n                                    <span className=\"mx-1\">\n                                        at\n                                    </span>\n                                    {formatTime(parseISO(event.startDate), use24HourFormat)}\n                                </p>\n                            </div>\n                        </div>\n\n                        <div className=\"flex items-start gap-2\">\n                            <Clock className=\"mt-1 size-4 shrink-0 text-muted-foreground\"/>\n                            <div>\n                                <p className=\"text-sm font-medium\">End Date</p>\n                                <p className=\"text-sm text-muted-foreground\">\n                                    {format(endDate, \"EEEE dd MMMM\")}\n                                    <span className=\"mx-1\">\n                                        at\n                                    </span>\n                                    {formatTime(parseISO(event.endDate), use24HourFormat)}\n                                </p>\n                            </div>\n                        </div>\n\n                        <div className=\"flex items-start gap-2\">\n                            <Text className=\"mt-1 size-4 shrink-0 text-muted-foreground\"/>\n                            <div>\n                                <p className=\"text-sm font-medium\">Description</p>\n                                <p className=\"text-sm text-muted-foreground\">\n                                    {event.description}\n                                </p>\n                            </div>\n                        </div>\n                    </div>\n                </ScrollArea>\n                <div className=\"flex justify-end gap-2\">\n                    <AddEditEventDialog event={event}>\n                        <Button variant=\"outline\">\n                            Edit\n                        </Button>\n                    </AddEditEventDialog>\n                    <Button variant=\"destructive\" onClick={\n                        () => {\n                            deleteEvent(event.id);\n                        }\n                    }>\n                        Delete\n                    </Button>\n                </div>\n                <DialogClose/>\n            </DialogContent>\n        </Dialog>\n    );\n}\n",
      "type": "registry:component"
    },
    {
      "path": "src/modules/components/calendar/dialogs/events-list-dialog.tsx",
      "content": "import {formatTime} from \"@/modules/components/calendar/helpers\";\nimport {\n    ResponsiveModal,\n    ResponsiveModalContent,\n    ResponsiveModalTrigger,\n    ResponsiveModalHeader,\n    ResponsiveModalTitle\n} from \"@/components/ui/responsive-modal\";\nimport {cn} from \"@/lib/utils\";\n\nimport {ReactNode} from \"react\";\nimport {IEvent} from \"@/modules/components/calendar/interfaces\";\nimport {dayCellVariants} from \"@/modules/components/calendar/views/month-view/day-cell\";\nimport {EventBullet} from \"@/modules/components/calendar/views/month-view/event-bullet\";\nimport {useCalendar} from \"@/modules/components/calendar/contexts/calendar-context\";\nimport {format} from \"date-fns\";\n\ninterface EventListDialogProps {\n    date: Date;\n    events: IEvent[];\n    maxVisibleEvents?: number;\n    children?: ReactNode;\n}\n\nexport function EventListDialog({\n                                    date,\n                                    events,\n                                    maxVisibleEvents = 3,\n                                    children\n                                }: EventListDialogProps) {\n    const cellEvents = events;\n    const hiddenEventsCount = Math.max(cellEvents.length - maxVisibleEvents, 0);\n    const {badgeVariant, use24HourFormat} = useCalendar();\n\n    const defaultTrigger = (\n        <span className=\"cursor-pointer\">\n      <span className=\"sm:hidden\">\n        +{hiddenEventsCount}\n      </span>\n      <span className=\"hidden sm:inline py-0.5 px-2 my-1 rounded-xl border\">\n         {hiddenEventsCount}\n          <span className=\"mx-1\">more...</span>\n      </span>\n    </span>\n    );\n\n    return (\n        <ResponsiveModal>\n            <ResponsiveModalTrigger asChild>\n                {children || defaultTrigger}\n            </ResponsiveModalTrigger>\n            <ResponsiveModalContent className=\"sm:max-w-[425px]\">\n                <ResponsiveModalHeader>\n                    <ResponsiveModalTitle className='my-2'>\n                        <div className=\"flex items-center gap-2\">\n                            <EventBullet color={cellEvents[0]?.color} className=\"\"/>\n                            <p className=\"text-sm font-medium\">\n                                Events on {\n                                format(date, \"EEEE, MMMM d, yyyy\")\n                            }\n                            </p>\n                        </div>\n                    </ResponsiveModalTitle>\n                </ResponsiveModalHeader>\n                <div className=\"max-h-[60vh] overflow-y-auto space-y-2\">\n                    {\n                        cellEvents.length > 0 ? (\n                            cellEvents.map((event) => (\n                                <div\n                                    key={event.id}\n                                    className={cn(\n                                        \"flex items-center gap-2 p-2 border rounded-md hover:bg-muted\",\n                                        {\n                                            [dayCellVariants({color: event.color})]: badgeVariant === \"colored\",\n                                        }\n                                    )}\n                                >\n                                    <EventBullet color={event.color} className=\"\"/>\n                                    <div className=\"flex-1\">\n                                        <p className=\"text-sm font-medium\">{event.title}</p>\n                                        <p\n                                            className={cn(\"text-xs\", {\n                                                \"text-muted\": badgeVariant === \"colored\",\n                                                \"text-muted-foreground\": badgeVariant === \"dot\",\n                                            })}\n                                        >\n                                            {formatTime(event.startDate, use24HourFormat)}\n                                        </p>\n                                    </div>\n                                </div>\n                            ))) : (\n                            <p className=\"text-sm text-muted-foreground\">\n                                No events for this date.\n                            </p>\n                        )\n                    }\n                </div>\n            </ResponsiveModalContent>\n        </ResponsiveModal>\n    );\n}",
      "type": "registry:component"
    },
    {
      "path": "src/modules/components/calendar/dnd/draggable-event.tsx",
      "content": "import React, {ReactNode} from 'react';\nimport {motion} from 'framer-motion';\nimport {useDragDrop} from '@/modules/components/calendar/contexts/dnd-context';\nimport {IEvent} from '@/modules/components/calendar/interfaces';\n\ninterface DraggableEventProps {\n    event: IEvent;\n    children: ReactNode;\n    className?: string;\n}\n\nexport function DraggableEvent({event, children, className}: DraggableEventProps) {\n    const {startDrag, endDrag, isDragging, draggedEvent} = useDragDrop();\n\n    const isCurrentlyDragged = isDragging && draggedEvent?.id === event.id;\n\n    const handleClick = (e: React.MouseEvent<HTMLDivElement>) => {\n        e.stopPropagation();\n    };\n\n    return (\n        <motion.div\n            className={`${className || ''} ${isCurrentlyDragged ? 'opacity-50 cursor-grabbing' : 'cursor-grab'}`}\n            draggable\n            onClick={(e: React.MouseEvent<HTMLDivElement>) => handleClick(e)}\n            onDragStart={(e) => {\n                (e as DragEvent).dataTransfer!.setData('text/plain', event.id.toString());\n                startDrag(event);\n            }}\n            onDragEnd={() => {\n                endDrag();\n            }}\n        >\n            {children}\n        </motion.div>\n    );\n}",
      "type": "registry:component"
    },
    {
      "path": "src/modules/components/calendar/dnd/droppable-area.tsx",
      "content": "import React, { ReactNode } from 'react';\nimport { useDragDrop } from '@/modules/components/calendar/contexts/dnd-context';\n\ninterface DroppableAreaProps {\n  date: Date;\n  hour?: number;\n  minute?: number;\n  children: ReactNode;\n  className?: string;\n}\n\nexport function DroppableArea({ date, hour, minute, children, className }: DroppableAreaProps) {\n  const { handleEventDrop, isDragging } = useDragDrop();\n  \n  return (\n    <div\n      className={`${className || ''} ${isDragging ? 'drop-target' : ''}`}\n      onDragOver={(e) => {\n        // Prevent default to allow drop\n        e.preventDefault();\n        e.currentTarget.classList.add('bg-primary/10');\n      }}\n      onDragLeave={(e) => {\n        e.currentTarget.classList.remove('bg-primary/10');\n      }}\n      onDrop={(e) => {\n        e.preventDefault();\n        e.currentTarget.classList.remove('bg-primary/10');\n        handleEventDrop(date, hour, minute);\n      }}\n    >\n      {children}\n    </div>\n  );\n}",
      "type": "registry:component"
    },
    {
      "path": "src/modules/components/calendar/dnd/resizable-event.tsx",
      "content": "'use client';\n\nimport React, { useState, useCallback, useMemo } from \"react\";\nimport { Resizable, ResizeCallback } from \"re-resizable\";\nimport {\n    parseISO,\n    addMinutes,\n    differenceInMinutes,\n    format,\n    isAfter,\n    isBefore,\n} from \"date-fns\";\nimport { motion } from \"framer-motion\";\n\nimport { useCalendar } from \"@/modules/components/calendar/contexts/calendar-context\";\nimport { cn } from \"@/lib/utils\";\n\nimport type { IEvent } from \"@/modules/components/calendar/interfaces\";\n\ninterface ResizableEventBlockProps {\n    event: IEvent;\n    children: React.ReactNode;\n    className?: string;\n}\n\nconst PIXELS_PER_HOUR = 96;\nconst MINUTES_PER_PIXEL = 60 / PIXELS_PER_HOUR;\nconst MIN_DURATION = 15; // in minutes\n\nexport function ResizableEvent({\n                                   event,\n                                   children,\n                                   className,\n                               }: ResizableEventBlockProps) {\n    const { updateEvent, use24HourFormat } = useCalendar();\n\n    const [isResizing, setIsResizing] = useState(false);\n    const [resizePreview, setResizePreview] = useState<{\n        start: string;\n        end: string;\n    } | null>(null);\n\n    const start = useMemo(() => parseISO(event.startDate), [event.startDate]);\n    const end = useMemo(() => parseISO(event.endDate), [event.endDate]);\n    const durationInMinutes = useMemo(() => differenceInMinutes(end, start), [start, end]);\n\n    const resizeBoundaries = useMemo(() => {\n        const dayStart = new Date(start);\n        dayStart.setHours(0, 0, 0, 0);\n\n        const dayEnd = new Date(start);\n        dayEnd.setHours(23, 59, 59, 999);\n\n        return { dayStart, dayEnd };\n    }, [start]);\n\n    const handleResizeStart = useCallback(() => {\n        setIsResizing(true);\n    }, []);\n\n    const handleResize: ResizeCallback = useCallback(\n        (_, direction, ref) => {\n            const newHeight = parseInt(ref.style.height, 10);\n            const newDuration = Math.max(\n                MIN_DURATION,\n                Math.round((newHeight + 8) * MINUTES_PER_PIXEL)\n            );\n            const delta = newDuration - durationInMinutes;\n\n            let newStart = start;\n            let newEnd = end;\n\n            if (direction.includes(\"top\")) {\n                newStart = addMinutes(start, -delta);\n            } else if (direction.includes(\"bottom\")) {\n                newEnd = addMinutes(end, delta);\n            }\n\n            if (isBefore(newStart, resizeBoundaries.dayStart)) {\n                newStart = resizeBoundaries.dayStart;\n            }\n            if (isAfter(newEnd, resizeBoundaries.dayEnd)) {\n                newEnd = resizeBoundaries.dayEnd;\n            }\n\n            setResizePreview({\n                start: format(newStart, use24HourFormat ? \"HH:mm\" : \"h:mm a\"),\n                end: format(newEnd, use24HourFormat ? \"HH:mm\" : \"h:mm a\"),\n            });\n\n            updateEvent({\n                ...event,\n                startDate: newStart.toISOString(),\n                endDate: newEnd.toISOString(),\n            });\n        },\n        [start, end, durationInMinutes, resizeBoundaries, use24HourFormat, updateEvent, event]\n    );\n\n    const handleResizeStop = useCallback(() => {\n        setIsResizing(false);\n        setResizePreview(null);\n    }, []);\n\n    const resizeConfig = useMemo(() => ({\n        minHeight: 15,\n        maxHeight: 1440,\n        enable: {\n            top: true,\n            bottom: true,\n            topRight: false,\n            bottomRight: false,\n            bottomLeft: false,\n            topLeft: false,\n        },\n        handleStyles: {\n            top: {\n                cursor: \"ns-resize\",\n                height: \"8px\",\n                top: \"-4px\",\n                backgroundColor: \"transparent\",\n            },\n            bottom: {\n                cursor: \"ns-resize\",\n                height: \"8px\",\n                bottom: \"-4px\",\n                backgroundColor: \"transparent\",\n            },\n        },\n        handleClasses: {\n            top: \"transition-colors rounded-sm\",\n            bottom: \"transition-colors rounded-sm\",\n        },\n        onResizeStart: handleResizeStart,\n        onResize: handleResize,\n        onResizeStop: handleResizeStop,\n        className: cn(\n            \"transition-all duration-200\",\n            isResizing && \"z-50 shadow-lg\"\n        ),\n    }), [handleResizeStart, handleResize, handleResizeStop, isResizing]);\n\n    return (\n        <motion.div\n            initial={{ opacity: 0, scale: 0.95 }}\n            animate={{ opacity: 1, scale: 1 }}\n            exit={{ opacity: 0, scale: 0.95 }}\n            transition={{ duration: 0.2 }}\n            className={cn(\"relative group\", className)}\n        >\n            <Resizable {...resizeConfig}>\n                {children}\n            </Resizable>\n\n            {isResizing && resizePreview && (\n                <motion.div\n                    initial={{ opacity: 0, y: -10 }}\n                    animate={{ opacity: 1, y: 0 }}\n                    exit={{ opacity: 0, y: -10 }}\n                    className=\"absolute -top-8 left-1/2 transform -translate-x-1/2 bg-gray-900 text-white text-xs px-2 py-1 rounded shadow-lg z-50 whitespace-nowrap\"\n                >\n                    {resizePreview.start} - {resizePreview.end}\n                </motion.div>\n            )}\n        </motion.div>\n    );\n}\n",
      "type": "registry:component"
    },
    {
      "path": "src/modules/components/calendar/header/calendar-header.tsx",
      "content": "\"use client\";\n\nimport {\n    CalendarRange,\n    Columns, Grid2X2,\n    Grid3X3,\n    LayoutList,\n    List,\n    Plus,\n} from \"lucide-react\";\nimport {motion} from \"framer-motion\";\n\nimport {Button} from \"@/components/ui/button\";\nimport {\n    buttonHover,\n    slideFromLeft,\n    slideFromRight,\n    transition,\n} from \"@/modules/components/calendar/animations\";\n\nimport {UserSelect} from \"@/modules/components/calendar/header/user-select\";\nimport {TodayButton} from \"@/modules/components/calendar/header/today-button\";\nimport {DateNavigator} from \"@/modules/components/calendar/header/date-navigator\";\nimport {AddEditEventDialog} from \"@/modules/components/calendar/dialogs/add-edit-event-dialog\";\nimport FilterEvents from \"@/modules/components/calendar/header/filter\";\n\n\nimport {ButtonGroup} from \"@/components/ui/button-group\";\nimport {useCalendar} from \"@/modules/components/calendar/contexts/calendar-context\";\nimport {Toggle} from \"@/components/ui/toggle\";\nimport {Settings} from \"@/modules/components/calendar/settings/settings\";\n\nexport const MotionButton = motion.create(Button);\n\nexport function CalendarHeader() {\n    const {\n        view,\n        setView,\n        events\n    } = useCalendar();\n\n    return (\n        <div className=\"flex flex-col gap-4 border-b p-4 lg:flex-row lg:items-center lg:justify-between\">\n            <motion.div\n                className=\"flex items-center gap-3\"\n                variants={slideFromLeft}\n                initial=\"initial\"\n                animate=\"animate\"\n                transition={transition}\n            >\n                <TodayButton/>\n                <DateNavigator view={view} events={events}/>\n            </motion.div>\n\n            <motion.div\n                className=\"flex flex-col gap-4 lg:flex-row lg:items-center lg:gap-1.5\"\n                variants={slideFromRight}\n                initial=\"initial\"\n                animate=\"animate\"\n                transition={transition}\n            >\n                <div className=\"options flex-wrap flex items-center gap-4 md:gap-2\">\n                    <FilterEvents/>\n                    <MotionButton\n                        variant=\"outline\"\n                        onClick={() => setView(\"agenda\")}\n                        asChild\n                        variants={buttonHover}\n                        whileHover=\"hover\"\n                        whileTap=\"tap\"\n                    >\n                        <Toggle className='relative'>\n                            {view === \"agenda\" ? (\n                                <>\n                                    <CalendarRange/>\n                                    <span className=\"absolute -top-1 -right-1 size-3 rounded-full bg-green-400\"></span>\n                                </>\n                            ) : <LayoutList/>}\n                        </Toggle>\n                    </MotionButton>\n                    <ButtonGroup className=\"flex\">\n                        <MotionButton\n                            variant={view === \"day\" ? \"default\" : \"outline\"}\n                            aria-label=\"View by day\"\n                            onClick={() => {\n                                setView(\"day\");\n                            }}\n                            variants={buttonHover}\n                            whileHover=\"hover\"\n                            whileTap=\"tap\"\n                        >\n                            <List className=\"h-4 w-4\"/>\n                        </MotionButton>\n\n                        <MotionButton\n                            variant={view === \"week\" ? \"default\" : \"outline\"}\n                            aria-label=\"View by week\"\n                            onClick={() => setView(\"week\")}\n                            variants={buttonHover}\n                            whileHover=\"hover\"\n                            whileTap=\"tap\"\n                        >\n                            <Columns className=\"h-4 w-4\"/>\n                        </MotionButton>\n\n                        <MotionButton\n                            variant={view === \"month\" ? \"default\" : \"outline\"}\n                            aria-label=\"View by month\"\n                            onClick={() => setView(\"month\")}\n                            variants={buttonHover}\n                            whileHover=\"hover\"\n                            whileTap=\"tap\"\n                        >\n                            <Grid3X3 className=\"h-4 w-4\"/>\n                        </MotionButton>\n                        <MotionButton\n                            variant={view === \"year\" ? \"default\" : \"outline\"}\n                            aria-label=\"View by year\"\n                            onClick={() => setView(\"year\")}\n                            variants={buttonHover}\n                            whileHover=\"hover\"\n                            whileTap=\"tap\"\n                        >\n                            <Grid2X2 className=\"h-4 w-4\"/>\n                        </MotionButton>\n                    </ButtonGroup>\n                </div>\n\n                <div className=\"flex flex-col gap-4 lg:flex-row lg:items-center lg:gap-1.5\">\n                    <UserSelect/>\n\n                    <AddEditEventDialog>\n                        <MotionButton\n                            variants={buttonHover}\n                            whileHover=\"hover\"\n                            whileTap=\"tap\"\n                        >\n                            <Plus className=\"h-4 w-4\"/>\n                            Add Event\n                        </MotionButton>\n                    </AddEditEventDialog>\n                </div>\n                <Settings/>\n            </motion.div>\n        </div>\n    );\n}",
      "type": "registry:component"
    },
    {
      "path": "src/modules/components/calendar/header/date-navigator.tsx",
      "content": "import { useMemo } from \"react\";\nimport { formatDate } from \"date-fns\";\nimport { ChevronLeft, ChevronRight } from \"lucide-react\";\nimport { motion, AnimatePresence } from \"framer-motion\";\n\nimport { useCalendar } from \"@/modules/components/calendar/contexts/calendar-context\";\nimport {\n  buttonHover,\n  transition,\n} from \"@/modules/components/calendar/animations\";\n\nimport { Badge } from \"@/components/ui/badge\";\nimport { Button } from \"@/components/ui/button\";\n\nimport {\n  getEventsCount,\n  navigateDate,\n  rangeText,\n} from \"@/modules/components/calendar/helpers\";\n\nimport type { IEvent } from \"@/modules/components/calendar/interfaces\";\nimport type { TCalendarView } from \"@/modules/components/calendar/types\";\n\ninterface IProps {\n  view: TCalendarView;\n  events: IEvent[];\n}\n\nconst MotionButton = motion.create(Button);\nconst MotionBadge = motion.create(Badge);\n\nexport function DateNavigator({ view, events }: IProps) {\n  const { selectedDate, setSelectedDate } = useCalendar();\n\n  const month = formatDate(selectedDate, \"MMMM\");\n  const year = selectedDate.getFullYear();\n\n\n  const eventCount = useMemo(\n    () => getEventsCount(events, selectedDate, view),\n    [events, selectedDate, view]\n  );\n\n  const handlePrevious = () =>\n    setSelectedDate(navigateDate(selectedDate, view, \"previous\"));\n  const handleNext = () =>\n    setSelectedDate(navigateDate(selectedDate, view, \"next\"));\n\n  return (\n    <div className=\"space-y-0.5\">\n      <div className=\"flex items-center gap-2\">\n        <motion.span\n          className=\"text-lg font-semibold\"\n          initial={{ x: -20, opacity: 0 }}\n          animate={{ x: 0, opacity: 1 }}\n          transition={transition}\n        >\n          {month} {year}\n        </motion.span>\n        <AnimatePresence mode=\"wait\">\n          <MotionBadge\n            key={eventCount}\n            variant=\"secondary\"\n            initial={{ scale: 0.8, opacity: 0 }}\n            animate={{ scale: 1, opacity: 1 }}\n            exit={{ scale: 0.8, opacity: 0 }}\n            transition={transition}\n          >\n            {eventCount} events\n          </MotionBadge>\n        </AnimatePresence>\n      </div>\n\n      <div className=\"flex items-center gap-2\">\n        <MotionButton\n          variant=\"outline\"\n          size=\"icon\"\n          className=\"h-6 w-6\"\n          onClick={handlePrevious}\n          variants={buttonHover}\n          whileHover=\"hover\"\n          whileTap=\"tap\"\n        >\n          <ChevronLeft className=\"h-4 w-4\" />\n        </MotionButton>\n\n        <motion.p\n          className=\"text-sm text-muted-foreground\"\n          initial={{ opacity: 0 }}\n          animate={{ opacity: 1 }}\n          transition={transition}\n        >\n          {rangeText(view, selectedDate)}\n        </motion.p>\n\n        <MotionButton\n          variant=\"outline\"\n          size=\"icon\"\n          className=\"h-6 w-6\"\n          onClick={handleNext}\n          variants={buttonHover}\n          whileHover=\"hover\"\n          whileTap=\"tap\"\n        >\n          <ChevronRight className=\"h-4 w-4\" />\n        </MotionButton>\n      </div>\n    </div>\n  );\n}\n",
      "type": "registry:component"
    },
    {
      "path": "src/modules/components/calendar/header/filter.tsx",
      "content": "import {CheckIcon, Filter, RefreshCcw} from \"lucide-react\";\nimport {\n    DropdownMenu,\n    DropdownMenuContent,\n    DropdownMenuItem,\n    DropdownMenuTrigger,\n} from \"@/components/ui/dropdown-menu\";\nimport {useCalendar} from \"@/modules/components/calendar/contexts/calendar-context\";\nimport type {TEventColor} from \"@/modules/components/calendar/types\";\nimport {Toggle} from \"@/components/ui/toggle\";\n\nexport default function FilterEvents() {\n    const {selectedColors, filterEventsBySelectedColors , clearFilter } = useCalendar();\n\n    const colors: TEventColor[] = [\n        \"blue\",\n        \"green\",\n        \"red\",\n        \"yellow\",\n        \"purple\",\n        \"orange\",\n    ];\n\n    return (\n        <DropdownMenu>\n            <DropdownMenuTrigger asChild>\n                <Toggle\n                    variant=\"outline\"\n                    className=\"cursor-pointer w-fit\"\n                >\n                    <Filter className=\"h-4 w-4\"/>\n                </Toggle>\n            </DropdownMenuTrigger>\n            <DropdownMenuContent align=\"end\" className=\"w-[150px]\">\n                {colors.map((color, index) => (\n                    <DropdownMenuItem\n                        key={index}\n                        className=\"flex items-center gap-2 cursor-pointer\"\n                        onClick={(e) => {\n                            e.preventDefault()\n                            filterEventsBySelectedColors(color);\n                        }}\n                    >\n                        <div\n                            className={`size-3.5 rounded-full bg-${color}-600 dark:bg-${color}-700`}\n                        />\n                        <span className=\"capitalize flex justify-center items-center gap-2\">\n                            {color}\n                            <span>\n                                {selectedColors.includes(color) && (\n                                    <span className=\"text-blue-500\">\n                                        <CheckIcon className=\"size-4\" />\n                                    </span>\n                                )}\n                            </span>\n\n                        </span>\n                    </DropdownMenuItem>\n                ))}\n                <DropdownMenuItem\n                    disabled={selectedColors.length === 0}\n                    className=\"flex gap-2 cursor-pointer\"\n                    onClick={(e) => {\n                        e.preventDefault()\n                        clearFilter();\n                    }}\n                    >\n                    <RefreshCcw\n                        className='size-3.5'\n                    />\n                    Clear Filter\n                </DropdownMenuItem>\n            </DropdownMenuContent>\n        </DropdownMenu>\n    );\n}\n",
      "type": "registry:component"
    },
    {
      "path": "src/modules/components/calendar/header/today-button.tsx",
      "content": "import { formatDate } from \"date-fns\";\nimport { motion } from \"framer-motion\";\n\nimport { useCalendar } from \"@/modules/components/calendar/contexts/calendar-context\";\nimport { buttonHover, transition } from \"@/modules/components/calendar/animations\";\n\nimport { Button } from \"@/components/ui/button\";\n\nconst MotionButton = motion.create(Button);\n\nexport function TodayButton() {\n  const { setSelectedDate } = useCalendar();\n\n  const today = new Date();\n  const handleClick = () => setSelectedDate(today);\n\n  return (\n    <MotionButton\n      variant=\"outline\"\n      className=\"flex h-14 w-14 flex-col items-center justify-center p-0 text-center\"\n      onClick={handleClick}\n      variants={buttonHover}\n      whileHover=\"hover\"\n      whileTap=\"tap\"\n      transition={transition}\n    >\n      <motion.span\n        className=\"w-full bg-primary py-1 text-xs font-semibold text-primary-foreground\"\n        initial={{ y: -10, opacity: 0 }}\n        animate={{ y: 0, opacity: 1 }}\n        transition={{ delay: 0.1, ...transition }}\n      >\n        {formatDate(today, \"MMM\").toUpperCase()}\n      </motion.span>\n      <motion.span\n        className=\"text-lg font-bold\"\n        initial={{ y: 10, opacity: 0 }}\n        animate={{ y: 0, opacity: 1 }}\n        transition={{ delay: 0.2, ...transition }}\n      >\n        {today.getDate()}\n      </motion.span>\n    </MotionButton>\n  );\n}\n",
      "type": "registry:component"
    },
    {
      "path": "src/modules/components/calendar/header/user-select.tsx",
      "content": "import { useCalendar } from \"@/modules/components/calendar/contexts/calendar-context\";\n\nimport { Avatar, AvatarImage, AvatarFallback } from \"@/components/ui/avatar\";\nimport {\n  Select,\n  SelectItem,\n  SelectContent,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\";\nimport { AvatarGroup } from \"@/components/ui/avatar-group\";\n\nexport function UserSelect() {\n  const { users, selectedUserId, filterEventsBySelectedUser } = useCalendar();\n\n  return (\n    <Select value={selectedUserId!} onValueChange={filterEventsBySelectedUser}>\n      <SelectTrigger className=\"w-full\">\n        <SelectValue placeholder=\"Select a user\" />\n      </SelectTrigger>\n      <SelectContent align=\"end\" >\n        <SelectItem value=\"all\" >\n          <AvatarGroup className=\"mx-2 flex items-center\" max={3}>\n            {users.map((user) => (\n              <Avatar key={user.id} className=\"size-6 text-xxs\">\n                <AvatarImage\n                  src={user.picturePath ?? undefined}\n                  alt={user.name}\n                />\n                <AvatarFallback className=\"text-xxs\">\n                  {user.name[0]}\n                </AvatarFallback>\n              </Avatar>\n            ))}\n          </AvatarGroup>\n          All\n        </SelectItem>\n\n        {users.map((user) => (\n          <SelectItem key={user.id} value={user.id} className=\"flex-1 cursor-pointer\">\n            <div className=\"flex items-center gap-2\">\n              <Avatar key={user.id} className=\"size-6\">\n                <AvatarImage\n                  src={user.picturePath ?? undefined}\n                  alt={user.name}\n                />\n                <AvatarFallback className=\"text-xxs\">\n                  {user.name[0]}\n                </AvatarFallback>\n              </Avatar>\n\n              <p className=\"truncate\">{user.name}</p>\n            </div>\n          </SelectItem>\n        ))}\n      </SelectContent>\n    </Select>\n  );\n}\n",
      "type": "registry:component"
    },
    {
      "path": "src/modules/components/calendar/settings/settings.tsx",
      "content": "import { Button } from \"@/components/ui/button\"\nimport {\n    DropdownMenu,\n    DropdownMenuContent,\n    DropdownMenuGroup,\n    DropdownMenuItem,\n    DropdownMenuLabel,\n    DropdownMenuRadioGroup, DropdownMenuRadioItem,\n    DropdownMenuSeparator,\n    DropdownMenuShortcut,\n    DropdownMenuTrigger,\n} from \"@/components/ui/dropdown-menu\"\nimport {DotIcon, MoonIcon, PaletteIcon, SettingsIcon, SunMediumIcon} from \"lucide-react\";\nimport {Switch} from \"@/components/ui/switch\";\nimport {useCalendar} from \"@/modules/components/calendar/contexts/calendar-context\";\nimport {useTheme} from \"next-themes\";\nimport {TCalendarView} from \"@/modules/components/calendar/types\";\n\nexport function Settings() {\n    const {badgeVariant , setBadgeVariant , use24HourFormat , toggleTimeFormat , view , setView , agendaModeGroupBy , setAgendaModeGroupBy} = useCalendar()\n    const {theme , setTheme} = useTheme()\n\n    const isDarkMode = theme === \"dark\"\n    const isDotVariant = badgeVariant === \"dot\"\n\n    return (\n        <DropdownMenu>\n            <DropdownMenuTrigger asChild>\n                <Button variant=\"outline\" size=\"icon\">\n                    <SettingsIcon />\n                </Button>\n            </DropdownMenuTrigger>\n            <DropdownMenuContent className=\"w-56\">\n                <DropdownMenuLabel>Calendar settings</DropdownMenuLabel>\n                <DropdownMenuSeparator />\n                <DropdownMenuGroup>\n                    <DropdownMenuItem>\n                        Use dark mode\n                        <DropdownMenuShortcut>\n                            <Switch\n                                icon={\n                                    isDarkMode ? (\n                                        <MoonIcon className=\"h-4 w-4\" />\n                                    ) : (\n                                        <SunMediumIcon className=\"h-4 w-4\" />\n                                    )\n                                }\n                                checked={isDarkMode}\n                                onCheckedChange={\n                                (checked) => setTheme(checked ? \"dark\" : \"light\")\n                                }\n                            />\n                        </DropdownMenuShortcut>\n                    </DropdownMenuItem>\n                    <DropdownMenuItem>\n                        Use dot badge\n                        <DropdownMenuShortcut>\n                            <Switch\n                                icon={\n                                    isDotVariant ? (\n                                        <DotIcon className=\"w-4 h-4\" />\n                                    ) : (\n                                        <PaletteIcon className=\"w-4 h-4\" />\n                                    )\n                                }\n                                checked={isDotVariant}\n                                onCheckedChange={\n                                    (checked) => setBadgeVariant(checked ? \"dot\" : \"colored\")\n                                }\n                            />\n                        </DropdownMenuShortcut>\n                    </DropdownMenuItem>\n                    <DropdownMenuItem>\n                        Use 24 hour format\n                        <DropdownMenuShortcut>\n                            <Switch\n                                icon={\n                                    use24HourFormat ? (\n                                        <svg  xmlns=\"http://www.w3.org/2000/svg\"  width={24}  height={24}  viewBox=\"0 0 24 24\"  fill=\"none\"  stroke=\"currentColor\"  strokeWidth={2}  strokeLinecap=\"round\"  strokeLinejoin=\"round\"  className=\"icon icon-tabler icons-tabler-outline icon-tabler-clock-24\"><path stroke=\"none\" d=\"M0 0h24v24H0z\" fill=\"none\"/><path d=\"M3 12a9 9 0 0 0 5.998 8.485m12.002 -8.485a9 9 0 1 0 -18 0\" /><path d=\"M12 7v5\" /><path d=\"M12 15h2a1 1 0 0 1 1 1v1a1 1 0 0 1 -1 1h-1a1 1 0 0 0 -1 1v1a1 1 0 0 0 1 1h2\" /><path d=\"M18 15v2a1 1 0 0 0 1 1h1\" /><path d=\"M21 15v6\" /></svg>\n                                    ) : (\n                                        <svg  xmlns=\"http://www.w3.org/2000/svg\"  width={24}  height={24}  viewBox=\"0 0 24 24\"  fill=\"none\"  stroke=\"currentColor\"  strokeWidth={2}  strokeLinecap=\"round\"  strokeLinejoin=\"round\"  className=\"icon icon-tabler icons-tabler-outline icon-tabler-clock-12\"><path stroke=\"none\" d=\"M0 0h24v24H0z\" fill=\"none\"/><path d=\"M3 12a9 9 0 0 0 9 9m9 -9a9 9 0 1 0 -18 0\" /><path d=\"M12 7v5l.5 .5\" /><path d=\"M18 15h2a1 1 0 0 1 1 1v1a1 1 0 0 1 -1 1h-1a1 1 0 0 0 -1 1v1a1 1 0 0 0 1 1h2\" /><path d=\"M15 21v-6\" /></svg>\n                                    )\n                                }\n                                checked={use24HourFormat}\n                                onCheckedChange={toggleTimeFormat}\n                            />\n                        </DropdownMenuShortcut>\n                    </DropdownMenuItem>\n                </DropdownMenuGroup>\n                <DropdownMenuSeparator />\n                <DropdownMenuGroup className=\"w-56\">\n                    <DropdownMenuLabel>\n                        Default view\n                    </DropdownMenuLabel>\n                    <DropdownMenuRadioGroup value={view} onValueChange={\n                        (value) => setView(value as TCalendarView)\n                    }>\n                        <DropdownMenuRadioItem value=\"day\">Day</DropdownMenuRadioItem>\n                        <DropdownMenuRadioItem value=\"week\">Week</DropdownMenuRadioItem>\n                        <DropdownMenuRadioItem value=\"month\">Month</DropdownMenuRadioItem>\n                        <DropdownMenuRadioItem value=\"year\">Year</DropdownMenuRadioItem>\n                        <DropdownMenuRadioItem value=\"agenda\">Agenda</DropdownMenuRadioItem>\n                    </DropdownMenuRadioGroup>\n                </DropdownMenuGroup>\n                <DropdownMenuSeparator />\n                <DropdownMenuGroup>\n                        <DropdownMenuLabel>\n                            Agenda view group by\n                        </DropdownMenuLabel>\n                        <DropdownMenuRadioGroup value={agendaModeGroupBy} onValueChange={\n                            (value) => setAgendaModeGroupBy(value as \"date\" | \"color\")\n                        }>\n                            <DropdownMenuRadioItem value=\"date\">Date</DropdownMenuRadioItem>\n                            <DropdownMenuRadioItem value=\"color\">Color</DropdownMenuRadioItem>\n                        </DropdownMenuRadioGroup>\n                </DropdownMenuGroup>\n            </DropdownMenuContent>\n        </DropdownMenu>\n    )\n}\n",
      "type": "registry:component"
    },
    {
      "path": "src/modules/components/calendar/skeletons/calendar-header-skeleton.tsx",
      "content": "import { Skeleton } from \"@/components/ui/skeleton\";\n\nexport function CalendarHeaderSkeleton() {\n  return (\n    <div className=\"flex items-center justify-between border-b px-4 py-2\">\n      <div className=\"flex items-center gap-2\">\n        <Skeleton className=\"h-8 w-8\" />\n        <Skeleton className=\"h-8 w-32\" />\n      </div>\n      \n      <div className=\"flex items-center gap-2\">\n        <Skeleton className=\"h-8 w-24\" />\n        <div className=\"flex gap-1\">\n          <Skeleton className=\"h-8 w-8\" />\n          <Skeleton className=\"h-8 w-8\" />\n          <Skeleton className=\"h-8 w-8\" />\n        </div>\n        <Skeleton className=\"h-8 w-24\" />\n        <Skeleton className=\"h-8 w-8\" />\n      </div>\n    </div>\n  );\n}",
      "type": "registry:component"
    },
    {
      "path": "src/modules/components/calendar/skeletons/calendar-skeleton.tsx",
      "content": "import {CalendarHeaderSkeleton} from \"@/modules/components/calendar/skeletons/calendar-header-skeleton\";\nimport {MonthViewSkeleton} from \"@/modules/components/calendar/skeletons/month-view-skeleton\";\n\nexport function CalendarSkeleton() {\n    return (\n        <div className='container mx-auto'>\n            <div className=\"flex h-screen flex-col\">\n                <CalendarHeaderSkeleton/>\n                <div className=\"flex-1\">\n                    <MonthViewSkeleton/>\n                </div>\n            </div>\n        </div>\n    )\n}",
      "type": "registry:component"
    },
    {
      "path": "src/modules/components/calendar/skeletons/day-view-skeleton.tsx",
      "content": "import { Skeleton } from \"@/components/ui/skeleton\";\n\nexport function DayViewSkeleton() {\n  return (\n    <div className=\"flex h-full flex-col\">\n      <div className=\"grid grid-cols-2 border-b\">\n        <div className=\"w-18\"></div>\n        <div className=\"flex flex-col items-center justify-center py-2\">\n          <Skeleton className=\"h-6 w-24 rounded-full\" />\n          <Skeleton className=\"mt-1 h-4 w-16\" />\n        </div>\n      </div>\n\n      <div className=\"flex flex-1 overflow-y-auto\">\n        <div className=\"w-18 flex-shrink-0\">\n          {Array.from({ length: 12 }).map((_, i) => (\n            <div key={i} className=\"relative h-12 border-b pr-2 text-right\">\n              <Skeleton className=\"absolute -top-3 right-2 h-4 w-10\" />\n            </div>\n          ))}\n        </div>\n        \n        <div className=\"flex-1\">\n          <div className=\"relative\">\n            {Array.from({ length: 12 }).map((_, hourIndex) => (\n              <div key={hourIndex} className=\"h-12 border-b\"></div>\n            ))}\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}",
      "type": "registry:component"
    },
    {
      "path": "src/modules/components/calendar/skeletons/month-view-skeleton.tsx",
      "content": "import { Skeleton } from \"@/components/ui/skeleton\";\n\nexport function MonthViewSkeleton() {\n  return (\n    <div className=\"flex h-full flex-col\">\n      <div className=\"grid grid-cols-7 border-b py-2\">\n        {Array.from({ length: 7 }).map((_, i) => (\n          <div key={i} className=\"flex justify-center\">\n            <Skeleton className=\"h-6 w-12\" />\n          </div>\n        ))}\n      </div>\n\n      <div className=\"grid flex-1 grid-cols-7 grid-rows-6\">\n        {Array.from({ length: 42 }).map((_, i) => (\n          <div key={i} className=\"border-b border-r p-1\">\n            <Skeleton className=\"mb-1 h-6 w-6 rounded-full\" />\n            <div className=\"mt-1 space-y-1\">\n              {Array.from({ length: Math.floor(Math.random() * 3) }).map((_, j) => (\n                <Skeleton key={j} className=\"h-5 w-full\" />\n              ))}\n            </div>\n          </div>\n        ))}\n      </div>\n    </div>\n  );\n}",
      "type": "registry:component"
    },
    {
      "path": "src/modules/components/calendar/skeletons/week-view-skeleton.tsx",
      "content": "import { Skeleton } from \"@/components/ui/skeleton\";\n\nexport function WeekViewSkeleton() {\n  return (\n    <div className=\"flex h-full flex-col\">\n      <div className=\"grid grid-cols-8 border-b\">\n        <div className=\"w-18\"></div>\n        {Array.from({ length: 7 }).map((_, i) => (\n          <div key={i} className=\"flex flex-col items-center justify-center py-2\">\n            <Skeleton className=\"h-6 w-10 rounded-full\" />\n            <Skeleton className=\"mt-1 h-4 w-6\" />\n          </div>\n        ))}\n      </div>\n\n      <div className=\"flex flex-1 overflow-y-auto\">\n        <div className=\"w-18 flex-shrink-0\">\n          {Array.from({ length: 12 }).map((_, i) => (\n            <div key={i} className=\"relative h-12 border-b pr-2 text-right\">\n              <Skeleton className=\"absolute -top-3 right-2 h-4 w-10\" />\n            </div>\n          ))}\n        </div>\n        \n        <div className=\"grid flex-1 grid-cols-7 divide-x\">\n          {Array.from({ length: 7 }).map((_, dayIndex) => (\n            <div key={dayIndex} className=\"relative\">\n              {Array.from({ length: 12 }).map((_, hourIndex) => (\n                <div key={hourIndex} className=\"h-12 border-b\"></div>\n              ))}\n            </div>\n          ))}\n        </div>\n      </div>\n    </div>\n  );\n}",
      "type": "registry:component"
    },
    {
      "path": "src/modules/components/calendar/skeletons/year-view-skeleton.tsx",
      "content": "import { Skeleton } from \"@/components/ui/skeleton\";\n\nconst MONTHS = Array.from({ length: 12 });\n\nexport function YearViewSkeleton() {\n    return (\n        <div className=\"hidden sm:grid grid-cols-3 gap-4 flex-grow overflow-hidden auto-rows-fr lg:grid-cols-4\">\n            {MONTHS.map((_, monthIndex) => (\n                <div\n                    key={monthIndex}\n                    className=\"flex flex-col border rounded-md overflow-hidden h-full animate-pulse\"\n                >\n                    <div className=\"bg-primary/5 px-1 py-2 text-center\">\n                        <Skeleton className=\"h-4 w-24 mx-auto\" />\n                    </div>\n\n                    <div className=\"grid grid-cols-7 text-center text-xs py-2 px-1\">\n                        {Array.from({ length: 7 }).map((_, i) => (\n                            <Skeleton key={i} className=\"h-3 w-3 mx-auto\" />\n                        ))}\n                    </div>\n\n                    <div className=\"grid grid-cols-7 gap-0 p-1 flex-grow\">\n                        {Array.from({ length: 42 }).map((_, i) => (\n                            <div key={i} className=\"flex flex-col items-center justify-center p-1\">\n                                <Skeleton className=\"h-4 w-4 rounded-full\" />\n                                <Skeleton className=\"h-1.5 w-3 mt-1\" />\n                            </div>\n                        ))}\n                    </div>\n                </div>\n            ))}\n        </div>\n    );\n}\n",
      "type": "registry:component"
    },
    {
      "path": "src/modules/components/calendar/views/agenda-view/agenda-events.tsx",
      "content": "import {FC} from \"react\";\nimport {Avatar, AvatarFallback, AvatarImage} from \"@/components/ui/avatar\";\nimport {\n    Command,\n    CommandEmpty,\n    CommandGroup,\n    CommandInput,\n    CommandItem,\n    CommandList,\n} from \"@/components/ui/command\";\nimport {format, parseISO} from \"date-fns\";\nimport {cn} from \"@/lib/utils\";\nimport {\n    formatTime,\n    getBgColor,\n    getColorClass,\n    getFirstLetters,\n    toCapitalize,\n    useGetEventsByMode\n} from \"@/modules/components/calendar/helpers\";\nimport {EventDetailsDialog} from \"@/modules/components/calendar/dialogs/event-details-dialog\";\nimport {useCalendar} from \"@/modules/components/calendar/contexts/calendar-context\";\nimport {EventBullet} from \"@/modules/components/calendar/views/month-view/event-bullet\";\n\nexport const AgendaEvents: FC = () => {\n    const {events, use24HourFormat, badgeVariant, agendaModeGroupBy} = useCalendar();\n\n    const eventsByMode = Object.groupBy(useGetEventsByMode(events), (event) => {\n        return agendaModeGroupBy === 'date' ? format(parseISO(event.startDate), 'yyyy-MM-dd') : event.color\n    });\n\n    const groupedAndSortedEvents = Object.entries(eventsByMode).sort((a, b) =>\n        new Date(a[0]).getTime() - new Date(b[0]).getTime()\n    );\n\n    return (\n        <Command className=\"py-4 h-[80vh] bg-transparent\">\n            <div className=\"mb-4 mx-4\">\n                <CommandInput placeholder=\"Type a command or search...\"/>\n            </div>\n            <CommandList className=\"max-h-max px-3 border-t\">\n                {groupedAndSortedEvents.map(([date, groupedEvents]) => (\n                    <CommandGroup key={date} heading={\n                        agendaModeGroupBy === \"date\" ? format(parseISO(date), \"EEEE, MMMM d, yyyy\") : toCapitalize(groupedEvents![0].color)\n                    }>\n                        {groupedEvents!.map((event) => (\n                            <CommandItem\n                                key={event.id}\n                                className={cn(\n                                    \"mb-2 p-4 border rounded-md data-[selected=true]:bg-bg transition-all data-[selected=true]:text-none hover:cursor-pointer\",\n                                    {\n                                        [getColorClass(event.color)]: badgeVariant === \"colored\",\n                                        \"hover:bg-zinc-200 dark:hover:bg-gray-900\": badgeVariant === \"dot\",\n                                        \"hover:opacity-60\": badgeVariant === \"colored\"\n                                    }\n                                )}>\n                                <EventDetailsDialog event={event}>\n                                    <div className=\"w-full flex items-center justify-between gap-4\">\n                                        <div className=\"flex items-center gap-2\">\n                                            {badgeVariant === \"dot\" ? (\n                                                <EventBullet color={event.color}/>\n                                            ) : (\n                                                <Avatar>\n                                                    <AvatarImage src=\"\" alt=\"@shadcn\"/>\n                                                    <AvatarFallback className={getBgColor(event.color)}>\n                                                        {getFirstLetters(event.title)}\n                                                    </AvatarFallback>\n                                                </Avatar>\n                                            )}\n                                            <div className=\"flex flex-col\">\n                                                <p className={cn({\n                                                    \"font-medium\": badgeVariant === \"dot\",\n                                                    \"text-foreground\": badgeVariant === \"dot\"\n                                                })}>{event.title}</p>\n                                                <p className=\"text-muted-foreground text-sm line-clamp-1 text-ellipsis md:text-clip w-1/3\">\n                                                    {event.description}\n                                                </p>\n                                            </div>\n                                        </div>\n                                        <div className=\"w-40 flex justify-center items-center gap-1\">\n                                            {\n                                                agendaModeGroupBy === \"date\" ? (\n                                                    <>\n                                                        <p className=\"text-sm\">\n                                                            {formatTime(event.startDate, use24HourFormat)}\n                                                        </p>\n                                                        <span className='text-muted-foreground'>\n                                             -\n                                            </span>\n                                                        <p className=\"text-sm\">\n                                                            {formatTime(event.endDate, use24HourFormat)}\n                                                        </p>\n                                                    </>\n                                                ) : (\n                                                    <>\n                                                        <p className=\"text-sm\">\n                                                            {\n                                                                format(event.startDate, \"MM/dd/yyyy\")\n                                                            }\n                                                        </p>\n                                                        <span className='text-sm'>\n                                                             at\n                                                        </span>\n                                                        <p className=\"text-sm\">\n                                                            {\n                                                                formatTime(event.startDate, use24HourFormat)\n                                                            }\n                                                        </p>\n                                                    </>\n                                                )\n                                            }\n                                        </div>\n                                    </div>\n                                </EventDetailsDialog>\n                            </CommandItem>\n                        ))}\n                    </CommandGroup>\n                ))}\n                <CommandEmpty>No results found.</CommandEmpty>\n            </CommandList>\n        </Command>\n    );\n};",
      "type": "registry:component"
    },
    {
      "path": "src/modules/components/calendar/views/month-view/calendar-month-view.tsx",
      "content": "import {motion} from \"framer-motion\";\nimport {useCalendar} from \"@/modules/components/calendar/contexts/calendar-context\";\nimport {staggerContainer, transition} from \"@/modules/components/calendar/animations\";\n\nimport {DayCell} from \"@/modules/components/calendar/views/month-view/day-cell\";\n\nimport {\n    getCalendarCells,\n    calculateMonthEventPositions,\n} from \"@/modules/components/calendar/helpers\";\n\nimport type {IEvent} from \"@/modules/components/calendar/interfaces\";\nimport {useMemo} from \"react\";\n\ninterface IProps {\n    singleDayEvents: IEvent[];\n    multiDayEvents: IEvent[];\n}\n\nconst WEEK_DAYS = [\"Sun\", \"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\", \"Sat\"];\n\nexport function CalendarMonthView({singleDayEvents, multiDayEvents}: IProps) {\n\n    const { selectedDate } = useCalendar();\n\n    const allEvents = [...multiDayEvents, ...singleDayEvents];\n\n    const cells = useMemo(() => getCalendarCells(selectedDate), [selectedDate]);\n\n    const eventPositions = useMemo(\n        () => calculateMonthEventPositions(multiDayEvents, singleDayEvents, selectedDate),\n        [multiDayEvents, singleDayEvents, selectedDate]\n    );\n\n    return (\n        <motion.div initial=\"initial\" animate=\"animate\" variants={staggerContainer}>\n            <div className=\"grid grid-cols-7\">\n                {WEEK_DAYS.map((day, index) => (\n                    <motion.div\n                        key={day}\n                        className=\"flex items-center justify-center py-2\"\n                        initial={{opacity: 0, y: -10}}\n                        animate={{opacity: 1, y: 0}}\n                        transition={{delay: index * 0.05, ...transition}}\n                    >\n                        <span className=\"text-xs font-medium text-t-quaternary\">{day}</span>\n                    </motion.div>\n                ))}\n            </div>\n\n            <div\n                className=\"grid grid-cols-7 overflow-hidden\"\n            >\n                {cells.map((cell, index) => (\n                    <DayCell\n                        key={index}\n                        cell={cell}\n                        events={allEvents}\n                        eventPositions={eventPositions}\n                    />\n                ))}\n            </div>\n        </motion.div>\n    );\n}\n",
      "type": "registry:component"
    },
    {
      "path": "src/modules/components/calendar/views/month-view/day-cell.tsx",
      "content": "\"use client\";\n\nimport { useMemo } from \"react\";\nimport { isSunday, isToday, startOfDay } from \"date-fns\";\nimport { motion } from \"framer-motion\";\n\nimport { EventBullet } from \"@/modules/components/calendar/views/month-view/event-bullet\";\nimport { MonthEventBadge } from \"@/modules/components/calendar/views/month-view/month-event-badge\";\n\nimport { getMonthCellEvents } from \"@/modules/components/calendar/helpers\";\nimport { staggerContainer, transition } from \"@/modules/components/calendar/animations\";\n\nimport type { ICalendarCell, IEvent } from \"@/modules/components/calendar/interfaces\";\nimport { cn } from \"@/lib/utils\";\nimport { cva } from \"class-variance-authority\";\nimport { DroppableArea } from \"@/modules/components/calendar/dnd/droppable-area\";\nimport { EventListDialog } from \"@/modules/components/calendar/dialogs/events-list-dialog\";\nimport {useMediaQuery} from \"@/modules/components/calendar/hooks\";\n\ninterface IProps {\n    cell: ICalendarCell;\n    events: IEvent[];\n    eventPositions: Record<string, number>;\n}\n\n\nexport const dayCellVariants = cva(\"text-white\", {\n    variants: {\n        color: {\n            blue: \"bg-blue-600 dark:bg-blue-500 hover:bg-blue-700 dark:hover:bg-blue-400 \",\n            green: \"bg-green-600 dark:bg-green-500 hover:bg-green-700 dark:hover:bg-green-400\",\n            red: \"bg-red-600 dark:bg-red-500 hover:bg-red-700 dark:hover:bg-red-400\",\n            yellow: \"bg-yellow-600 dark:bg-yellow-500 hover:bg-yellow-700 dark:hover:bg-yellow-400\",\n            purple: \"bg-purple-600 dark:bg-purple-500 hover:bg-purple-700 dark:hover:bg-purple-400\",\n            orange: \"bg-orange-600 dark:bg-orange-500 hover:bg-orange-700 dark:hover:bg-orange-400\",\n            gray: \"bg-gray-600 dark:bg-gray-500 hover:bg-gray-700 dark:hover:bg-gray-400\",\n        },\n    },\n    defaultVariants: {\n        color: \"blue\",\n    },\n});\n\nexport function DayCell({ cell, events, eventPositions }: IProps) {\n    const { day, currentMonth, date } = cell;\n    const isMobile = useMediaQuery(\"(max-width: 768px)\");\n\n    const cellEvents = useMemo(() => getMonthCellEvents(date, events, eventPositions), [date, events, eventPositions]);\n    const MAX_VISIBLE_EVENTS = isMobile ? 6 : 3;\n\n    const cellContent = (\n        <motion.div\n            className={cn(\n                \"flex flex-col gap-1 border-l border-t md:min-h-[180px]\",\n                isSunday(date) && \"border-l-0\"\n            )}\n            initial={{ opacity: 0, y: 10 }}\n            animate={{ opacity: 1, y: 0 }}\n            transition={transition}\n        >\n            <DroppableArea date={date} className=\"w-full h-full py-2\">\n                <motion.span\n                    className={cn(\n                        \"h-6 w-6 px-1 flex translate-x-1 items-center justify-center rounded-full text-xs font-semibold lg:px-2 mb-1\",\n                        !currentMonth && \"text-muted-foreground\",\n                        isToday(date) && \"bg-primary text-primary-foreground\"\n                    )}\n                    whileHover={{ scale: 1.1 }}\n                    transition={transition}\n                >\n                    {day}\n                </motion.span>\n\n                <motion.div\n                    className={cn(\n                        \"flex h-6 gap-1 px-2 lg:min-h-[94px] lg:flex-col lg:gap-2 lg:px-0\",\n                        !currentMonth && \"opacity-50\"\n                    )}\n                    variants={staggerContainer}\n                >\n                    {[0, 1, 2].map((position) => {\n                        const event = cellEvents.find((e) => e.position === position);\n                        const eventKey = event ? `event-${event.id}-${position}` : `empty-${position}`;\n\n                        return (\n                            <motion.div\n                                key={eventKey}\n                                className=\"lg:flex-1\"\n                                initial={{ opacity: 0, x: -10 }}\n                                animate={{ opacity: 1, x: 0 }}\n                                transition={{ delay: position * 0.1, ...transition }}\n                            >\n                                {event && (\n                                    <>\n                                        <EventBullet className=\"lg:hidden\" color={event.color} />\n                                        <MonthEventBadge\n                                            className=\"hidden lg:flex\"\n                                            event={event}\n                                            cellDate={startOfDay(date)}\n                                        />\n                                    </>\n                                )}\n                            </motion.div>\n                        );\n                    })}\n                </motion.div>\n\n                {!isMobile && cellEvents.length > MAX_VISIBLE_EVENTS && (\n                    <motion.div\n                        className={cn(\n                            \"h-4.5 px-1.5 my-2 text-end text-xs font-semibold text-muted-foreground\",\n                            !currentMonth && \"opacity-50\"\n                        )}\n                        initial={{ opacity: 0, y: 5 }}\n                        animate={{ opacity: 1, y: 0 }}\n                        transition={{ delay: 0.3, ...transition }}\n                    >\n                        <EventListDialog date={date} events={cellEvents} />\n                    </motion.div>\n                )}\n            </DroppableArea>\n        </motion.div>\n    );\n\n    if (isMobile) {\n        return (\n            <EventListDialog date={date} events={cellEvents}>\n                {cellContent}\n            </EventListDialog>\n        );\n    }\n\n    return cellContent;\n}\n",
      "type": "registry:component"
    },
    {
      "path": "src/modules/components/calendar/views/month-view/event-bullet.tsx",
      "content": "import { cva } from \"class-variance-authority\";\nimport { motion } from \"framer-motion\";\nimport { transition } from \"@/modules/components/calendar/animations\";\n\nimport type { TEventColor } from \"@/modules/components/calendar/types\";\nimport { cn } from \"@/lib/utils\";\n\nconst eventBulletVariants = cva(\"size-2 rounded-full\", {\n  variants: {\n    color: {\n      blue: \"bg-blue-600 dark:bg-blue-500\",\n      green: \"bg-green-600 dark:bg-green-500\",\n      red: \"bg-red-600 dark:bg-red-500\",\n      yellow: \"bg-yellow-600 dark:bg-yellow-500\",\n      purple: \"bg-purple-600 dark:bg-purple-500\",\n      orange: \"bg-orange-600 dark:bg-orange-500\",\n      gray: \"bg-gray-600 dark:bg-gray-500\",\n    },\n  },\n  defaultVariants: {\n    color: \"blue\",\n  },\n});\n\nexport function EventBullet({\n  color,\n  className,\n}: {\n  color: TEventColor;\n  className?: string;\n}) {\n  return (\n    <motion.div\n      className={cn(eventBulletVariants({ color, className }))}\n      initial={{ scale: 0, opacity: 0 }}\n      animate={{ scale: 1, opacity: 1 }}\n      whileHover={{ scale: 1.2 }}\n      transition={transition}\n    />\n  );\n}\n",
      "type": "registry:component"
    },
    {
      "path": "src/modules/components/calendar/views/month-view/month-event-badge.tsx",
      "content": "import {cva} from \"class-variance-authority\";\nimport {endOfDay, isSameDay, parseISO, startOfDay} from \"date-fns\";\n\nimport type {VariantProps} from \"class-variance-authority\";\nimport {useCalendar} from \"@/modules/components/calendar/contexts/calendar-context\";\nimport {IEvent} from \"@/modules/components/calendar/interfaces\";\nimport {cn} from \"@/lib/utils\";\nimport {EventDetailsDialog} from \"@/modules/components/calendar/dialogs/event-details-dialog\";\nimport {DraggableEvent} from \"@/modules/components/calendar/dnd/draggable-event\";\nimport {formatTime} from \"@/modules/components/calendar/helpers\";\n\nconst eventBadgeVariants = cva(\n    \"mx-1 flex size-auto h-6.5 select-none items-center justify-between gap-1.5 truncate whitespace-nowrap rounded-md border px-2 text-xs\",\n    {\n        variants: {\n            color: {\n                // Colored variants\n                blue: \"border-blue-200 bg-blue-50 text-blue-700 dark:border-blue-800 dark:bg-blue-950 dark:text-blue-300\",\n                green: \"border-green-200 bg-green-50 text-green-700 dark:border-green-800 dark:bg-green-950 dark:text-green-300\",\n                red: \"border-red-200 bg-red-50 text-red-700 dark:border-red-800 dark:bg-red-950 dark:text-red-300\",\n                yellow: \"border-yellow-200 bg-yellow-50 text-yellow-700 dark:border-yellow-800 dark:bg-yellow-950 dark:text-yellow-300\",\n                purple: \"border-purple-200 bg-purple-50 text-purple-700 dark:border-purple-800 dark:bg-purple-950 dark:text-purple-300\",\n                orange: \"border-orange-200 bg-orange-50 text-orange-700 dark:border-orange-800 dark:bg-orange-950 dark:text-orange-300\",\n\n                // Dot variants\n                \"blue-dot\": \"bg-bg-secondary text-t-primary [&_svg]:fill-blue-600\",\n                \"green-dot\": \"bg-bg-secondary text-t-primary [&_svg]:fill-green-600\",\n                \"red-dot\": \"bg-bg-secondary text-t-primary [&_svg]:fill-red-600\",\n                \"orange-dot\": \"bg-bg-secondary text-t-primary [&_svg]:fill-orange-600\",\n                \"purple-dot\": \"bg-bg-secondary text-t-primary [&_svg]:fill-purple-600\",\n                \"yellow-dot\": \"bg-bg-secondary text-t-primary [&_svg]:fill-yellow-600\",\n            },\n            multiDayPosition: {\n                first: \"relative z-10 mr-0 w-[calc(100%_+_1px)] rounded-r-none border-r-0 [&>span]:mr-2.5\",\n                middle: \"relative z-10 mx-0 w-[calc(100%_+_1px)] rounded-none border-x-0\",\n                last: \"ml-0 rounded-l-none border-l-0\",\n                none: \"\",\n            },\n        },\n        defaultVariants: {\n            color: \"blue-dot\",\n        },\n    }\n);\n\ninterface IProps extends Omit<VariantProps<typeof eventBadgeVariants>, \"color\" | \"multiDayPosition\"> {\n    event: IEvent;\n    cellDate: Date;\n    eventCurrentDay?: number;\n    eventTotalDays?: number;\n    className?: string;\n    position?: \"first\" | \"middle\" | \"last\" | \"none\";\n}\n\nexport function MonthEventBadge({\n                                    event,\n                                    cellDate,\n                                    eventCurrentDay,\n                                    eventTotalDays,\n                                    className,\n                                    position: propPosition\n                                }: IProps) {\n    const {badgeVariant, use24HourFormat} = useCalendar();\n\n    const itemStart = startOfDay(parseISO(event.startDate));\n    const itemEnd = endOfDay(parseISO(event.endDate));\n\n    if (cellDate < itemStart || cellDate > itemEnd) return null;\n\n    let position: \"first\" | \"middle\" | \"last\" | \"none\" | undefined;\n\n    if (propPosition) {\n        position = propPosition;\n    } else if (eventCurrentDay && eventTotalDays) {\n        position = \"none\";\n    } else if (isSameDay(itemStart, itemEnd)) {\n        position = \"none\";\n    } else if (isSameDay(cellDate, itemStart)) {\n        position = \"first\";\n    } else if (isSameDay(cellDate, itemEnd)) {\n        position = \"last\";\n    } else {\n        position = \"middle\";\n    }\n\n    const renderBadgeText = [\"first\", \"none\"].includes(position);\n\n    const color = (badgeVariant === \"dot\" ? `${event.color}-dot` : event.color) as VariantProps<typeof eventBadgeVariants>[\"color\"];\n\n    const eventBadgeClasses = cn(eventBadgeVariants({color, multiDayPosition: position, className}));\n\n    return (\n        <DraggableEvent event={event}>\n            <EventDetailsDialog event={event}>\n                <div role=\"button\" tabIndex={0} className={eventBadgeClasses}>\n                    <div className=\"flex items-center gap-1.5 truncate\">\n                        {![\"middle\", \"last\"].includes(position) && badgeVariant === \"dot\" && (\n                            <svg width=\"8\" height=\"8\" viewBox=\"0 0 8 8\" className=\"shrink-0\">\n                                <circle cx=\"4\" cy=\"4\" r=\"4\"/>\n                            </svg>\n                        )}\n\n                        {renderBadgeText && (\n                            <p className=\"flex-1 truncate font-semibold\">\n                                {eventCurrentDay && (\n                                    <span className=\"text-xs\">\n                  Day {eventCurrentDay} of {eventTotalDays} •{\" \"}\n                </span>\n                                )}\n                                {event.title}\n                            </p>\n                        )}\n                    </div>\n\n                    {renderBadgeText && <span>{formatTime(new Date(event.startDate), use24HourFormat)}</span>}\n                </div>\n            </EventDetailsDialog>\n        </DraggableEvent>\n    );\n}",
      "type": "registry:component"
    },
    {
      "path": "src/modules/components/calendar/views/week-and-day-view/calendar-day-view.tsx",
      "content": "import {Calendar, Clock, User} from \"lucide-react\";\nimport {parseISO, format, isWithinInterval} from \"date-fns\";\nimport {useRef, useEffect} from \"react\";\n\nimport {useCalendar} from \"@/modules/components/calendar/contexts/calendar-context\";\n\nimport {DayPicker} from \"@/components/ui/day-picker\";\nimport {ScrollArea} from \"@/components/ui/scroll-area\";\n\nimport {AddEditEventDialog} from \"@/modules/components/calendar/dialogs/add-edit-event-dialog\";\nimport {CalendarTimeline} from \"@/modules/components/calendar/views/week-and-day-view/calendar-time-line\";\nimport {DayViewMultiDayEventsRow} from \"@/modules/components/calendar/views/week-and-day-view/day-view-multi-day-events-row\";\n\nimport {groupEvents} from \"@/modules/components/calendar/helpers\";\n\nimport type {IEvent} from \"@/modules/components/calendar/interfaces\";\nimport {RenderGroupedEvents} from \"@/modules/components/calendar/views/week-and-day-view/render-grouped-events\";\nimport {DroppableArea} from \"@/modules/components/calendar/dnd/droppable-area\";\n\ninterface IProps {\n    singleDayEvents: IEvent[];\n    multiDayEvents: IEvent[];\n}\n\nexport function CalendarDayView({singleDayEvents, multiDayEvents}: IProps) {\n    const {selectedDate, setSelectedDate, users, use24HourFormat} = useCalendar();\n    const scrollAreaRef = useRef<HTMLDivElement>(null);\n\n    const hours = Array.from({length: 24}, (_, i) => i);\n\n    useEffect(() => {\n        const handleDragOver = (e: DragEvent) => {\n            if (!scrollAreaRef.current) return;\n\n            const scrollArea = scrollAreaRef.current;\n            const rect = scrollArea.getBoundingClientRect();\n            const scrollSpeed = 15;\n\n            const scrollContainer = scrollArea.querySelector('[data-radix-scroll-area-viewport]') || scrollArea;\n\n            if (e.clientY < rect.top + 60) {\n                scrollContainer.scrollTop -= scrollSpeed;\n            }\n\n            if (e.clientY > rect.bottom - 60) {\n                scrollContainer.scrollTop += scrollSpeed;\n            }\n        };\n\n        document.addEventListener('dragover', handleDragOver);\n        return () => {\n            document.removeEventListener('dragover', handleDragOver);\n        };\n    }, []);\n\n    const getCurrentEvents = (events: IEvent[]) => {\n        const now = new Date();\n\n        return (\n            events.filter(event =>\n                isWithinInterval(now, {\n                    start: parseISO(event.startDate),\n                    end: parseISO(event.endDate),\n                })\n            ) || []\n        );\n    };\n\n    const currentEvents = getCurrentEvents(singleDayEvents);\n\n    const dayEvents = singleDayEvents.filter(event => {\n        const eventDate = parseISO(event.startDate);\n        return (\n            eventDate.getDate() === selectedDate.getDate() &&\n            eventDate.getMonth() === selectedDate.getMonth() &&\n            eventDate.getFullYear() === selectedDate.getFullYear()\n        );\n    });\n\n    const groupedEvents = groupEvents(dayEvents);\n\n    return (\n        <div className=\"flex\">\n            <div className=\"flex flex-1 flex-col\">\n                <div>\n                    <DayViewMultiDayEventsRow selectedDate={selectedDate} multiDayEvents={multiDayEvents}/>\n\n                    {/* Day header */}\n                    <div className=\"relative z-20 flex border-b\">\n                        <div className=\"w-18\"></div>\n                        <span className=\"flex-1 border-l py-2 text-center text-xs font-medium text-t-quaternary\">\n              {format(selectedDate, \"EE\")}{\" \"}\n                            <span className=\"font-semibold text-t-secondary\">{format(selectedDate, \"d\")}</span>\n            </span>\n                    </div>\n                </div>\n\n                <ScrollArea className=\"h-[800px]\" type=\"always\" ref={scrollAreaRef}>\n                    <div className=\"flex\">\n                        {/* Hours column */}\n                        <div className=\"relative w-18\">\n                            {hours.map((hour, index) => (\n                                <div key={hour} className=\"relative\" style={{height: \"96px\"}}>\n                                    <div className=\"absolute -top-3 right-2 flex h-6 items-center\">\n                                        {index !== 0 && (\n                                            <span className=\"text-xs text-t-quaternary\">\n                        {format(\n                            new Date().setHours(hour, 0, 0, 0),\n                            use24HourFormat ? \"HH:00\" : \"h a\"\n                        )}\n                      </span>\n                                        )}\n                                    </div>\n                                </div>\n                            ))}\n                        </div>\n\n                        {/* Day grid */}\n                        <div className=\"relative flex-1 border-l\">\n                            <div className=\"relative\">\n                                {hours.map((hour, index) => (\n                                    <div key={hour} className=\"relative\" style={{height: \"96px\"}}>\n                                        {index !== 0 && <div\n                                            className=\"pointer-events-none absolute inset-x-0 top-0 border-b\"></div>}\n\n                                        <DroppableArea date={selectedDate} hour={hour} minute={0}\n                                                       className=\"absolute inset-x-0 top-0 h-[48px]\">\n                                            <AddEditEventDialog startDate={selectedDate} startTime={{hour, minute: 0}}>\n                                                <div\n                                                    className=\"absolute inset-0 cursor-pointer transition-colors hover:bg-secondary\"/>\n                                            </AddEditEventDialog>\n                                        </DroppableArea>\n\n                                        <div\n                                            className=\"pointer-events-none absolute inset-x-0 top-1/2 border-b border-dashed border-b-tertiary\"></div>\n\n                                        <DroppableArea date={selectedDate} hour={hour} minute={30}\n                                                       className=\"absolute inset-x-0 bottom-0 h-[48px]\">\n                                            <AddEditEventDialog startDate={selectedDate} startTime={{hour, minute: 30}}>\n                                                <div\n                                                    className=\"absolute inset-0 cursor-pointer transition-colors hover:bg-secondary\"/>\n                                            </AddEditEventDialog>\n                                        </DroppableArea>\n                                    </div>\n                                ))}\n\n                                <RenderGroupedEvents groupedEvents={groupedEvents} day={selectedDate}/>\n                            </div>\n\n                            <CalendarTimeline/>\n                        </div>\n                    </div>\n                </ScrollArea>\n            </div>\n\n            <div className=\"hidden w-72 divide-y border-l md:block\">\n                <DayPicker className=\"mx-auto w-fit\" mode=\"single\" selected={selectedDate}\n                           onSelect={(date) => date && setSelectedDate(date)} initialFocus/>\n\n                <div className=\"flex-1 space-y-3\">\n                    {currentEvents.length > 0 ? (\n                        <div className=\"flex items-start gap-2 px-4 pt-4\">\n              <span className=\"relative mt-[5px] flex size-2.5\">\n                <span\n                    className=\"absolute inline-flex size-full animate-ping rounded-full bg-success-400 opacity-75\"></span>\n                <span className=\"relative inline-flex size-2.5 rounded-full bg-success-600\"></span>\n              </span>\n\n                            <p className=\"text-sm font-semibold text-t-secondary\">Happening now</p>\n                        </div>\n                    ) : (\n                        <p className=\"p-4 text-center text-sm italic text-t-tertiary\">No appointments or consultations\n                            at the moment</p>\n                    )}\n\n                    {currentEvents.length > 0 && (\n                        <ScrollArea className=\"h-[422px] px-4\" type=\"always\">\n                            <div className=\"space-y-6 pb-4\">\n                                {currentEvents.map(event => {\n                                    const user = users.find(user => user.id === event.user.id);\n\n                                    return (\n                                        <div key={event.id} className=\"space-y-1.5\">\n                                            <p className=\"line-clamp-2 text-sm font-semibold\">{event.title}</p>\n\n                                            {user && (\n                                                <div className=\"flex items-center gap-1.5\">\n                                                    <User className=\"size-4 text-t-quinary\"/>\n                                                    <span className=\"text-sm text-t-tertiary\">{user.name}</span>\n                                                </div>\n                                            )}\n\n                                            <div className=\"flex items-center gap-1.5\">\n                                                <Calendar className=\"size-4 text-t-quinary\"/>\n                                                <span\n                                                    className=\"text-sm text-t-tertiary\">{format(new Date(event.startDate), \"MMM d, yyyy\")}</span>\n                                            </div>\n\n                                            <div className=\"flex items-center gap-1.5\">\n                                                <Clock className=\"size-4 text-t-quinary\"/>\n                                                <span className=\"text-sm text-t-tertiary\">\n                          {format(parseISO(event.startDate), use24HourFormat ? \"HH:mm\" : \"hh:mm a\")} -\n                                                    {format(parseISO(event.endDate), use24HourFormat ? \"HH:mm\" : \"hh:mm a\")}\n                        </span>\n                                            </div>\n                                        </div>\n                                    );\n                                })}\n                            </div>\n                        </ScrollArea>\n                    )}\n                </div>\n            </div>\n        </div>\n    );\n}",
      "type": "registry:component"
    },
    {
      "path": "src/modules/components/calendar/views/week-and-day-view/calendar-time-line.tsx",
      "content": "import { useEffect, useState } from \"react\";\nimport {formatTime} from \"@/modules/components/calendar/helpers\";\nimport {useCalendar} from \"@/modules/components/calendar/contexts/calendar-context\";\n\nexport function CalendarTimeline() {\n  const {use24HourFormat} = useCalendar()\n  const [currentTime, setCurrentTime] = useState(new Date());\n\n  useEffect(() => {\n    const timer = setInterval(() => setCurrentTime(new Date()), 60 * 1000);\n    return () => clearInterval(timer);\n  }, []);\n\n  const getCurrentTimePosition = () => {\n    const minutes = currentTime.getHours() * 60 + currentTime.getMinutes();\n    return (minutes / 1440) * 100;\n  };\n\n  const formatCurrentTime = () => {\n    return formatTime(currentTime, use24HourFormat);\n  };\n\n  return (\n    <div\n      className=\"pointer-events-none absolute inset-x-0 z-50 border-t border-primary\"\n      style={{ top: `${getCurrentTimePosition()}%` }}\n    >\n      <div className=\"absolute -left-1.5 -top-1.5 size-3 rounded-full bg-primary\"></div>\n\n      <div className=\"absolute -left-18 flex w-16 -translate-y-1/2 justify-end bg-background pr-1 text-xs font-medium text-primary\">\n        {formatCurrentTime()}\n      </div>\n    </div>\n  );\n}\n",
      "type": "registry:component"
    },
    {
      "path": "src/modules/components/calendar/views/week-and-day-view/calendar-week-view.tsx",
      "content": "import {startOfWeek, addDays, format, parseISO, isSameDay} from \"date-fns\";\nimport {motion} from \"framer-motion\";\n\nimport {useCalendar} from \"@/modules/components/calendar/contexts/calendar-context\";\nimport {\n    fadeIn,\n    staggerContainer,\n    transition,\n} from \"@/modules/components/calendar/animations\";\n\nimport {ScrollArea} from \"@/components/ui/scroll-area\";\nimport {AddEditEventDialog} from \"@/modules/components/calendar/dialogs/add-edit-event-dialog\";\nimport {CalendarTimeline} from \"@/modules/components/calendar/views/week-and-day-view/calendar-time-line\";\nimport {\n    WeekViewMultiDayEventsRow\n} from \"@/modules/components/calendar/views/week-and-day-view/week-view-multi-day-events-row\";\nimport {groupEvents} from \"@/modules/components/calendar/helpers\";\nimport type {IEvent} from \"@/modules/components/calendar/interfaces\";\nimport {RenderGroupedEvents} from \"@/modules/components/calendar/views/week-and-day-view/render-grouped-events\";\nimport {DroppableArea} from \"@/modules/components/calendar/dnd/droppable-area\";\n\ninterface IProps {\n    singleDayEvents: IEvent[];\n    multiDayEvents: IEvent[];\n}\n\nexport function CalendarWeekView({singleDayEvents, multiDayEvents}: IProps) {\n    const {selectedDate, use24HourFormat} = useCalendar();\n\n    const weekStart = startOfWeek(selectedDate);\n    const weekDays = Array.from({length: 7}, (_, i) => addDays(weekStart, i));\n    const hours = Array.from({length: 24}, (_, i) => i);\n\n    return (\n        <motion.div\n            initial=\"initial\"\n            animate=\"animate\"\n            exit=\"exit\"\n            variants={fadeIn}\n            transition={transition}\n        >\n            <motion.div\n                className=\"flex flex-col items-center justify-center border-b py-4 text-sm text-t-quaternary sm:hidden\"\n                initial={{opacity: 0, y: -20}}\n                animate={{opacity: 1, y: 0}}\n                transition={transition}\n            >\n                <p>Weekly view is not available on smaller devices.</p>\n                <p>Please switch to daily or monthly view.</p>\n            </motion.div>\n\n            <motion.div\n                className=\"hidden flex-col sm:flex\"\n                variants={staggerContainer}\n            >\n                <div>\n                    <WeekViewMultiDayEventsRow\n                        selectedDate={selectedDate}\n                        multiDayEvents={multiDayEvents}\n                    />\n\n                    {/* Week header */}\n                    <motion.div\n                        className=\"relative z-20 flex border-b\"\n                        initial={{opacity: 0, y: -20}}\n                        animate={{opacity: 1, y: 0}}\n                        transition={transition}\n                    >\n                        <div className=\"w-18\"></div>\n                        <div className=\"grid flex-1 grid-cols-7  border-l\">\n                            {weekDays.map((day, index) => (\n                                <motion.span\n                                    key={index}\n                                    className=\"py-2 text-center text-xs font-medium text-t-quaternary\"\n                                    initial={{opacity: 0, y: -10}}\n                                    animate={{opacity: 1, y: 0}}\n                                    transition={{delay: index * 0.05, ...transition}}\n                                >\n                                    {format(day, \"EE\")}{\" \"}\n                                    <span className=\"ml-1 font-semibold text-t-secondary\">\n                    {format(day, \"d\")}\n                  </span>\n                                </motion.span>\n                            ))}\n                        </div>\n                    </motion.div>\n                </div>\n\n                <ScrollArea className=\"h-[736px]\" type=\"always\">\n                    <div className=\"flex\">\n                        {/* Hours column */}\n                        <motion.div className=\"relative w-18\" variants={staggerContainer}>\n                            {hours.map((hour, index) => (\n                                <motion.div\n                                    key={hour}\n                                    className=\"relative\"\n                                    style={{height: \"96px\"}}\n                                    initial={{opacity: 0, x: -20}}\n                                    animate={{opacity: 1, x: 0}}\n                                    transition={{delay: index * 0.02, ...transition}}\n                                >\n                                    <div className=\"absolute -top-3 right-2 flex h-6 items-center\">\n                                        {index !== 0 && (\n                                            <span className=\"text-xs text-t-quaternary\">\n                        {format(\n                            new Date().setHours(hour, 0, 0, 0),\n                            use24HourFormat ? \"HH:00\" : \"h a\"\n                        )}\n                      </span>\n                                        )}\n                                    </div>\n                                </motion.div>\n                            ))}\n                        </motion.div>\n\n                        {/* Week grid */}\n                        <motion.div\n                            className=\"relative flex-1 border-l\"\n                            variants={staggerContainer}\n                        >\n                            <div className=\"grid grid-cols-7 divide-x\">\n                                {weekDays.map((day, dayIndex) => {\n                                    const dayEvents = singleDayEvents.filter(\n                                        (event) =>\n                                            isSameDay(parseISO(event.startDate), day) ||\n                                            isSameDay(parseISO(event.endDate), day)\n                                    );\n                                    const groupedEvents = groupEvents(dayEvents);\n\n                                    return (\n                                        <motion.div\n                                            key={dayIndex}\n                                            className=\"relative\"\n                                            initial={{opacity: 0}}\n                                            animate={{opacity: 1}}\n                                            transition={{delay: dayIndex * 0.1, ...transition}}\n                                        >\n                                            {hours.map((hour, index) => (\n                                                <motion.div\n                                                    key={hour}\n                                                    className=\"relative\"\n                                                    style={{height: \"96px\"}}\n                                                    initial={{opacity: 0}}\n                                                    animate={{opacity: 1}}\n                                                    transition={{delay: index * 0.01, ...transition}}\n                                                >\n                                                    {index !== 0 && (\n                                                        <div\n                                                            className=\"pointer-events-none absolute inset-x-0 top-0 border-b\"></div>\n                                                    )}\n\n                                                    <DroppableArea date={day} hour={hour} minute={0}\n                                                                   className=\"absolute inset-x-0 top-0  h-[48px]\">\n                                                        <AddEditEventDialog\n                                                            startDate={day}\n                                                            startTime={{hour, minute: 0}}\n                                                        >\n                                                            <div\n                                                                className=\"absolute inset-0 cursor-pointer transition-colors hover:bg-secondary\"/>\n\n                                                        </AddEditEventDialog>\n                                                    </DroppableArea>\n\n                                                    <div\n                                                        className=\"pointer-events-none absolute inset-x-0 top-1/2 border-b border-dashed border-b-tertiary\"></div>\n\n                                                    <DroppableArea date={day} hour={hour} minute={30}\n                                                                   className=\"absolute inset-x-0 bottom-0 h-[48px]\">\n                                                        <AddEditEventDialog\n                                                            startDate={day}\n                                                            startTime={{hour, minute: 30}}\n                                                        >\n                                                                <div\n                                                                    className=\"absolute inset-0 cursor-pointer transition-colors hover:bg-secondary\"/>\n\n                                                        </AddEditEventDialog>\n                                                    </DroppableArea>\n                                                </motion.div>\n                                            ))}\n\n                                            <RenderGroupedEvents\n                                                groupedEvents={groupedEvents}\n                                                day={day}\n                                            />\n                                        </motion.div>\n                                    );\n                                })}\n                            </div>\n\n                            <CalendarTimeline/>\n                        </motion.div>\n                    </div>\n                </ScrollArea>\n            </motion.div>\n        </motion.div>\n    );\n}",
      "type": "registry:component"
    },
    {
      "path": "src/modules/components/calendar/views/week-and-day-view/day-view-multi-day-events-row.tsx",
      "content": "import {differenceInDays, endOfDay, isWithinInterval, parseISO, startOfDay} from \"date-fns\";\n\nimport {MonthEventBadge} from \"@/modules/components/calendar/views/month-view/month-event-badge\";\n\nimport type {IEvent} from \"@/modules/components/calendar/interfaces\";\n\ninterface IProps {\n  selectedDate: Date;\n  multiDayEvents: IEvent[];\n}\n\nexport function DayViewMultiDayEventsRow({ selectedDate, multiDayEvents }: IProps) {\n  const dayStart = startOfDay(selectedDate);\n  const dayEnd = endOfDay(selectedDate);\n\n  const multiDayEventsInDay = multiDayEvents\n    .filter(event => {\n      const eventStart = parseISO(event.startDate);\n      const eventEnd = parseISO(event.endDate);\n\n      return isWithinInterval(dayStart, {start: eventStart, end: eventEnd}) ||\n          isWithinInterval(dayEnd, {start: eventStart, end: eventEnd}) ||\n          (eventStart <= dayStart && eventEnd >= dayEnd);\n    })\n    .sort((a, b) => {\n      const durationA = differenceInDays(parseISO(a.endDate), parseISO(a.startDate));\n      const durationB = differenceInDays(parseISO(b.endDate), parseISO(b.startDate));\n      return durationB - durationA;\n    });\n\n  if (multiDayEventsInDay.length === 0) return null;\n\n  return (\n    <div className=\"flex border-b\">\n      <div className=\"w-18\"></div>\n      <div className=\"flex flex-1 flex-col gap-1 border-l py-1\">\n        {multiDayEventsInDay.map(event => {\n          const eventStart = startOfDay(parseISO(event.startDate));\n          const eventEnd = startOfDay(parseISO(event.endDate));\n          const currentDate = startOfDay(selectedDate);\n\n          const eventTotalDays = differenceInDays(eventEnd, eventStart) + 1;\n          const eventCurrentDay = differenceInDays(currentDate, eventStart) + 1;\n\n          return <MonthEventBadge key={event.id} event={event} cellDate={selectedDate} eventCurrentDay={eventCurrentDay} eventTotalDays={eventTotalDays} />;\n        })}\n      </div>\n    </div>\n  );\n}\n",
      "type": "registry:component"
    },
    {
      "path": "src/modules/components/calendar/views/week-and-day-view/event-block.tsx",
      "content": "import { cva } from \"class-variance-authority\";\nimport { differenceInMinutes, parseISO } from \"date-fns\";\n\nimport { useCalendar } from \"@/modules/components/calendar/contexts/calendar-context\";\n\nimport { EventDetailsDialog } from \"@/modules/components/calendar/dialogs/event-details-dialog\";\nimport { cn } from \"@/lib/utils\";\n\nimport type { HTMLAttributes } from \"react\";\nimport type { IEvent } from \"@/modules/components/calendar/interfaces\";\nimport type { VariantProps } from \"class-variance-authority\";\nimport { DraggableEvent } from \"@/modules/components/calendar/dnd/draggable-event\";\nimport { formatTime } from \"@/modules/components/calendar/helpers\";\nimport {ResizableEvent} from \"@/modules/components/calendar/dnd/resizable-event\";\n\nconst calendarWeekEventCardVariants = cva(\n  \"flex select-none flex-col gap-0.5 truncate whitespace-nowrap rounded-md border px-2 py-1.5 text-xs focus-visible:outline-offset-2\",\n  {\n    variants: {\n      color: {\n        // Colored variants\n        blue: \"border-blue-200 bg-blue-100/50 text-blue-700 hover:bg-blue-100 dark:border-blue-800 dark:bg-blue-950/50 dark:text-blue-300 dark:hover:bg-blue-950\",\n        green:\n          \"border-green-200 bg-green-100/50 text-green-700 hover:bg-green-100 dark:border-green-800 dark:bg-green-950/50 dark:text-green-300 dark:hover:bg-green-950\",\n        red: \"border-red-200 bg-red-100/50 text-red-700 hover:bg-red-100 dark:border-red-800 dark:bg-red-950/50 dark:text-red-300 dark:hover:bg-red-950\",\n        yellow:\n          \"border-yellow-200 bg-yellow-100/50 text-yellow-700 hover:bg-yellow-100 dark:border-yellow-800 dark:bg-yellow-950/50 dark:text-yellow-300 dark:hover:bg-yellow-950\",\n        purple:\n          \"border-purple-200 bg-purple-100/50 text-purple-700 hover:bg-purple-100 dark:border-purple-800 dark:bg-purple-950/50 dark:text-purple-300 dark:hover:bg-purple-950\",\n        orange:\n          \"border-orange-200 bg-orange-100/50 text-orange-700 hover:bg-orange-100 dark:border-orange-800 dark:bg-orange-950/50 dark:text-orange-300 dark:hover:bg-orange-950\",\n\n        // Dot variants\n        \"blue-dot\":\n          \"border-border bg-card text-foreground hover:bg-accent [&_svg]:fill-blue-600 dark:[&_svg]:fill-blue-500\",\n        \"green-dot\":\n          \"border-border bg-card text-foreground hover:bg-accent [&_svg]:fill-green-600 dark:[&_svg]:fill-green-500\",\n        \"red-dot\":\n          \"border-border bg-card text-foreground hover:bg-accent [&_svg]:fill-red-600 dark:[&_svg]:fill-red-500\",\n        \"orange-dot\":\n          \"border-border bg-card text-foreground hover:bg-accent [&_svg]:fill-orange-600 dark:[&_svg]:fill-orange-500\",\n        \"purple-dot\":\n          \"border-border bg-card text-foreground hover:bg-accent [&_svg]:fill-purple-600 dark:[&_svg]:fill-purple-500\",\n        \"yellow-dot\":\n          \"border-border bg-card text-foreground hover:bg-accent [&_svg]:fill-yellow-600 dark:[&_svg]:fill-yellow-500\",\n      },\n    },\n    defaultVariants: {\n      color: \"blue-dot\",\n    },\n  }\n);\n\ninterface IProps\n  extends HTMLAttributes<HTMLDivElement>,\n    Omit<VariantProps<typeof calendarWeekEventCardVariants>, \"color\"> {\n  event: IEvent;\n}\n\nexport function EventBlock({ event, className }: IProps) {\n  const { badgeVariant , use24HourFormat } = useCalendar();\n\n  const start = parseISO(event.startDate);\n  const end = parseISO(event.endDate);\n  const durationInMinutes = differenceInMinutes(end, start);\n  const heightInPixels = (durationInMinutes / 60) * 96 - 8;\n\n  const color = (\n    badgeVariant === \"dot\" ? `${event.color}-dot` : event.color\n  ) as VariantProps<typeof calendarWeekEventCardVariants>[\"color\"];\n\n  const calendarWeekEventCardClasses = cn(\n    calendarWeekEventCardVariants({ color, className }),\n    durationInMinutes < 35 && \"py-0 justify-center\"\n  );\n\n  return (\n      <ResizableEvent event={event}>\n\n      <DraggableEvent event={event}>\n    <EventDetailsDialog event={event}>\n        <div\n          role=\"button\"\n          tabIndex={0}\n          className={calendarWeekEventCardClasses}\n          style={{ height: `${heightInPixels}px` }}\n        >\n          <div className=\"flex items-center gap-1.5 truncate\">\n            {badgeVariant === \"dot\" && (\n              <svg width=\"8\" height=\"8\" viewBox=\"0 0 8 8\" className=\"shrink-0\">\n                <circle cx=\"4\" cy=\"4\" r=\"4\" />\n              </svg>\n            )}\n\n            <p className=\"truncate font-semibold\">{event.title}</p>\n          </div>\n\n          {durationInMinutes > 25 && (\n            <p>\n              {formatTime(start, use24HourFormat)} - {formatTime(end, use24HourFormat)}\n            </p>\n          )}\n        </div>\n    </EventDetailsDialog>\n      </DraggableEvent>\n      </ResizableEvent>\n  );\n}\n",
      "type": "registry:component"
    },
    {
      "path": "src/modules/components/calendar/views/week-and-day-view/render-grouped-events.tsx",
      "content": "import { IEvent } from \"@/modules/components/calendar/interfaces\";\nimport { getEventBlockStyle } from \"@/modules/components/calendar/helpers\";\nimport { areIntervalsOverlapping, parseISO } from \"date-fns\";\nimport {EventBlock} from \"@/modules/components/calendar/views/week-and-day-view/event-block\";\n\ninterface RenderGroupedEventsProps {\n  groupedEvents: IEvent[][];\n  day: Date;\n}\n\nexport function RenderGroupedEvents({\n  groupedEvents,\n  day,\n}: RenderGroupedEventsProps) {\n\n  return groupedEvents.map((group, groupIndex) =>\n    group.map((event) => {\n      let style = getEventBlockStyle(\n        event,\n        day,\n        groupIndex,\n        groupedEvents.length\n      );\n      const hasOverlap = groupedEvents.some(\n        (otherGroup, otherIndex) =>\n          otherIndex !== groupIndex &&\n          otherGroup.some((otherEvent) =>\n            areIntervalsOverlapping(\n              {\n                start: parseISO(event.startDate),\n                end: parseISO(event.endDate),\n              },\n              {\n                start: parseISO(otherEvent.startDate),\n                end: parseISO(otherEvent.endDate),\n              }\n            )\n          )\n      );\n\n      if (!hasOverlap) style = { ...style, width: \"100%\", left: \"0%\" };\n\n      return (\n        <div key={event.id} className=\"absolute p-1\" style={style}>\n          <EventBlock event={event}  />\n        </div>\n      );\n    })\n  );\n}\n",
      "type": "registry:component"
    },
    {
      "path": "src/modules/components/calendar/views/week-and-day-view/week-view-multi-day-events-row.tsx",
      "content": "import { useMemo } from \"react\";\nimport { parseISO, startOfDay, startOfWeek, endOfWeek, addDays, differenceInDays, isBefore, isAfter } from \"date-fns\";\n\nimport { MonthEventBadge } from \"@/modules/components/calendar/views/month-view/month-event-badge\";\n\nimport type { IEvent } from \"@/modules/components/calendar/interfaces\";\n\ninterface IProps {\n  selectedDate: Date;\n  multiDayEvents: IEvent[];\n}\n\nexport function WeekViewMultiDayEventsRow({ selectedDate, multiDayEvents }: IProps) {\n  const weekStart = startOfWeek(selectedDate);\n  const weekEnd = endOfWeek(selectedDate);\n  const weekDays = Array.from({ length: 7 }, (_, i) => addDays(weekStart, i));\n\n  const processedEvents = useMemo(() => {\n    return multiDayEvents\n      .map(event => {\n        const start = parseISO(event.startDate);\n        const end = parseISO(event.endDate);\n        const adjustedStart = isBefore(start, weekStart) ? weekStart : start;\n        const adjustedEnd = isAfter(end, weekEnd) ? weekEnd : end;\n        const startIndex = differenceInDays(adjustedStart, weekStart);\n        const endIndex = differenceInDays(adjustedEnd, weekStart);\n\n        return {\n          ...event,\n          adjustedStart,\n          adjustedEnd,\n          startIndex,\n          endIndex,\n        };\n      })\n      .sort((a, b) => {\n        const startDiff = a.adjustedStart.getTime() - b.adjustedStart.getTime();\n        if (startDiff !== 0) return startDiff;\n        return b.endIndex - b.startIndex - (a.endIndex - a.startIndex);\n      });\n  }, [multiDayEvents, weekStart, weekEnd]);\n\n  const eventRows = useMemo(() => {\n    const rows: (typeof processedEvents)[] = [];\n\n    processedEvents.forEach(event => {\n      let rowIndex = rows.findIndex(row => row.every(e => e.endIndex < event.startIndex || e.startIndex > event.endIndex));\n\n      if (rowIndex === -1) {\n        rowIndex = rows.length;\n        rows.push([]);\n      }\n\n      rows[rowIndex].push(event);\n    });\n\n    return rows;\n  }, [processedEvents]);\n\n  const hasEventsInWeek = useMemo(() => {\n    return multiDayEvents.some(event => {\n      const start = parseISO(event.startDate);\n      const end = parseISO(event.endDate);\n\n      return (\n        // Event starts within the week\n        (start >= weekStart && start <= weekEnd) ||\n        // Event ends within the week\n        (end >= weekStart && end <= weekEnd) ||\n        // Event spans the entire week\n        (start <= weekStart && end >= weekEnd)\n      );\n    });\n  }, [multiDayEvents, weekStart, weekEnd]);\n\n  if (!hasEventsInWeek) {\n    return null;\n  }\n\n  return (\n    <div className=\"hidden overflow-hidden sm:flex\">\n      <div className=\"w-18 border-b\"></div>\n      <div className=\"grid flex-1 grid-cols-7 divide-x border-b border-l\">\n        {weekDays.map((day, dayIndex) => (\n          <div key={day.toISOString()} className=\"flex h-full flex-col gap-1 py-1\">\n            {eventRows.map((row, rowIndex) => {\n              const event = row.find(e => e.startIndex <= dayIndex && e.endIndex >= dayIndex);\n\n              if (!event) {\n                return <div key={`${rowIndex}-${dayIndex}`} className=\"h-6.5\" />;\n              }\n\n              let position: \"first\" | \"middle\" | \"last\" | \"none\" = \"none\";\n\n              if (dayIndex === event.startIndex && dayIndex === event.endIndex) {\n                position = \"none\";\n              } else if (dayIndex === event.startIndex) {\n                position = \"first\";\n              } else if (dayIndex === event.endIndex) {\n                position = \"last\";\n              } else {\n                position = \"middle\";\n              }\n\n              return <MonthEventBadge key={`${event.id}-${dayIndex}`} event={event} cellDate={startOfDay(day)} position={position} />;\n            })}\n          </div>\n        ))}\n      </div>\n    </div>\n  );\n}\n",
      "type": "registry:component"
    },
    {
      "path": "src/modules/components/calendar/views/year-view/calendar-year-view.tsx",
      "content": "import { motion } from \"framer-motion\";\nimport { getYear, isSameDay, isSameMonth } from \"date-fns\";\nimport { useCalendar } from \"@/modules/components/calendar/contexts/calendar-context\";\nimport { staggerContainer, transition } from \"@/modules/components/calendar/animations\";\nimport { getCalendarCells } from \"@/modules/components/calendar/helpers\";\nimport { cn } from \"@/lib/utils\";\nimport { IEvent } from \"@/modules/components/calendar/interfaces\";\nimport { EventBullet } from \"@/modules/components/calendar/views/month-view/event-bullet\";\nimport { EventListDialog } from \"@/modules/components/calendar/dialogs/events-list-dialog\";\n\ninterface IProps {\n    singleDayEvents: IEvent[];\n    multiDayEvents: IEvent[];\n}\n\nconst MONTHS = [\n    \"January\", \"February\", \"March\", \"April\",\n    \"May\", \"June\", \"July\", \"August\",\n    \"September\", \"October\", \"November\", \"December\"\n];\n\nconst WEEKDAYS = [\"Su\", \"Mo\", \"Tu\", \"We\", \"Th\", \"Fr\", \"Sa\"];\n\nexport function CalendarYearView({ singleDayEvents, multiDayEvents }: IProps) {\n    const { selectedDate, setSelectedDate } = useCalendar();\n    const currentYear = getYear(selectedDate);\n    const allEvents = [...multiDayEvents, ...singleDayEvents];\n\n    return (\n        <div className=\"flex flex-col h-full sm:min-h-[80vh] overflow-hidden sm:p-5\">\n            <motion.div\n                className=\"flex flex-col items-center justify-center py-4 text-sm text-t-quaternary sm:hidden\"\n                initial={{opacity: 0, y: -20}}\n                animate={{opacity: 1, y: 0}}\n                transition={transition}\n            >\n                <p>Yearly view is not available on smaller devices.</p>\n                <p>Please switch to daily or monthly view.</p>\n            </motion.div>\n            <motion.div\n                initial=\"initial\"\n                animate=\"animate\"\n                variants={staggerContainer}\n                className=\"hidden sm:grid grid-cols-3 gap-4 flex-grow overflow-hidden auto-rows-fr lg:grid-cols-4 \"\n            >\n                {MONTHS.map((month, monthIndex) => {\n                    const monthDate = new Date(currentYear, monthIndex, 1);\n                    const cells = getCalendarCells(monthDate);\n\n                    return (\n                        <motion.div\n                            key={month}\n                            className=\"flex flex-col border rounded-md overflow-hidden h-full\"\n                            initial={{ opacity: 0, scale: 0.9 }}\n                            animate={{ opacity: 1, scale: 1 }}\n                            transition={{ delay: monthIndex * 0.05, ...transition }}\n                        >\n                            <div\n                                className=\"bg-primary/5 px-1 py-1 text-center font-medium cursor-pointer hover:bg-primary/10 transition-colors text-xs sm:text-sm\"\n                                onClick={() => setSelectedDate(new Date(currentYear, monthIndex, 1))}\n                            >\n                                {month}\n                            </div>\n\n                            <div className=\"grid grid-cols-7 text-center text-xs py-1\">\n                                {WEEKDAYS.map(day => (\n                                    <div key={day} className=\"text-muted-foreground\">\n                                        {day}\n                                    </div>\n                                ))}\n                            </div>\n\n                            <div className=\"grid grid-cols-7 gap-0 p-0.5 flex-grow\">\n                                {cells.map((cell) => {\n                                    const isCurrentMonth = isSameMonth(cell.date, monthDate);\n                                    const isToday = isSameDay(cell.date, new Date());\n                                    const dayEvents = allEvents.filter(event =>\n                                        isSameDay(new Date(event.startDate), cell.date)\n                                    );\n                                    const hasEvents = dayEvents.length > 0;\n\n                                    return (\n                                        <div\n                                            key={cell.date.toISOString()}\n                                            className={cn(\n                                                \"flex flex-col items-center justify-center text-xs relative\",\n                                                !isCurrentMonth && \"text-muted-foreground/50\",\n                                                isToday && \"font-bold\",\n                                                !hasEvents && \"cursor-default\"\n                                            )}\n                                        >\n                                            {hasEvents ? (\n                                                <EventListDialog date={cell.date} events={dayEvents}>\n                                                    <div className=\"cursor-pointer w-full h-full flex flex-col items-center justify-center\">\n                            <span className={cn(\n                                \"size-4 sm:size-5 flex items-center justify-center\",\n                                isToday && \"rounded-full bg-primary text-primary-foreground\"\n                            )}>\n                              {cell.day}\n                            </span>\n                                                        <div className=\"flex justify-center items-center gap-0.5\">\n                                                            {dayEvents.length <= 2 ? (\n                                                                dayEvents.slice(0, 2).map(event => (\n                                                                    <EventBullet\n                                                                        key={event.id}\n                                                                        color={event.color}\n                                                                        className=\"size-1\"\n                                                                    />\n                                                                ))\n                                                            ) : (\n                                                                <>\n                                                                    <EventBullet\n                                                                        color={dayEvents[0].color}\n                                                                        className=\"size-1\"\n                                                                    />\n                                                                    <span className=\"text-[.7rem] text-muted-foreground\">\n                                    +{dayEvents.length - 1 }\n                                  </span>\n                                                                </>\n                                                            )}\n                                                        </div>\n                                                    </div>\n                                                </EventListDialog>\n                                            ) : (\n                                                <div className=\"w-full h-full flex flex-col items-center justify-center\">\n                          <span className={cn(\n                              \"size-4 sm:size-5 flex items-center justify-center\",\n                              isToday && \"rounded-full bg-primary text-primary-foreground\"\n                          )}>\n                            {cell.day}\n                          </span>\n                                                </div>\n                                            )}\n                                        </div>\n                                    );\n                                })}\n                            </div>\n                        </motion.div>\n                    );\n                })}\n            </motion.div>\n        </div>\n    );\n}",
      "type": "registry:component"
    },
    {
      "path": "src/modules/components/calendar/calendar.tsx",
      "content": "import React from \"react\";\nimport {CalendarProvider} from \"@/modules/components/calendar/contexts/calendar-context\";\nimport {CalendarHeader} from \"@/modules/components/calendar/header/calendar-header\";\nimport {CalendarBody} from \"@/modules/components/calendar/calendar-body\";\n\nimport {DndProvider} from \"@/modules/components/calendar/contexts/dnd-context\";\nimport {getEvents, getUsers} from \"@/modules/components/calendar/requests\";\n\nasync function getCalendarData() {\n    await new Promise(resolve => setTimeout(resolve, 5000));\n\n    return {\n        events: await getEvents(),\n        users: await getUsers()\n    };\n}\n\nexport async function Calendar() {\n\n    const {events, users} = await getCalendarData();\n\n    return (\n        <CalendarProvider events={events} users={users} view=\"month\">\n            <DndProvider>\n                <div className=\"w-full border rounded-xl\">\n                    <CalendarHeader/>\n                    <CalendarBody/>\n                </div>\n            </DndProvider>\n        </CalendarProvider>\n    );\n}",
      "type": "registry:component"
    },
    {
      "path": "src/modules/components/calendar/calendar-body.tsx",
      "content": "\"use client\";\n\nimport React from \"react\";\nimport {useCalendar} from \"@/modules/components/calendar/contexts/calendar-context\";\nimport {motion} from \"framer-motion\";\nimport {fadeIn, transition} from \"@/modules/components/calendar/animations\";\nimport {AgendaEvents} from \"@/modules/components/calendar/views/agenda-view/agenda-events\";\nimport {CalendarMonthView} from \"@/modules/components/calendar/views/month-view/calendar-month-view\";\nimport {CalendarWeekView} from \"@/modules/components/calendar/views/week-and-day-view/calendar-week-view\";\nimport {CalendarDayView} from \"@/modules/components/calendar/views/week-and-day-view/calendar-day-view\";\nimport {CalendarYearView} from \"@/modules/components/calendar/views/year-view/calendar-year-view\";\nimport {isSameDay, parseISO} from \"date-fns\";\n\nexport function CalendarBody() {\n    const {view , events} = useCalendar();\n\n    const singleDayEvents = events.filter((event) => {\n        const startDate = parseISO(event.startDate);\n        const endDate = parseISO(event.endDate);\n        return isSameDay(startDate, endDate);\n    });\n\n    const multiDayEvents = events.filter((event) => {\n        const startDate = parseISO(event.startDate);\n        const endDate = parseISO(event.endDate);\n        return !isSameDay(startDate, endDate);\n    });\n\n    return (\n            <div className='w-full h-full overflow-scroll relative'>\n                <motion.div\n                    key={view}\n                    initial=\"initial\"\n                    animate=\"animate\"\n                    exit=\"exit\"\n                    variants={fadeIn}\n                    transition={transition}\n                >\n                    {view === \"month\" && (\n                        <CalendarMonthView\n                            singleDayEvents={singleDayEvents}\n                            multiDayEvents={multiDayEvents}\n                        />\n                    )}\n                    {view === \"week\" && (\n                        <CalendarWeekView\n                            singleDayEvents={singleDayEvents}\n                            multiDayEvents={multiDayEvents}\n                        />\n                    )}\n                    {view === \"day\" && (\n                        <CalendarDayView\n                            singleDayEvents={singleDayEvents}\n                            multiDayEvents={multiDayEvents}\n                        />\n                    )}\n                    {view === \"year\" && (\n                        <CalendarYearView\n                            singleDayEvents={singleDayEvents}\n                            multiDayEvents={multiDayEvents}\n                        />\n                    )}\n                    {\n                        view === \"agenda\" && (\n                            <motion.div\n                                key=\"agenda\"\n                                initial=\"initial\"\n                                animate=\"animate\"\n                                exit=\"exit\"\n                                variants={fadeIn}\n                                transition={transition}\n                            >\n                                <AgendaEvents/>\n                            </motion.div>\n                        )\n                    }\n                </motion.div>\n            </div>\n    );\n}",
      "type": "registry:component"
    },
    {
      "path": "src/modules/components/calendar/constants.ts",
      "content": "import type {TEventColor} from \"@/modules/components/calendar/types\";\n\nexport const COLORS: TEventColor[] = [\"blue\", \"green\", \"red\", \"yellow\", \"purple\", \"orange\"];\n\n",
      "type": "registry:component"
    },
    {
      "path": "src/modules/components/calendar/animations.ts",
      "content": "import { Variants } from \"framer-motion\";\n\nexport const fadeIn: Variants = {\n  initial: { opacity: 0 },\n  animate: { opacity: 1 },\n  exit: { opacity: 0 },\n};\n\nexport const slideFromLeft: Variants = {\n  initial: { x: -20, opacity: 0 },\n  animate: { x: 0, opacity: 1 },\n  exit: { x: 20, opacity: 0 },\n};\n\nexport const slideFromRight: Variants = {\n  initial: { x: 20, opacity: 0 },\n  animate: { x: 0, opacity: 1 },\n  exit: { x: -20, opacity: 0 },\n};\n\nexport const transition = {\n  type: \"spring\",\n  stiffness: 200,\n  damping: 20,\n};\n\nexport const staggerContainer: Variants = {\n  animate: {\n    transition: {\n      staggerChildren: 0.1,\n    },\n  },\n};\n\nexport const buttonHover: Variants = {\n  hover: { scale: 1.05 },\n  tap: { scale: 0.95 },\n};\n",
      "type": "registry:component"
    },
    {
      "path": "src/modules/components/calendar/helpers.ts",
      "content": "import {\n    addDays,\n    addMonths,\n    addWeeks,\n    addYears,\n    subDays,\n    subMonths,\n    subWeeks,\n    subYears,\n    isSameWeek,\n    isSameDay,\n    isSameMonth,\n    isSameYear,\n    startOfWeek,\n    startOfMonth,\n    startOfYear,\n    endOfMonth,\n    endOfWeek,\n    endOfYear,\n    format,\n    parseISO,\n    differenceInMinutes,\n    eachDayOfInterval,\n    startOfDay,\n    differenceInDays,\n    isValid,\n} from \"date-fns\";\nimport {TCalendarView, TEventColor} from \"@/modules/components/calendar/types\";\nimport type {ICalendarCell, IEvent} from \"@/modules/components/calendar/interfaces\";\nimport {useCalendar} from \"@/modules/components/calendar/contexts/calendar-context\";\n\nconst FORMAT_STRING = \"MMM d, yyyy\";\n\nexport function rangeText(view: TCalendarView, date: Date): string {\n    let start: Date;\n    let end: Date;\n\n    switch (view) {\n        case \"month\":\n            start = startOfMonth(date);\n            end = endOfMonth(date);\n            break;\n        case \"week\":\n            start = startOfWeek(date);\n            end = endOfWeek(date);\n            break;\n        case \"day\":\n            return format(date, FORMAT_STRING);\n        case \"year\":\n            start = startOfYear(date);\n            end = endOfYear(date);\n            break;\n        case \"agenda\":\n            start = startOfMonth(date);\n            end = endOfMonth(date);\n            break;\n        default:\n            return \"Error while formatting\";\n    }\n\n    return `${format(start, FORMAT_STRING)} - ${format(end, FORMAT_STRING)}`;\n}\n\nexport function navigateDate(date: Date, view: TCalendarView, direction: \"previous\" | \"next\"): Date {\n    const operations: Record<TCalendarView, (d: Date, n: number) => Date> = {\n        month: direction === \"next\" ? addMonths : subMonths,\n        week: direction === \"next\" ? addWeeks : subWeeks,\n        day: direction === \"next\" ? addDays : subDays,\n        year: direction === \"next\" ? addYears : subYears,\n        agenda: direction === \"next\" ? addMonths : subMonths,\n    };\n\n    return operations[view](date, 1);\n}\n\nexport function getEventsCount(events: IEvent[], date: Date, view: TCalendarView): number {\n    const compareFns: Record<TCalendarView, (d1: Date, d2: Date) => boolean> = {\n        day: isSameDay,\n        week: isSameWeek,\n        month: isSameMonth,\n        year: isSameYear,\n        agenda: isSameMonth,\n    };\n\n    const compareFn = compareFns[view];\n    return events.filter((event) => compareFn(parseISO(event.startDate), date)).length;\n}\n\nexport function groupEvents(dayEvents: IEvent[]): IEvent[][] {\n    const sortedEvents = dayEvents.sort((a, b) =>\n        parseISO(a.startDate).getTime() - parseISO(b.startDate).getTime()\n    );\n    const groups: IEvent[][] = [];\n\n    for (const event of sortedEvents) {\n        const eventStart = parseISO(event.startDate);\n        let placed = false;\n\n        for (const group of groups) {\n            const lastEventInGroup = group[group.length - 1];\n            const lastEventEnd = parseISO(lastEventInGroup.endDate);\n\n            if (eventStart >= lastEventEnd) {\n                group.push(event);\n                placed = true;\n                break;\n            }\n        }\n\n        if (!placed) groups.push([event]);\n    }\n\n    return groups;\n}\n\nexport function getEventBlockStyle(event: IEvent, day: Date, groupIndex: number, groupSize: number) {\n    const startDate = parseISO(event.startDate);\n    const dayStart = startOfDay(day); // Use startOfDay instead of manual reset\n    const eventStart = startDate < dayStart ? dayStart : startDate;\n    const startMinutes = differenceInMinutes(eventStart, dayStart);\n\n    const top = (startMinutes / 1440) * 100; // 1440 minutes in a day\n    const width = 100 / groupSize;\n    const left = groupIndex * width;\n\n    return {top: `${top}%`, width: `${width}%`, left: `${left}%`};\n}\n\nexport function getCalendarCells(selectedDate: Date): ICalendarCell[] {\n    const year = selectedDate.getFullYear();\n    const month = selectedDate.getMonth();\n\n    const daysInMonth = endOfMonth(selectedDate).getDate(); // Faster than new Date(year, month + 1, 0)\n    const firstDayOfMonth = startOfMonth(selectedDate).getDay();\n    const daysInPrevMonth = endOfMonth(new Date(year, month - 1)).getDate();\n    const totalDays = firstDayOfMonth + daysInMonth;\n\n    const prevMonthCells = Array.from({length: firstDayOfMonth}, (_, i) => ({\n        day: daysInPrevMonth - firstDayOfMonth + i + 1,\n        currentMonth: false,\n        date: new Date(year, month - 1, daysInPrevMonth - firstDayOfMonth + i + 1),\n    }));\n\n    const currentMonthCells = Array.from({length: daysInMonth}, (_, i) => ({\n        day: i + 1,\n        currentMonth: true,\n        date: new Date(year, month, i + 1),\n    }));\n\n    const nextMonthCells = Array.from({length: (7 - (totalDays % 7)) % 7}, (_, i) => ({\n        day: i + 1,\n        currentMonth: false,\n        date: new Date(year, month + 1, i + 1),\n    }));\n\n    return [...prevMonthCells, ...currentMonthCells, ...nextMonthCells];\n}\n\nexport function calculateMonthEventPositions(\n    multiDayEvents: IEvent[],\n    singleDayEvents: IEvent[],\n    selectedDate: Date\n): Record<string, number> {\n    const monthStart = startOfMonth(selectedDate);\n    const monthEnd = endOfMonth(selectedDate);\n\n    const eventPositions: Record<string, number> = {};\n    const occupiedPositions: Record<string, boolean[]> = {};\n\n    eachDayOfInterval({start: monthStart, end: monthEnd}).forEach((day) => {\n        occupiedPositions[day.toISOString()] = [false, false, false];\n    });\n\n    const sortedEvents = [\n        ...multiDayEvents.sort((a, b) => {\n            const aDuration = differenceInDays(parseISO(a.endDate), parseISO(a.startDate));\n            const bDuration = differenceInDays(parseISO(b.endDate), parseISO(b.startDate));\n            return bDuration - aDuration || parseISO(a.startDate).getTime() - parseISO(b.startDate).getTime();\n        }),\n        ...singleDayEvents.sort((a, b) => parseISO(a.startDate).getTime() - parseISO(b.startDate).getTime()),\n    ];\n\n    sortedEvents.forEach((event) => {\n        const eventStart = parseISO(event.startDate);\n        const eventEnd = parseISO(event.endDate);\n        const eventDays = eachDayOfInterval({\n            start: eventStart < monthStart ? monthStart : eventStart,\n            end: eventEnd > monthEnd ? monthEnd : eventEnd,\n        });\n\n        let position = -1;\n\n        for (let i = 0; i < 3; i++) {\n            if (\n                eventDays.every((day) => {\n                    const dayPositions = occupiedPositions[startOfDay(day).toISOString()];\n                    return dayPositions && !dayPositions[i];\n                })\n            ) {\n                position = i;\n                break;\n            }\n        }\n\n        if (position !== -1) {\n            eventDays.forEach((day) => {\n                const dayKey = startOfDay(day).toISOString();\n                occupiedPositions[dayKey][position] = true;\n            });\n            eventPositions[event.id] = position;\n        }\n    });\n\n    return eventPositions;\n}\n\nexport function getMonthCellEvents(\n    date: Date,\n    events: IEvent[],\n    eventPositions: Record<string, number>\n) {\n    const dayStart = startOfDay(date);\n    const eventsForDate = events.filter((event) => {\n        const eventStart = parseISO(event.startDate);\n        const eventEnd = parseISO(event.endDate);\n        return (\n            (dayStart >= eventStart && dayStart <= eventEnd) ||\n            isSameDay(dayStart, eventStart) ||\n            isSameDay(dayStart, eventEnd)\n        );\n    });\n\n    return eventsForDate\n        .map((event) => ({\n            ...event,\n            position: eventPositions[event.id] ?? -1,\n            isMultiDay: event.startDate !== event.endDate,\n        }))\n        .sort((a, b) => {\n            if (a.isMultiDay && !b.isMultiDay) return -1;\n            if (!a.isMultiDay && b.isMultiDay) return 1;\n            return a.position - b.position;\n        });\n}\n\nexport function formatTime(date: Date | string, use24HourFormat: boolean): string {\n    const parsedDate = typeof date === \"string\" ? parseISO(date) : date;\n    if (!isValid(parsedDate)) return \"\";\n    return format(parsedDate, use24HourFormat ? \"HH:mm\" : \"h:mm a\");\n}\n\nexport const getFirstLetters = (str: string): string => {\n    if (!str) return \"\";\n    const words = str.split(\" \");\n    if (words.length === 1) return words[0].charAt(0).toUpperCase();\n    return `${words[0].charAt(0).toUpperCase()}${words[1].charAt(0).toUpperCase()}`;\n};\n\nexport const getEventsForDay = (events: IEvent[], date: Date, isWeek = false): IEvent[] => {\n    const targetDate = startOfDay(date);\n    return events\n        .filter((event) => {\n            const startOfDayForEventStart = startOfDay(parseISO(event.startDate));\n            const startOfDayForEventEnd = startOfDay(parseISO(event.endDate));\n            if (isWeek) {\n                return (\n                    event.startDate !== event.endDate &&\n                    startOfDayForEventStart <= targetDate &&\n                    startOfDayForEventEnd >= targetDate\n                );\n            }\n            return (\n                startOfDayForEventStart <= targetDate && startOfDayForEventEnd >= targetDate\n            );\n        })\n        .map((event) => {\n            const eventStart = startOfDay(parseISO(event.startDate));\n            const eventEnd = startOfDay(parseISO(event.endDate));\n            let point: \"start\" | \"end\" | \"none\" | undefined;\n\n            if (isSameDay(eventStart, eventEnd)) {\n                point = \"none\";\n            } else if (isSameDay(eventStart, targetDate)) {\n                point = \"start\";\n            } else if (isSameDay(eventEnd, targetDate)) {\n                point = \"end\";\n            }\n\n            return {...event, point};\n        });\n};\n\nexport const getWeekDates = (date: Date): Date[] => {\n    const startDate = startOfWeek(date, {weekStartsOn: 1});\n    return Array.from({length: 7}, (_, i) => addDays(startDate, i));\n};\n\nexport const getEventsForWeek = (events: IEvent[], date: Date): IEvent[] => {\n    const weekDates = getWeekDates(date);\n    const startOfWeekDate = weekDates[0];\n    const endOfWeekDate = weekDates[6];\n\n    return events.filter((event) => {\n        const eventStart = parseISO(event.startDate);\n        const eventEnd = parseISO(event.endDate);\n        return isValid(eventStart) && isValid(eventEnd) && eventStart <= endOfWeekDate && eventEnd >= startOfWeekDate;\n    });\n};\n\nexport const getEventsForMonth = (events: IEvent[], date: Date): IEvent[] => {\n    const startOfMonthDate = startOfMonth(date);\n    const endOfMonthDate = endOfMonth(date);\n\n    return events.filter((event) => {\n        const eventStart = parseISO(event.startDate);\n        const eventEnd = parseISO(event.endDate);\n        return isValid(eventStart) && isValid(eventEnd) && eventStart <= endOfMonthDate && eventEnd >= startOfMonthDate;\n    });\n};\n\nexport const getEventsForYear = (events: IEvent[], date: Date): IEvent[] => {\n    if (!events || !Array.isArray(events) || !isValid(date)) return [];\n\n    const startOfYearDate = startOfYear(date);\n    const endOfYearDate = endOfYear(date);\n\n    return events.filter((event) => {\n        const eventStart = parseISO(event.startDate);\n        const eventEnd = parseISO(event.endDate);\n        return isValid(eventStart) && isValid(eventEnd) && eventStart <= endOfYearDate && eventEnd >= startOfYearDate;\n    });\n};\n\nexport const getColorClass = (color: string): string => {\n    const colorClasses: Record<TEventColor, string> = {\n        red: \"border-red-200 bg-red-50 text-red-700 dark:border-red-800 dark:bg-red-950 dark:text-red-300\",\n        yellow: \"border-yellow-200 bg-yellow-50 text-yellow-700 dark:border-yellow-800 dark:bg-yellow-950 dark:text-yellow-300\",\n        green: \"border-green-200 bg-green-50 text-green-700 dark:border-green-800 dark:bg-green-950 dark:text-green-300\",\n        blue: \"border-blue-200 bg-blue-50 text-blue-700 dark:border-blue-800 dark:bg-blue-950 dark:text-blue-300\",\n        orange: \"border-orange-200 bg-orange-50 text-orange-700 dark:border-orange-800 dark:bg-orange-950 dark:text-orange-300\",\n        purple: \"border-purple-200 bg-purple-50 text-purple-700 dark:border-purple-800 dark:bg-purple-950 dark:text-purple-300\",\n    };\n    return colorClasses[color as TEventColor] || \"\";\n};\n\nexport const getBgColor = (color: string): string => {\n    const colorClasses: Record<TEventColor, string> = {\n        red: \"bg-red-400 dark:bg-red-600\",\n        yellow: \"bg-yellow-400 dark:bg-yellow-600\",\n        green: \"bg-green-400 dark:bg-green-600\",\n        blue: \"bg-blue-400 dark:bg-blue-600\",\n        orange: \"bg-orange-400 dark:bg-orange-600\",\n        purple: \"bg-purple-400 dark:bg-purple-600\",\n    };\n    return colorClasses[color as TEventColor] || \"\";\n};\n\nexport const useGetEventsByMode = (events: IEvent[]) => {\n    const {view, selectedDate} = useCalendar();\n\n    switch (view) {\n        case \"day\":\n            return getEventsForDay(events, selectedDate);\n        case \"week\":\n            return getEventsForWeek(events, selectedDate);\n        case \"agenda\":\n        case \"month\":\n            return getEventsForMonth(events, selectedDate);\n        case \"year\":\n            return getEventsForYear(events, selectedDate);\n        default:\n            return [];\n    }\n};\n\nexport const toCapitalize = (str: string): string => {\n    if (!str) return \"\";\n    return str.charAt(0).toUpperCase() + str.slice(1);\n}",
      "type": "registry:component"
    },
    {
      "path": "src/modules/components/calendar/hooks.ts",
      "content": "import {useEffect, useState} from \"react\";\n\nexport function useDisclosure({defaultIsOpen = false}: { defaultIsOpen?: boolean } = {}) {\n    const [isOpen, setIsOpen] = useState(defaultIsOpen);\n\n    const onOpen = () => setIsOpen(true);\n    const onClose = () => setIsOpen(false);\n    const onToggle = () => setIsOpen(currentValue => !currentValue);\n\n    return {onOpen, onClose, isOpen, onToggle};\n}\n\nexport const useLocalStorage = <T>(key: string, initialValue: T): [T, (value: T) => void] => {\n    const readValue = (): T => {\n        if (typeof window === \"undefined\") {\n            return initialValue;\n        }\n\n        try {\n            const item = window.localStorage.getItem(key);\n            return item ? (JSON.parse(item) as T) : initialValue;\n        } catch (error) {\n            console.warn(`Error reading localStorage key \"${key}\":`, error);\n            return initialValue;\n        }\n    };\n\n    const [storedValue, setStoredValue] = useState<T>(readValue);\n\n    const setValue = (value: T) => {\n        try {\n            const valueToStore = value instanceof Function ? value(storedValue) : value;\n            setStoredValue(valueToStore);\n            if (typeof window !== \"undefined\") {\n                window.localStorage.setItem(key, JSON.stringify(valueToStore));\n            }\n        } catch (error) {\n            console.warn(`Error setting localStorage key \"${key}\":`, error);\n        }\n    };\n\n    return [storedValue, setValue];\n};\n\nexport function useMediaQuery(query: string): boolean {\n    const [matches, setMatches] = useState(false);\n\n    useEffect(() => {\n        const media = window.matchMedia(query);\n        if (media.matches !== matches) {\n            setMatches(media.matches);\n        }\n\n        const listener = () => setMatches(media.matches);\n        media.addEventListener(\"change\", listener);\n\n        return () => media.removeEventListener(\"change\", listener);\n    }, [matches, query]);\n\n    return matches;\n}\n",
      "type": "registry:component"
    },
    {
      "path": "src/modules/components/calendar/interfaces.ts",
      "content": "import type { TEventColor } from \"@/modules/components/calendar/types\";\n\nexport interface IUser {\n  id: string;\n  name: string;\n  picturePath: string | null;\n}\n\nexport interface IEvent {\n  id: number;\n  startDate: string;\n  endDate: string;\n  title: string;\n  color: TEventColor;\n  description: string;\n  user: IUser;\n}\n\nexport interface ICalendarCell {\n  day: number;\n  currentMonth: boolean;\n  date: Date;\n}\n",
      "type": "registry:component"
    },
    {
      "path": "src/modules/components/calendar/mocks.ts",
      "content": "import type { IEvent, IUser } from \"@/modules/components/calendar/interfaces\";\nimport {COLORS} from \"@/modules/components/calendar/constants\";\n\nexport const USERS_MOCK: IUser[] = [\n  {\n    id: \"f3b035ac-49f7-4e92-a715-35680bf63175\",\n    name: \"Michael Doe\",\n    picturePath: null,\n  },\n  {\n    id: \"3e36ea6e-78f3-40dd-ab8c-a6c737c3c422\",\n    name: \"Alice Johnson\",\n    picturePath: null,\n  },\n  {\n    id: \"a7aff6bd-a50a-4d6a-ab57-76f76bb27cf5\",\n    name: \"Robert Smith\",\n    picturePath: null,\n  },\n  {\n    id: \"dd503cf9-6c38-43cf-94cc-0d4032e2f77a\",\n    name: \"Emily Davis\",\n    picturePath: null,\n  },\n];\n\n// ================================== //\n\nconst events = [\n  \"Doctor's appointment\",\n  \"Dental cleaning\",\n  \"Eye exam\",\n  \"Therapy session\",\n  \"Business meeting\",\n  \"Team stand-up\",\n  \"Project deadline\",\n  \"Weekly report submission\",\n  \"Client presentation\",\n  \"Marketing strategy review\",\n  \"Networking event\",\n  \"Sales call\",\n  \"Investor pitch\",\n  \"Board meeting\",\n  \"Employee training\",\n  \"Performance review\",\n  \"One-on-one meeting\",\n  \"Lunch with a colleague\",\n  \"HR interview\",\n  \"Conference call\",\n  \"Web development sprint planning\",\n  \"Software deployment\",\n  \"Code review\",\n  \"QA testing session\",\n  \"Cybersecurity audit\",\n  \"Server maintenance\",\n  \"API integration update\",\n  \"Data backup\",\n  \"Cloud migration\",\n  \"System upgrade\",\n  \"Content planning session\",\n  \"Product launch\",\n  \"Customer support review\",\n  \"Team building activity\",\n  \"Legal consultation\",\n  \"Budget review\",\n  \"Financial planning session\",\n  \"Tax filing deadline\",\n  \"Investor relations update\",\n  \"Partnership negotiation\",\n  \"Medical check-up\",\n  \"Vaccination appointment\",\n  \"Blood donation\",\n  \"Gym workout\",\n  \"Yoga class\",\n  \"Physical therapy session\",\n  \"Nutrition consultation\",\n  \"Personal trainer session\",\n  \"Parent-teacher meeting\",\n  \"School open house\",\n  \"College application deadline\",\n  \"Final exam\",\n  \"Graduation ceremony\",\n  \"Job interview\",\n  \"Internship orientation\",\n  \"Office relocation\",\n  \"Business trip\",\n  \"Flight departure\",\n  \"Hotel check-in\",\n  \"Vacation planning\",\n  \"Birthday party\",\n  \"Wedding anniversary\",\n  \"Family reunion\",\n  \"Housewarming party\",\n  \"Community volunteer work\",\n  \"Charity fundraiser\",\n  \"Religious service\",\n  \"Concert attendance\",\n  \"Theater play\",\n  \"Movie night\",\n  \"Sporting event\",\n  \"Football match\",\n  \"Basketball game\",\n  \"Tennis practice\",\n  \"Marathon training\",\n  \"Cycling event\",\n  \"Fishing trip\",\n  \"Camping weekend\",\n  \"Hiking expedition\",\n  \"Photography session\",\n  \"Art workshop\",\n  \"Cooking class\",\n  \"Book club meeting\",\n  \"Grocery shopping\",\n  \"Car maintenance\",\n  \"Home renovation meeting\",\n];\n\nconst mockGenerator = (numberOfEvents: number): IEvent[] => {\n  const result: IEvent[] = [];\n  let currentId = 1;\n\n  const randomUser = USERS_MOCK[Math.floor(Math.random() * USERS_MOCK.length)];\n\n  // Date range: 30 days before and after now\n  const now = new Date();\n  const startRange = new Date(now);\n  startRange.setDate(now.getDate() - 30);\n  const endRange = new Date(now);\n  endRange.setDate(now.getDate() + 30);\n\n  // Create an event happening now\n  const currentEvent = {\n    id: currentId++,\n    startDate: new Date(now.getTime() - 30 * 60000).toISOString(),\n    endDate: new Date(now.getTime() + 30 * 60000).toISOString(),\n    title: events[Math.floor(Math.random() * events.length)],\n    color: COLORS[Math.floor(Math.random() * COLORS.length)],\n    description: \"Lorem ipsum dolor sit amet, consectetur adipiscing elit. Sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.\",\n    user: randomUser,\n  };\n\n  result.push(currentEvent);\n\n  // Generate the remaining events\n  for (let i = 0; i < numberOfEvents - 1; i++) {\n    // Determine if this is a multi-day event (10% chance)\n    const isMultiDay = Math.random() < 0.1;\n\n    const startDate = new Date(startRange.getTime() + Math.random() * (endRange.getTime() - startRange.getTime()));\n\n    // Set time between 8 AM and 8 PM\n    startDate.setHours(8 + Math.floor(Math.random() * 12), Math.floor(Math.random() * 60), 0, 0);\n\n    const endDate = new Date(startDate);\n\n    if (isMultiDay) {\n      // Multi-day event: Add 1-4 days\n      const additionalDays = Math.floor(Math.random() * 4) + 1;\n      endDate.setDate(startDate.getDate() + additionalDays);\n      endDate.setHours(8 + Math.floor(Math.random() * 12), Math.floor(Math.random() * 60), 0, 0);\n    } else {\n      // Same-day event: Add 1-3 hours\n      endDate.setHours(endDate.getHours() + Math.floor(Math.random() * 3) + 1);\n    }\n\n    result.push({\n      id: currentId++,\n      startDate: startDate.toISOString(),\n      endDate: endDate.toISOString(),\n      title: events[Math.floor(Math.random() * events.length)],\n      color: COLORS[Math.floor(Math.random() * COLORS.length)],\n      description: \"Lorem ipsum dolor sit amet, consectetur adipiscing elit. Sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.\",\n      user: USERS_MOCK[Math.floor(Math.random() * USERS_MOCK.length)],\n    });\n  }\n\n  return result;\n};\n\nexport const CALENDAR_ITEMS_MOCK: IEvent[] = mockGenerator(80);\n",
      "type": "registry:component"
    },
    {
      "path": "src/modules/components/calendar/requests.ts",
      "content": "import { CALENDAR_ITEMS_MOCK, USERS_MOCK } from \"@/modules/components/calendar/mocks\";\n\nexport const getEvents = async () => {\n  return CALENDAR_ITEMS_MOCK;\n};\n\nexport const getUsers = async () => {\n  return USERS_MOCK;\n};\n",
      "type": "registry:component"
    },
    {
      "path": "src/modules/components/calendar/schemas.ts",
      "content": "import { z } from \"zod\";\n\nexport const eventSchema = z.object({\n  title: z.string().min(1, \"Title is required\"),\n  description: z.string().min(1, \"Description is required\"),\n  startDate: z.date({\n    required_error: \"Start date is required\",\n  }),\n  endDate: z.date({\n    required_error: \"End date is required\",\n  }),\n  color: z.enum([\"blue\" , \"green\" , \"red\" , \"yellow\" , \"purple\" , \"orange\"], {\n    required_error: \"Variant is required\",\n  }),\n});\n\nexport type TEventFormData = z.infer<typeof eventSchema>;\n",
      "type": "registry:component"
    },
    {
      "path": "src/modules/components/calendar/types.ts",
      "content": "export type TCalendarView = \"day\" | \"week\" | \"month\" | \"year\" | \"agenda\";\nexport type TEventColor = \"blue\" | \"green\" | \"red\" | \"yellow\" | \"purple\" | \"orange\";\n",
      "type": "registry:component"
    }
  ]
}